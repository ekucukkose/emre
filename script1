#Analyse RTCR pipeline output file in R Studio

# tapply(pemc_filter$Number.of.reads,pemc_filter$Amino.acid.sequence,sum)

# read the output file of rtcr pipeline as: x <- read.table("results.tsv",header=T,sep="\t",quote="", stringsAsFactors=F)
# read the output file of mitcr pipeline as: x <- read.table("file.tsv",skip=1,header=T,sep="\t",quote="", stringsAsFactors=F)
# attaching multple lines to a new data frame : x <- rbind(a,b,c etc.)

# Overlap = sum the distinct of the two blood draws (1), rbind the two blood draws and calc again the distinct TRCBs (2), finally calc the differince of 1 and 2.
# Jaccard index = overlap / distinct sum (2).

# enkele library van een donor? gebruik chao1 (for abundance data)
# meerdere libraries van een donor? gebruik chao2 (for replicated incidence data)

# bij meerdere blood draw van zelfde donor, chao2 seperatly berekenen, en daarna op tellen.
# blood draw bestaat uit meerdere libraries.

# change value of an lib :   data$Lib[data$Lib == 1] <- 12

# To find out-of-frame and stopcodons in a MiTCR result data set
#str(data$CDR3.amino.acid.sequence[grep("[*~]",data$CDR3.amino.acid.sequence)])
#str(data$CDR3.amino.acid.sequence[grep("[*]",data$CDR3.amino.acid.sequence)])       # * = stopcodon
#str(data$CDR3.amino.acid.sequence[grep("[~]",data$CDR3.amino.acid.sequence)])    # ~ = out of frame

# di_aminoacids <- read.table("di.txt") #na.string=FALSE for if you have NA in your table
# di_aminoacids <- t(di_aminoacids) #transpose
# di_aminoacids <- as.character(di_aminoacids)

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}



######################################################################################################################################################

# Stop getting in traceback mode 
options(error=NULL) 

get_legend<-function(myggplot){
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}

#load all packages which are installed.
get_load_all_packages <- function(x){
  lapply(.packages(all.available = TRUE), function(xx) library(xx,     character.only = TRUE))
}

#loads the data and renames the columns of MITCR data to RTCR data, also makes a column with the Variable.region.nucleotide.sequence and its nchar
get_table <- function(data){ 
  pipeline <- "RTCR"
  #pipeline <- readline(prompt="RTCR or MITCR pipeline? ") 
  if(pipeline=="RTCR"){   
    results_end <- read.table(data,header=T,sep="\t",quote="",stringsAsFactors=F)
    cat(pipeline,"data loaded successfully.")}
  else if(pipeline=="MITCR"){
    results_end <- read.table(data,skip=1,header=T,sep="\t",quote="", stringsAsFactors=F)
    # Rename the column of MITCR to RTCR column names to apply the written scripts.
    colnames(results_end)[colnames(results_end)=="Read.count"] <- "Number.of.reads"
    # Column "Percentage" skipped, n/a in RTCR
    colnames(results_end)[colnames(results_end)=="CDR3.nucleotide.sequence"] <- "Junction.nucleotide.sequence"
    colnames(results_end)[colnames(results_end)=="CDR3.nucleotide.quality"] <- "Quality"
    colnames(results_end)[colnames(results_end)=="Min.quality"] <- "Minimum.Phred"
    colnames(results_end)[colnames(results_end)=="CDR3.amino.acid.sequence"] <- "Amino.acid.sequence"
    # Column "V.alleles" skipped, n/a in RTCR
    colnames(results_end)[colnames(results_end)=="V.segments"] <- "V.gene"
    # Column "J.alleles" skipped, n/a in RTCR
    colnames(results_end)[colnames(results_end)=="J.segments"] <- "J.gene"
    # Column "D.alleles" skipped, n/a in RTCR
    # Column "D.segments" skipped, n/a in RTCR
    colnames(results_end)[colnames(results_end)=="Last.V.nucleotide.position"] <- "V.gene.end.position"
    # Column "First.D.nucleotide.position" skipped, n/a in RTCR
    # Column "Last.D.nucleotide.position" skipped, n/a in RTCR
    colnames(results_end)[colnames(results_end)=="First.J.nucleotide.position"] <- "J.gene.start.position"
    # Column "VD.insertions" skipped, n/a in RTCR
    # Column "DJ.insertions" skipped, n/a in RTCR
    # Column "Total.insertions" skipped, n/a in RTCR
    cat(pipeline,"data loaded successfully.")
    cat("\nColumn names of MITCR output are renamed as RTCR column names.")}
  else if(pipeline!="RTCR|MITCR"){
    cat("Error, couldn't identify the pipeline. Try again.")}  
  #Knipt het stukje variable regio uit tussen de V en J genen, hierin zit dus het D gen, insertie en deletie mutaties.
  start <- results_end$V.gene.end.position + 1
  end <- results_end$J.gene.start.position - 1 
  results_end$Variable.region.nucleotide.sequence <- substr(results_end$Junction.nucleotide.sequence, start, end)
  results_end$Length.variable.region <- nchar(results_end$Variable.region.nucleotide.sequence)
  
  #MITCR heeft getallen waar bij staat hoeveel VD en DJ instertie mutaties erzijn, haal deze af van de variabele regio, wat over blijft is sequentie van D gen.
  results_end <- get_filter(results_end)
  results_end <- get_relative_abundance_frequency_column(results_end)
  return(results_end)
}

######################################################################################################################################################

# import this formula to print the percent of out-of-frame clonotypes.
# % of out-of-frame clonotypesof all clonotypes: sum(subset(xxx, Frame > 0)$Number.of.reads)/sum(xxx$Number.of.reads)*100
#filters the data, removes the out of frame clonotypes and stopcodons
get_filter <- function(data){
  #pipeline <- readline(prompt="RTCR or MITCR pipeline? ") 
  pipeline <- "RTCR"
  if(pipeline=="RTCR"){ 
    filter1 <- subset(data, Frame == 0)
    filter2 <- subset(filter1, Number.of.stop.codons == 0)
    cat(pipeline,"data filtered successfully.")
  }  
  else if(pipeline=="MITCR"){
    filter1 <- subset(data, Amino.acid.sequence == chartr("*","~",data$Amino.acid.sequence)) #changes the symbol * to ~
    filter2 <- filter1[grep('~', filter1[,6], invert=TRUE),] #filters out of frame clonotypes and stopcodons of the column Amino.acid.sequence
    cat(pipeline,"data filtered successfully.")
  }
  return(filter2)
}

######################################################################################################################################################

get_rename_column <- function(data,old,new){colnames(data)[colnames(data)==old] <- new
                                            return(data)
}

######################################################################################################################################################

get_stopcodon_or_error <- function(data){
  
  #raw <- length(unique(data$Junction.nucleotide.sequence))
  
  true_subset <- subset(data, Frame == 0 & Number.of.stop.codons == 0)
  true <- length(unique(true_subset$Junction.nucleotide.sequence))
  
  outofframe_subset <- subset(data, Frame > 0)
  outofframe <- length(unique(outofframe_subset$Junction.nucleotide.sequence))
  outofframe_percent <- outofframe / true *100 
  
  stopcodon_subset <- subset(data, Number.of.stop.codons > 0)
  stopcodon <- length(unique(stopcodon_subset$Junction.nucleotide.sequence))
  stopcodon_percent <- stopcodon / true *100
  
  cat("#####  Distinct nt sequences of  #####\n")
  cat("True data:\t\t\t",true,"\n")
  cat("Out of frame:",outofframe,"\t\t",outofframe_percent,"\n")
  cat("Stop codons:\t",stopcodon,"\t\t\t",stopcodon_percent,"\n")
  
}

######################################################################################################################################################

#gets the total TRCB sequences, distinct TCRB, simpson index, chao1 estimate, chao2 estimate
get_numbers <- function(data){ 
  #stopifnot(length(unique(data$Frame))==1 && length(unique(dataNumber.of.stop.codon))==1) #but MITCR data frame has not those columns
  filter <- readline(prompt="Did you filter the data? yes or no:  ")
  
  if(filter=="yes"){
    libraries <- readline(prompt="Does the data set contain several libraries? yes or no: ") #yes = chao2, no=chao1
    total <- sum(data$Number.of.reads)
    cat("Total TCRx:",total,"\n")
    distinct_aa <- length(unique(data$Amino.acid.sequence))
    distinct_nt <- length(unique(data$Junction.nucleotide.sequence))
    cat("Distinct TCR (aa):",distinct_aa,"\n")
    cat("Distinct TCR (nt):",distinct_nt,"\n")
    simpson <- get_calc_simpson(data)
    cat("Simpson index:",simpson,"\n")
    
    if (libraries=="no"){
      chao1 <- get_chao1(data)
      chao1 <- format(chao1)
      cat("Chao1:",chao1,"\n")
    }
    else if (libraries=="yes"){
      chao2 <- get_calc_chao2(data)
      chao2 <- as.character(chao2)
      if (chao2=="-Inf"){
        cat("Error, couldn't calculate Chao2: the data set does not contain several libraries")
      }
      else if(chao2!="-Inf"){
        chao2 <- as.integer(chao2)
        cat("Chao2:",chao2,"\n")
      }
    }
    else if (libraries!="yes|no"){
      output="Error, couldn't perform the Chao1 or Chao2 estimator: you did not enter \"yes\" or \"no\" for the lib question"
      cat(output)
    }
  }
  else if(filter=="no"){
    output="Error, please filter your data first (out of frame & stopcodons, use ter function)"
    cat(output)
  }
  else if(filter!="yes|no"){
    output="Error, you did not enter \"yes\" or \"no\""
    cat(output)
  }
}

######################################################################################################################################################

get_vj_usage <- function(x,type="diversity"){
  if(!is.character(x$V.gene)){
    x$V.gene <- as.character(x$V.gene)
  }
  if(!is.character(x$J.gene)){
    x$J.gene <- as.character(x$J.gene)
  }
  uv <- sort(unique(x$V.gene))
  uj <- sort(unique(x$J.gene))
  m <- matrix(0,nrow=length(uv),ncol=length(uj))
  dimnames(m) <- list(uv,uj)
  
  if(type=="abundance"){
    x.vj_usage <- with(x,tapply(Number.of.reads,paste(V.gene,J.gene),sum))
  }else if(type=="diversity"){
    x.vj_usage <- with(x,tapply(Amino.acid.sequence,paste(V.gene,J.gene),function(y)length(unique(y))))
  }else{
    stop("Unknown type")
  }
  map <- setNames(strsplit(names(x.vj_usage)," "),names(x.vj_usage))
  sapply(names(x.vj_usage),function(s){
    vid <- map[[s]][1]
    jid <- map[[s]][2]
    m[vid,jid] <<- x.vj_usage[s]
  })
  return(m)
}

######################################################################################################################################################

get_plots_div <- function(data, name){
  data <- get_vj_usage(data,type="diversity")
  barplot(rowSums(data), las=2,cex.axis= 0.75, cex.names = 0.75, main = paste("Diversity V usage of",name))
  barplot(colSums(data), las=2,cex.axis= 0.75, cex.names = 0.75, main = paste("Diversity J usage of",name))
  data[data <= 0] <- NA
  heatmap(log10(data),scale="none", margin=c(6,6), main= paste("Diversity VJ usage of",name))
}

######################################################################################################################################################

get_plots_ab <- function(data,name){
  data <- get_vj_usage(data,type="abundance")
  barplot(rowSums(data), las=2,cex.axis= 0.75, cex.names = 0.75, main = paste("Abundance V usage of",name)) 
  barplot(colSums(data), las=2,cex.axis= 0.75, cex.names = 0.75, main = paste("Abundance J usage of",name))
  data[data <= 0] <- NA
  heatmap(log10(data),scale="none", margin=c(6,6), main= paste("Abundance VJ usage of",name))
}

######################################################################################################################################################

# gets the first V.gene and J.gene of the data set
get_mitcr_split_for_usage <- function(data){
  
  v <- data$V.gene
  for (i in 1:length(v)){
    seq <- v[[i]]
    #print(seq)
    #print(nchar(seq))
    if (nchar(seq) < 10){
      v[[i]] <- c(seq)
    } 
    else {
      temp <- strsplit(seq,', ')[[1]]
      #print(temp)
      #print(temp[[1]])
      v[[i]] <- temp[[1]]
    }
  }
  data$V.gene <- v
  
  j <- data$J.gene
  for (i in 1:length(j)){
    seq <- j[[i]]
    #print(seq)
    #print(nchar(seq))
    if (nchar(seq) < 10){
      j[[i]] <- c(seq)
    } 
    else {
      temp <- strsplit(seq,', ')[[1]]
      #print(temp)
      #print(temp[[1]])
      j[[i]] <- temp[[1]]
    }
  }
  data$J.gene <- j
  
  return(data)
}

# strsplit(x,', ')[[1]] #splits all genes by the symbol , and makes a vectors of it
# x[[1]] #returns the first vector, thus the first gene

######################################################################################################################################################

get_imseq_split_for_usage <- function(data){
  v <- data$V.gene
  for (i in 1:length(v)){
    seq <- v[[i]]
    if (nchar(seq) < 10){
      temp <- strsplit(seq,"V")
      v[[i]] <- sapply(temp,"[",2)} 
    else {
      temp <- strsplit(seq,"V")
      v[[i]] <- sapply(temp,"[",2)}}
  data$V.gene <- v
  
  v2 <- data$V.gene
  for (i in 1:length(v2)){
    seq <- v2[[i]]
    if (nchar(seq) < 5){
      v2[[i]] <- c(seq)} 
    else {
      temp <- strsplit(seq,"/")
      v2[[i]] <- sapply(temp,"[",1)}}
  data$V.gene <- v2
  
  j <- data$J.gene
  for (i in 1:length(j)){
    seq <- j[[i]]
    if (nchar(seq) < 10){
      temp <- strsplit(seq,"J")
      j[[i]] <- sapply(temp,"[",2)} 
    else {
      temp <- strsplit(seq,"J")
      j[[i]] <- sapply(temp,"[",2)}}
  data$J.gene <- j
  
  j2 <- data$J.gene
  for (i in 1:length(j2)){
    seq <- j2[[i]]
    if (nchar(seq) < 5){
      j2[[i]] <- c(seq)} 
    else {
      temp <- strsplit(seq,"/")
      j2[[i]] <- sapply(temp,"[",1)}}
  data$J.gene <- j2
  
  return(data)
}

######################################################################################################################################################

get_plots_div_comparison <- function(data1,data2){
  
  data1_distincts <- length(unique(data1$Junction.nucleotide.sequence))
  data2_distincts <- length(unique(data2$Junction.nucleotide.sequence))
  
  name1 <- readline(prompt="Data 1 name: ")
  name2 <- readline(prompt="Data 2 name: ")
  
  data1 <- get_vj_usage(data1,type="diversity")
  data2 <- get_vj_usage(data2,type="diversity")
  
  df <- rowSums(data1)  #makes new data.frame and gets the value of data 1 V usage (row=V,column=J of VJ usage matrix)
  df <- as.data.frame(df)
  df$data2 <- rowSums(data2) # add the V usage values of data 2 to the dataframe
  
  df$data1_distincts <- data1_distincts #add the distinct value to the data.frame 
  df$data2_distincts <- data2_distincts
  
  df[, "rf_data1"] <- df[,1] / df[, "data1_distincts"] * 100 #divide the usage value by the distinct value 
  df[, "rf_data2"] <- df[,2] / df[, "data2_distincts"] * 100
  
  df_barplot <- subset(df, select=c(rf_data1, rf_data2)) #select only the relative frequency values
  
  colnames(df_barplot)[colnames(df_barplot)=="rf_data1"] <- name1 #rename the column name of V usage values of data 1
  colnames(df_barplot)[colnames(df_barplot)=="rf_data2"] <- name2  
  
  df_barplot <- t(df_barplot) #transposing the data.frame
  
  barplot(df_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),
          main=paste("Diversity TRBV segments usage ratio in",name1,"and",name2),ylab="Relative frequency (%)",
          legend=rownames(df_barplot),ylim=c(0,30))
  
  ################################################### J USAGE BELOW #########################################
  
  df2 <- colSums(data1)  #makes new data.frame and gets the value of data 1 V usage (row=V,column=J of VJ usage matrix)
  df2 <- as.data.frame(df2)
  df2$data2 <- colSums(data2) # add the V usage values of data 2 to the dataframe
  
  df2$data1_distincts <- data1_distincts #add the distinct value to the data.frame 
  df2$data2_distincts <- data2_distincts
  
  df2[, "rf_data1"] <- df2[,1] / df2[, "data1_distincts"] * 100 #divide the usage value by the distinct value 
  df2[, "rf_data2"] <- df2[,2] / df2[, "data2_distincts"] * 100
  
  df2_barplot <- subset(df2, select=c(rf_data1, rf_data2)) #select only the relative frequency values
  
  colnames(df2_barplot)[colnames(df2_barplot)=="rf_data1"] <- name1 #rename the column name of V usage values of data 1
  colnames(df2_barplot)[colnames(df2_barplot)=="rf_data2"] <- name2  
  
  df2_barplot <- t(df2_barplot) #transposing the data.frame
  
  barplot(df2_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),
          main=paste("Diversity TRBJ segments usage ratio in",name1,"and",name2),ylab="Relative frequency (%)",
          legend=rownames(df2_barplot),ylim=c(0,40))
}

######################################################################################################################################################

get_plots_ab_comparison <- function(data1,data2){
  
  data1_sumreads <- sum(data1$Number.of.reads)
  data2_sumreads <- sum(data2$Number.of.reads)
  
  name1 <- readline(prompt="Data 1 name: ")
  name2 <- readline(prompt="Data 2 name: ")
  
  data1 <- get_vj_usage(data1,type="abundance")
  data2 <- get_vj_usage(data2,type="abundance")
  
  df <- rowSums(data1)  #makes new data.frame and gets the value of data 1 V usage (row=V,column=J of VJ usage matrix)
  df <- as.data.frame(df)
  df$data2 <- rowSums(data2) # add the V usage values of data 2 to the dataframe
  
  df$data1_sumreads <- data1_sumreads #add the sum reads value to the data.frame 
  df$data2_sumreads <- data2_sumreads
  
  df[, "rf_data1"] <- df[,1] / df[, "data1_sumreads"] * 100 #divide the usage value by the sum reads value 
  df[, "rf_data2"] <- df[,2] / df[, "data2_sumreads"] * 100
  
  df_barplot <- subset(df, select=c(rf_data1, rf_data2)) #select only the relative frequency values
  
  colnames(df_barplot)[colnames(df_barplot)=="rf_data1"] <- name1 #rename the column name of V usage values of data 1
  colnames(df_barplot)[colnames(df_barplot)=="rf_data2"] <- name2  
  
  df_barplot <- t(df_barplot) #transposing the data.frame
  
  View(df_barplot)
  
  barplot(df_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),
          main=paste("Abundance TRBV segments usage ratio in",name1,"and",name2),ylab="Relative frequency (%)",
          legend=rownames(df_barplot),ylim=c(0,30))
  
  ################################################### J USAGE BELOW #########################################
  
  df2 <- colSums(data1)  #makes new data.frame and gets the value of data 1 V usage (row=V,column=J of VJ usage matrix)
  df2 <- as.data.frame(df2)
  df2$data2 <- colSums(data2) # add the V usage values of data 2 to the dataframe
  
  df2$data1_sumreads <- data1_sumreads #add the sum reads value to the data.frame 
  df2$data2_sumreads <- data2_sumreads
  
  df2[, "rf_data1"] <- df2[,1] / df2[, "data1_sumreads"] * 100 #divide the usage value by the sum reads value 
  df2[, "rf_data2"] <- df2[,2] / df2[, "data2_sumreads"] * 100
  
  df2_barplot <- subset(df2, select=c(rf_data1, rf_data2)) #select only the relative frequency values
  
  colnames(df2_barplot)[colnames(df2_barplot)=="rf_data1"] <- name1 #rename the column name of V usage values of data 1
  colnames(df2_barplot)[colnames(df2_barplot)=="rf_data2"] <- name2  
  
  df2_barplot <- t(df2_barplot) #transposing the data.frame
  
  View(df2_barplot)
  
  barplot(df2_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),
          main=paste("Abundance TRBJ segments usage ratio in",name1,"and",name2),ylab="Relative frequency (%)",
          legend=rownames(df2_barplot),ylim=c(0,40))
}

######################################################################################################################################################

ab_curve <- function(x){
  x.flat_counts <- with(x,tapply(Number.of.reads, Amino.acid.sequence, sum))
  x.ftab_ab <- to_ftab(x.flat_counts)
  x.r_ab <- rarefaction(x.ftab_ab)
  with(x.r_ab,plot(Size,Species,col="black", lwd=4, main="Abundance curve of diversity estimate"))
}

######################################################################################################################################################

get_aa_weblogo <- function(data){
  vid <- readline(prompt="\nEnter V.gene: ")
  jid <- readline(prompt="Enter J.gene: ")
  fam <- subset(data,V.gene==vid & J.gene==jid)
  stopifnot(length(unique(fam$V.gene))==1 && length(unique(fam$J.gene))==1)
  barplot(with(fam, tapply(Number.of.reads, nchar(Amino.acid.sequence),sum)),main= "aa length distribution of CDR3")
  maxsize=1e3
  nCDR3 <- readline(prompt="How many sequence logos of different CDR3s?: ")
  nCDR3 <- as.integer(nCDR3)
  for (i in 1:nCDR3){
    length <- readline(prompt="\nEnter length of the CDR3s: ")
    length <- as.integer(length)
    get_finger <- subset(fam,nchar(Amino.acid.sequence)==length)
    fn <- readline(prompt="Enter output file name (add .txt at the end): ")
    write.table(sample(rep(get_finger$Amino.acid.sequence,get_finger$Number.of.reads),maxsize,replace=TRUE),file=fn,row.names=F,quote=F,col.names=F,)
    cat("File:",fn,"is saved in",getwd(),"\n")
  }
  cat("\nUse the file(s) as input(s) in http://weblogo.berkeley.edu/logo.cgi")
}

######################################################################################################################################################

# Creates a given amount of text files containing CDR3 sequences of a given length of a given VJ family
get_nucl_weblogo <- function(data){
  vid <- readline(prompt="\nEnter V.gene: ")
  jid <- readline(prompt="Enter J.gene: ")
  fam <- subset(data,V.gene==vid & J.gene==jid)
  stopifnot(length(unique(fam$V.gene))==1 && length(unique(fam$J.gene))==1)
  barplot(with(fam, tapply(Number.of.reads, nchar(Junction.nucleotide.sequence),sum)),main= "nucl. length distribution of CDR3")
  maxsize=1e3
  nCDR3 <- readline(prompt="How many sequence of different CDR3s?: ")
  nCDR3 <- as.integer(nCDR3)
  for (i in 1:nCDR3){
    length <- readline(prompt="\nEnter length of the CDR3s: ")
    length <- as.integer(length)
    get_finger <- subset(fam,nchar(Junction.nucleotide.sequence)==length)
    fn <- readline(prompt="Enter output file name (add .txt at the end): ")
    write.table(sample(rep(get_finger$Junction.nucleotide.sequence,get_finger$Number.of.reads),maxsize,replace=TRUE),file=fn,row.names=F,quote=F,col.names=F,)
    cat("File:",fn,"is saved in",getwd(),"\n")
  }
  cat("\nUse the file(s) as input(s) in http://weblogo.berkeley.edu/logo.cgi")
}

######################################################################################################################################################

#Gets the jacard index(%) of two data frames
get_jacard <- function(data1,data2,region){ 
  #columnvariable <- readline(prompt="enter column: ") 
  if(region=="aminoacid"){
    data1_TRCB_distincts <- length(unique(data1$Amino.acid.sequence))
    data2_TRCB_distincts <- length(unique(data2$Amino.acid.sequence))}
  if(region=="nucleotide"){
    data1_TRCB_distincts <- length(unique(data1$Junction.nucleotide.sequence))
    data2_TRCB_distincts <- length(unique(data2$Junction.nucleotide.sequence)) }
  if(region=="indel_aa"){
    data1_TRCB_distincts <- length(unique(data1$Variable.region.amino.acid.sequence))
    data2_TRCB_distincts <- length(unique(data2$Variable.region.amino.acid.sequence))}
  
  distinct_sum <- data1_TRCB_distincts + data2_TRCB_distincts 
  marge_datas <- rbind(data1,data2)
  
  if(region=="aminoacid"){
    marge_datas_TRCB_distincts <- length(unique(marge_datas$Amino.acid.sequence))}
  if(region=="nucleotide"){
    marge_datas_TRCB_distincts <- length(unique(marge_datas$Junction.nucleotide.sequence))}
  if(region=="indel_aa"){
    marge_datas_TRCB_distincts <- length(unique(marge_datas$Variable.region.amino.acid.sequence))}
  
  overlap <- distinct_sum - marge_datas_TRCB_distincts
  jacard <- (overlap / marge_datas_TRCB_distincts * 100)
  return(jacard)
}

######################################################################################################################################################

#Gets the variable region between V and J genes
get_var_region <- function(data){ 
  start <- data$V.gene.end.position + 1
  end <- data$J.gene.start.position - 1 
  data$Variable.region.nucleotide.sequence <- substr(data$Junction.nucleotide.sequence, start, end)
  data$Length.variable.region <- nchar(data$Variable.region.nucleotide.sequence)
  return(data)
}

######################################################################################################################################################

get_chao1 <- function(data){
  data.flat_counts <- with(data,tapply(Number.of.reads,Amino.acid.sequence,sum)) 
  ftab <- data.frame(table(data.flat_counts))
  colnames(ftab) <- c("i","fi")
  ftab$i <- as.numeric(as.character(ftab$i))
  data.ftab_ab <- ftab
  f1 <- data.ftab_ab$fi[data.ftab_ab$i==1] # Number of species with abundance 1
  f2 <- data.ftab_ab$fi[data.ftab_ab$i==2]
  Sobs <- sum(data.ftab_ab$fi) # Number of observed species
  if(f2 == 0){
    return(Sobs + f1*(f1-1)/(2*(f2+1)))
  }else{
    return(Sobs + (f1^2)/(2*f2))
  }    
}

######################################################################################################################################################

get_chao2 <- function(data){   
  #this function is to determine the effect of several libraries and the combinations of the libs, with respect to depth of the methods on the diveristy estimate.
  libs <- readline(prompt="#lib?: ")
  libs <- as.integer(libs)
  fn <- readline(prompt="Enter output file name (add .txt at the end): ")
  
  combnmatrix <- combn(16,libs)         #creates a matrix of all library combinations
  columnsnumber <- ncol(combnmatrix)    #for the loop.
  
  for(i in 1:columnsnumber){
    
    data2 <- combnmatrix[,i] 
    #print(data2)
    
    data3 <- subset(data, Lib==data2[1] | Lib==data2[2] | Lib==data2[3] | Lib==data2[4] | Lib==data2[5] | Lib==data2[6] | Lib==data2[7] | Lib==data2[8] | Lib==data2[9] | Lib==data2[10] | Lib==data2[11] | Lib==data2[12] | Lib==data2[13] | Lib==data2[14]  )
    
    m <- length(unique(data3$Lib))
    
    ftab <- data.frame(table(table(data3$CDR3)))  #verander deze CDR3 of Amino.acid.sequence
    colnames(ftab) <- c("i","fi")
    ftab$i <- as.numeric(as.character(ftab$i))
    data.ftab_i <- ftab
    
    f1 <- data.ftab_i$fi[data.ftab_i$i==1] # Number of species with incidence 1
    f2 <- data.ftab_i$fi[data.ftab_i$i==2]    
    sobs <- sum(data.ftab_i$fi) # Number of observed species
    if(f2 == 0){
      chao2 <- (sobs + ((m-1)/m) * f1*(f1-1)/(2*(f2+1)))
    }else{
      chao2 <- (sobs + ((m-1)/m) * (f1^2)/(2*f2))}
    
    write.table(chao2,file=fn,append=T,row.names=F,quote=F,col.names=F,)
    
  }
  cat("File:",fn,"is saved in",getwd(),"\n")
}

######################################################################################################################################################

# Calculates Simpson diversity index, i.e.
# the probability that two items taken, with replacement,
# at random from a dataset are the same.
get_calc_simpson <- function(data){
  
  data.flat_counts <- with(data,tapply(Number.of.reads,Amino.acid.sequence,sum))
  ftab <- data.frame(table(data.flat_counts))
  colnames(ftab) <- c("i","fi")
  ftab$i <- as.numeric(as.character(ftab$i))
  n <- with(ftab,sum(i*fi))
  sum(apply(ftab,1,function(row)row[2]*(row[1]/n)^2))
}

######################################################################################################################################################

get_calc_chao2 <- function(data){
  
  #chao2 estimates the diversity of a community with several samples.
  #fill the number of libraries manual in with option 1 or option 2 (make in your data frame a new column with lib or Lib)
  #libraries <- readline(prompt="Library count?: ")  #option 1
  #m <- as.integer(libraries)       # m = number of samples (in warren m = number of libraries)
  
  m <- length(unique(data$lib))    #option 2, oorspronkelijke formule, gebruik deze als je een libs bij elkaar gaat toevoegen en een extra column aanmaakt waarin Library getal in staat.
  
  ftab <- data.frame(table(table(data$Amino.acid.sequence)))  
  colnames(ftab) <- c("i","fi")
  ftab$i <- as.numeric(as.character(ftab$i))
  data.ftab_i <- ftab
  
  f1 <- data.ftab_i$fi[data.ftab_i$i==1] # Number of species with incidence 1
  f2 <- data.ftab_i$fi[data.ftab_i$i==2] # Number of species with incidence 2
  
  sobs <- sum(data.ftab_i$fi) # Number of observed species
  if(f2 == 0){
    return(sobs + ((m-1)/m) * f1*(f1-1)/(2*(f2+1)))
  }else{
    return(sobs + ((m-1)/m) * (f1^2)/(2*f2))
  }
}

######################################################################################################################################################

get_overlap_venn_aa <- function(data1,data2){
  
  name1 <- readline(prompt="name data1: ")
  name2 <- readline(prompt="name data2: ")
  
  distinct_aa_data1 <- length(unique(data1$Amino.acid.sequence))
  distinct_aa_data2 <- length(unique(data2$Amino.acid.sequence))
  sum_distinct_datas_aa <- distinct_aa_data1 + distinct_aa_data2
  total_aa <- rbind(data1,data2)
  distinct_aa_total <- length(unique(total_aa$Amino.acid.sequence))
  overlap_aa <- sum_distinct_datas_aa - distinct_aa_total
  
  venn_plot_aa = draw.pairwise.venn(area1 = distinct_aa_data1, area2 = distinct_aa_data2, cross.area = overlap_aa, category = c(name1, name2), 
                                    fill = c("blue","red"),cat.pos = c(0,0), cat.dist = rep(0.025, 2), scaled = TRUE, alpha = 0.5)
  return(grid.arrange(gTree(children=venn_plot_aa), main="Overlap unique amino acid sequence clonotypes"))
}

######################################################################################################################################################

get_overlap_venn_nt <- function(data1,data2){  
  
  name1 <- readline(prompt="name data1: ")
  name2 <- readline(prompt="name data2: ")
  
  distinct_nt_data1 <- length(unique(data1$Junction.nucleotide.sequence))
  distinct_nt_data2 <- length(unique(data2$Junction.nucleotide.sequence))
  sum_distinct_datas_nt <- distinct_nt_data1 + distinct_nt_data2
  total_nt <- rbind(data1,data2)
  distinct_nt_total <- length(unique(total_nt$Junction.nucleotide.sequence))
  overlap_nt <- sum_distinct_datas_nt - distinct_nt_total
  
  venn_plot_nt = draw.pairwise.venn(area1 = distinct_nt_data1, area2 = distinct_nt_data2, cross.area = overlap_nt, category = c(name1, name2), 
                                    fill = c("blue","red"),cat.pos = c(0,0), cat.dist = rep(0.025, 2), scaled = TRUE, alpha = 0.5)
  return(grid.arrange(gTree(children=venn_plot_nt), main="Overlap unique junction nucleotide sequence clonotypes"))
}

##################################################################################################################################################################################################################

#emre: make here new vector that contains all possible amino acids.
#emre: make here AA.freq <- that contains the freq of AA.

nucleotides <- c('A', 'C', 'G', 'T')
di_nucleotides <- c('AA', 'AC', 'AG', 'AT', 'CA', 'CC', 'CG', 'CT', 'GA', 'GC', 'GG', 'GT', 'TA', 'TC', 'TG', 'TT')
tri_nucleotides <- c('AAA', 'AAC', 'AAG', 'AAT', 'ACA', 'ACC', 'ACG', 'ACT', 'AGA', 'AGC', 'AGG', 'AGT', 'ATA', 'ATC', 'ATG', 'ATT',
                     'CAA', 'CAC', 'CAG', 'CAT', 'CCA', 'CCC', 'CCG', 'CCT', 'CGA', 'CGC', 'CGG', 'CGT', 'CTA', 'CTC', 'CTG', 'CTT', 
                     'GAA', 'GAC', 'GAG', 'GAT', 'GCA', 'GCC', 'GCG', 'GCT', 'GGA', 'GGC', 'GGG', 'GGT', 'GTA', 'GTC', 'GTG', 'GTT',
                     'TAA', 'TAC', 'TAG', 'TAT', 'TCA', 'TCC', 'TCG', 'TCT', 'TGA', 'TGC', 'TGG', 'TGT', 'TTA', 'TTC', 'TTG', 'TTT')
D.freq <- c(0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)

folder <- getwd()
setwd("/home/emre/tmp/aminoacid_combinations")


get_aminoacids_load <- function(data){
  data2 <- read.table(data,na.string=F) #na.string=FALSE for if you have NA in your table
  data2 <- t(data2) #transpose
  data2 <- as.character(data2)
}

aminoacids <- c('A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y')
di_aminoacids <- get_aminoacids_load("di.txt")
tri_aminoacids <- get_aminoacids_load("tri.txt")
quatro_aminoacids <- get_aminoacids_load("quatro.txt")
#penta_aminoacids <- get_aminoacids_load("penta.txt")

setwd(folder)

#   >K02545|TRBD1*01|Homo sapiens|F|D-REGION|82..93|12 nt|1| | | | |12+0=12| | |
#   gggacagggggc
#   >X02987|TRBD2*01|Homo sapiens|F|D-REGION|140..155|16 nt|1| | | | |16+0=16| | |
#   gggactagcggggggg
#   >M14159|TRBD2*02|Homo sapiens|F|D-REGION|569..584|16 nt|1| | | | |16+0=16| | |
#   gggactagcgggaggg

TRBD101_seq <- c('gggacagggggc')
TRBD101_tri <- c('ggg', 'gga', 'gac', 'aca', 'cag', 'agg', 'ggc')

TRBD201_seq <- c('gggactagcggggggg')
TRBD201_tri <- c('ggg', 'gga', 'gac', 'act', 'cta', 'tag', 'agc', 'gcg')

TRBD202_seq <- c('gggactagcgggaggg')
TRBD202_tri <- c('ggg', 'gga', 'gac', 'act', 'cta', 'tag', 'agc', 'gcg', 'gag', 'agg')

TRBD_tri <- c('aca', 'cag', 'ggc', 'ggg', 'gga', 'gac', 'act', 'cta', 'tag', 'agc', 'gcg', 'gag', 'agg')

tri_nucleotides_without_TRBD <- c('AAA', 'AAC', 'AAG', 'AAT', 'ACC', 'ACG', 'AGA', 'AGT', 'ATA', 'ATC', 'ATG', 'ATT',
                                  'CAA', 'CAC', 'CAT', 'CCA', 'CCC', 'CCG', 'CCT', 'CGA', 'CGC', 'CGG', 'CGT', 'CTC', 'CTG', 'CTT', 
                                  'GAA', 'GAT', 'GCA', 'GCC', 'GCT', 'GGT', 'GTA', 'GTC', 'GTG', 'GTT',
                                  'TAA', 'TAC', 'TAT', 'TCA', 'TCC', 'TCG', 'TCT', 'TGA', 'TGC', 'TGG', 'TGT', 'TTA', 'TTC', 'TTG', 'TTT')

######################################################################################################################################################

# some data sets has Length.variable.region instead of J.start.minus.V.end
get_distr_nucl_vrns <- function(data){
  barplot(table((data$Length.variable.region)),las=2,cex.axis= 0.75, cex.names = 0.75,main="Distribution of N nucleotides of Variable.region.nucleotide.sequence",xlab="N nucleotides",ylab="Count")
}

######################################################################################################################################################

# some data sets has Length.variable.region instead of J.start.minus.V.end
get_distr_aminoacid_vrns <- function(data,name){
  
  #df1 <- data.frame()
  #df1 <- data$Length.variable.amino.acid.region
  #df1 <- as.data.frame(df1)
  #a <- sum(data$Number.of.reads)
  #df1$abundance <- a
  #df1$relative_freq <- df1[,1]/df1$abundance*100
  #View(df1)
  
  #View(table(data$Length.variable.amino.acid.region))
  
  b <- length(unique(data$Junction.nucleotide.sequence))
  print(b)
  
  df1 <- data.frame()
  df1 <- table(data$Length.variable.amino.acid.region)
  df1 <- as.data.frame(df1)
  df1$distinct <- b
  df1$distinct <- as.numeric(df1$distinct)
  View(df1)
  df1$ref_freq <- df1$Freq/df$distinct*100
  
  df2 <- df1[,1]
  df2 <- as.data.frame(df2)
  df2[,2] <- df1$ref_freq
  View(df2)
  
  jpeg(file = paste("/home/emre/kmer_plots/test/",name,".jpg", sep = ""), width=600, height=600) 
  g<- barplot(table((data$Length.variable.amino.acid.region)),las=2,cex.axis= 0.75, cex.names = 0.75,main="Distribution of amino acids of Variable.region.amino.acid.sequence  ",xlab="N aminoacids",ylab="Count")
  dev.off()
  
}

######################################################################################################################################################

get_family <- function(data){
  
  vid <- readline(prompt="Enter V.gene: ") 
  jid <- readline(prompt="Enter J.gene: ") 
  subset(data,V.gene==vid & J.gene==jid)
}

######################################################################################################################################################

#to rbind a mitcr data frame which doesnt contain a given V or J.gene (mitcr)
#new_row1 <- data.frame(row.names="x1",
#                       Number.of.reads=1,
#                       Percentage="0",
#                       Junction.nucleotide.sequence="0",
#                       Quality="0",
#                       Minimum.Phred="0",
#                       Amino.acid.sequence="0",
#                       V.alleles="0",
#                       V.gene="TRBV11-3",
#                       J.alleles="0",
#                       J.gene="TRBJ1-1",
#                       D.alleles="0",
#                       D.segments="0",
#                       V.gene.end.position="0",
#                       First.D.nucleotide.position="0",
#                       Last.D.nucleotide.position="0",
#                       J.gene.start.position="0",
#                       VD.insertions="0",
#                       DJ.insertions="0",
#                       Total.insertions="0",
#                       Variable.region.nucleotide.sequence="0",
#                       Length.variable.region="0")

######################################################################################################################################################

get_variable_region_CDR3_aminoacids <- function(data){ #cuts the variable region of the amino acid sequence with V or J.
  
  v_end <- data$V.gene.end.position 
  v_end_aa <- v_end / 3
  v_end_aa <- trunc(v_end_aa) + 1
  
  j_begin <-data$J.gene.start.position 
  j_begin_aa <- j_begin / 3
  j_begin_aa <- ceiling(j_begin_aa) 
  
  data$Variable.region.amino.acid.sequence <- substr(data$Amino.acid.sequence, v_end_aa, j_begin_aa)
  data$Length.variable.amino.acid.region <- nchar(data$Variable.region.amino.acid.sequence)
  return(data)
}

######################################################################################################################################################

get_count_aminoacids_monos <- function(finger,region,type,logx){
  
  mono_aminoacids <- rep(0,20)
  names(mono_aminoacids) <- aminoacids
  
  if(region=="group_aa"){
    mono_aminoacids <- rep(0,5)
    names(mono_aminoacids) <- aminoacids5
  }
  
  total_elements <- c(0,0,0) # keep track total amount of elements, mono, di and tri respectively. 
  
  if(region=="full"){aminoacids_column <- finger$Amino.acid.sequence}              
  if(region=="indel"){aminoacids_column <- finger$Variable.region.amino.acid.sequence} 
  if(region=="group_aa"){aminoacids_column <- finger$CDR3_cluster_aa}
  
  numberofreads <- finger$Number.of.reads 
  
  if(type=="diversity"){
    if(length(aminoacids_column) > 0){  
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq > 0){
          
          for(i in 1:length_of_seq){              
            mono_aminoacids[[substr(seq, i, i)]] = mono_aminoacids[[substr(seq, i, i)]] + 1
            total_elements[1] <- total_elements[1]+1
          }
        }
      }
    }
  }
  
  if(type=="abundance"){
    if(length(aminoacids_column) > 0){  
      
      empty <- 0
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        possible_monos <- length_of_seq #this returns the possible combinations in the seq.
        
        empty <- empty + 1
        
        abundance <- data.frame()
        abundance <- rep(0,possible_monos)
        abundance <- numberofreads[empty]
        
        if(length_of_seq > 0){  
          
          for(i in 1:length_of_seq){              
            if(i < length_of_seq){ 
              
              mono_aminoacids[[substr(seq, i, i)]] = mono_aminoacids[[substr(seq, i, i)]] + abundance   
              
              total_elements[1] <- total_elements[1] + abundance      
            }             
          }
        }
      }
    }
  }
  
  if(logx=="logon"){
    mono_aminoacids <- log(mono_aminoacids)
    total_elements[1] <- log(total_elements[1])
  }
  
  mono_aminoacids_count <- mono_aminoacids / total_elements[1]
  monos <- data.frame()
  monos <- mono_aminoacids_count
  return(monos)
}

######################################################################################################################################################

get_count_aminoacids_dis <- function(finger,region,type,logx){ 
  
  di_aminoacids2 <- rep(0,400)
  names(di_aminoacids2) <- di_aminoacids
  
  total_elements <- c(0,0,0) # keep track total amount of elements, mono, di and tri respectively. 
  
  if(region=="full"){
    aminoacids_column <- finger$Amino.acid.sequence}              
  if(region=="indel"){
    #finger <- subset(finger, Length.variable.amino.acid.region > 0)
    aminoacids_column <- finger$Variable.region.amino.acid.sequence}                  
  
  numberofreads <- finger$Number.of.reads 
  
  if(type=="diversity"){
    if(length(aminoacids_column) > 0){
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq > 0){
          
          for(i in 1:length_of_seq){
            if(i < length_of_seq){
              di_aminoacids2[[substr(seq, i, i+1)]] = di_aminoacids2[[substr(seq, i, i+1)]] + 1}
            total_elements[2] <- total_elements[2]+1
          }
        }
      }
    }  
  }
  
  if(type=="abundance"){
    if(length(aminoacids_column) > 0){  
      
      empty <- 0
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        possible_dis <- length_of_seq - 1 #this returns the possible combinations in the seq.
        
        empty <- empty + 1
        
        abundance <- data.frame()
        abundance <- rep(0,possible_dis)
        abundance <- numberofreads[empty]
        
        if(length_of_seq > 0){  
          
          for(i in 1:length_of_seq){              
            if(i < length_of_seq){ #in the script of lucie there was -1, but this in not correct! e.g. if seq = ATGC, it didnt record the last one (GC).
              
              di_aminoacids2[[substr(seq, i, i+1)]] = di_aminoacids2[[substr(seq, i, i+1)]] + abundance   
              
              total_elements[2] <- total_elements[2] + abundance      
            }             
          }
        }
      }
    }
  }
  
  if(logx=="logon"){
    di_aminoacids2 <- log(di_aminoacids2)
    total_elements[2] <- log(total_elements[2])
  }
  
  di_aminoacids_count <- di_aminoacids2 / total_elements[2] 
  dis <- data.frame()
  dis <- di_aminoacids_count
  return(dis)    
}

######################################################################################################################################################

get_count_aminoacids_tris <- function(finger,region,type,logx){ 
  
  tri_aminoacids3 <- rep(0,8000)
  names(tri_aminoacids3) <- tri_aminoacids
  
  total_elements <- c(0,0,0) # keep track total amount of elements, mono, di and tri respectively. 
  
  if(region=="full"){
    aminoacids_column <- finger$Amino.acid.sequence}              
  if(region=="indel"){
    aminoacids_column <- finger$Variable.region.amino.acid.sequence} 
  
  numberofreads <- finger$Number.of.reads 
  
  if(type=="diversity"){
    if(length(aminoacids_column) > 0){  
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq > 0){
          
          for(i in 1:length_of_seq){
            if(i < length_of_seq-1){      #-2 here, but incorrect!,should be -1                    
              tri_aminoacids3[[substr(seq, i,i+2)]] =  tri_aminoacids3[[substr(seq, i,i+2)]] + 1}
            total_elements[3] <- total_elements[3]+1
          }
        }
      }
    }
  }
  
  if(type=="abundance"){
    if(length(aminoacids_column) > 0){  
      
      empty <- 0
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq >= 3){
          
          possible_tris <- length_of_seq - 2 #this returns the possible combinations in the seq.
          #print(possible_tris)
          
          empty <- empty + 1
          
          abundance <- data.frame()
          abundance <- rep(0,possible_tris)
          abundance <- numberofreads[empty]
          
          if(length_of_seq > 0){
            
            for(i in 1:length_of_seq){
              if(i < length_of_seq-1){      #-2 here, but incorrect!      
                
                tri_aminoacids3[[substr(seq, i,i+2)]] =  tri_aminoacids3[[substr(seq, i,i+2)]] + abundance
                
                total_elements[3] <- total_elements[3] + abundance
                
              }              
            }
          }      
        }        
      }
    }
  }
  
  if(logx=="logon"){
    tri_aminoacids3 <- log(tri_aminoacids3)
    total_elements[3] <- log(total_elements[3])
  }
  
  tri_aminoacids_count <- tri_aminoacids3 / total_elements[3]
  tris <- data.frame()
  tris <- tri_aminoacids_count
  return(tris)
}

######################################################################################################################################################

get_count_aminoacids_quatros <- function(finger,region,type,logx){ 
  
  quatro_aminoacids4 <- rep(0,160000)
  names(quatro_aminoacids4) <- quatro_aminoacids
  
  total_elements <- c(0,0,0,0) # keep track total amount of elements, mono, di and tri respectively. 
  
  if(region=="full"){
    aminoacids_column <- finger$Amino.acid.sequence}              
  if(region=="indel"){
    aminoacids_column <- finger$Variable.region.amino.acid.sequence} 
  
  numberofreads <- finger$Number.of.reads 
  
  if(type=="diversity"){
    if(length(aminoacids_column) > 0){  
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq > 0){
          
          for(i in 1:length_of_seq){
            if(i < length_of_seq-2){                          
              quatro_aminoacids4[[substr(seq, i,i+3)]] =  quatro_aminoacids4[[substr(seq, i,i+3)]] + 1}
            total_elements[4] <- total_elements[4]+1
          }
        }
      }
    }   
  }
  
  if(type=="abundance"){  
    if(length(aminoacids_column) > 0){  
      
      empty <- 0
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        
        if(length_of_seq >= 4){
          
          possible_quatros <- length_of_seq - 3 #this returns the possible combinations in the seq.
          
          empty <- empty + 1
          
          abundance <- data.frame()
          abundance <- rep(0,possible_quatros)
          abundance <- numberofreads[empty]
          
          if(length_of_seq > 0){
            
            for(i in 1:length_of_seq){
              if(i < length_of_seq-2){      #-3 here, but incorrect!      
                
                quatro_aminoacids4[[substr(seq, i,i+3)]] =  quatro_aminoacids4[[substr(seq, i,i+3)]] + abundance
                
                total_elements[4] <- total_elements[4] + abundance
                
              }              
            }
          }      
        }        
      }
    }   
  }
  
  if(logx=="logon"){
    quatro_aminoacids4 <- log(quatro_aminoacids4)
    total_elements[4] <- log(total_elements[4])
  }
  
  quatro_aminoacids_count <- quatro_aminoacids4 / total_elements[4]
  quatros <- data.frame()
  quatros <- quatro_aminoacids_count
  #write.csv(quatros,file="quatros.csv") ###
  return(quatros)
}

######################################################################################################################################################

get_frequency_plots_aminoacids_universal <- function(data1,data2,name1,name2,mer,region,type,logx,motif_name){     #mer= monos/dis/tris/quatros       #region= full/indel       #type= abundance/diversity    #logx=logon
  
  backup1 <- data1
  backup2 <- data2
  
  #data1 <- get_variable_region_CDR3_aminoacids(data1)
  #data2 <- get_variable_region_CDR3_aminoacids(data2)
  
  if(mer=="monos"){
    jpeg_start <- "mono_mer"
    main_start <- "Mono-mer"
    labels_plot <- aminoacids
    x_data1 <- get_count_aminoacids_monos(data1,region,type,logx)
    x_data2 <- get_count_aminoacids_monos(data2,region,type,logx)}
  
  if(mer=="dis"){
    jpeg_start <- "di_mer"
    main_start <- "Di-mer"
    labels_plot <- di_aminoacids
    x_data1 <- get_count_aminoacids_dis(data1,region,type,logx)
    x_data2 <- get_count_aminoacids_dis(data2,region,type,logx)} 
  
  if(mer=="tris"){
    jpeg_start <- "tri_mer"
    main_start <- "Tri-mer"
    labels_plot <- tri_aminoacids
    x_data1 <- get_count_aminoacids_tris(data1,region,type,logx)
    x_data2 <- get_count_aminoacids_tris(data2,region,type,logx)}
  
  if(mer=="quatros"){
    jpeg_start <- "quatro_mer"
    main_start <- "Quatro-mer"
    labels_plot <- quatro_aminoacids
    x_data1 <- get_count_aminoacids_quatros(data1,region,type,logx)
    x_data2 <- get_count_aminoacids_quatros(data2,region,type,logx)}
  
  x_data1 <- as.data.frame(x_data1)
  x_data2 <- as.data.frame(x_data2)
  
  together <- x_data1
  together <- as.data.frame(together)
  together$data2 <- x_data2$x_data2
  
  colnames(together)[colnames(together)=="x_data1"] <- name1
  colnames(together)[colnames(together)=="data2"] <- name2
  
  plot_axis_max <- max(together, na.rm=TRUE)
  
  if(region=="full"){region_name<-"CDR3"}
  if(region=="indel"){region_name<-"N-Dβ-N"}
  
  AA_RANK <- (together[order(together[,1],decreasing=T),])
  #View(AA_RANK)
  
  jpeg(file = paste("/home/emre/kmer_plots/",motif_name,"_",name1,"_",name2,"_", region,"_", type,"_",jpeg_start, ".jpg", sep = ""), width=600, height=600) 
  g <- plot(together,xlim=c(0,plot_axis_max),ylim=c(0,plot_axis_max),main=paste(main_start,"aminoacids frequencies in",name1,"and",name2,"\n",region_name,type))
  text(together, labels=labels_plot, cex= 1, pos=3)
  abline(0,1)
  dev.off()
  print("DONE")
}

######################################################################################################################################################

get_frequency_plots_aminoacids_fam <- function(data1,data2,name1,name2,vid,jid,mer,region,type){ #mer= monos/dis/tris/quatros   #region= full/indel        #type= abundance/diversity
  
  backup1 <- data1
  backup2 <- data2
  
  data1 <- subset(data1, V.gene==vid & J.gene==jid)
  data2 <- subset(data2, V.gene==vid & J.gene==jid)
  
  data1 <- get_variable_region_CDR3_aminoacids(data1)
  data2 <- get_variable_region_CDR3_aminoacids(data2)
  
  if(mer=="monos"){
    jpeg_start <- "mono_mer"
    main_start <- "Mono-mer"
    labels_plot <- aminoacids
    x_data1 <- get_count_aminoacids_monos(data1,region,type)
    x_data2 <- get_count_aminoacids_monos(data2,region,type)}
  
  if(mer=="dis"){
    jpeg_start <- "di_mer"
    main_start <- "Di-mer"
    labels_plot <- di_aminoacids
    x_data1 <- get_count_aminoacids_dis(data1,region,type)
    x_data2 <- get_count_aminoacids_dis(data2,region,type)} 
  
  if(mer=="tris"){
    jpeg_start <- "tri_mer"
    main_start <- "Tri-mer"
    labels_plot <- tri_aminoacids
    x_data1 <- get_count_aminoacids_tris(data1,region,type)
    x_data2 <- get_count_aminoacids_tris(data2,region,type)}
  
  if(mer=="quatros"){
    jpeg_start <- "quatro_mer"
    main_start <- "Quatro-mer"
    labels_plot <- quatro_aminoacids
    x_data1 <- get_count_aminoacids_quatros(data1,region,type)
    x_data2 <- get_count_aminoacids_quatros(data2,region,type)}
  
  x_data1 <- as.data.frame(x_data1)
  x_data2 <- as.data.frame(x_data2)
  
  together <- x_data1
  together <- as.data.frame(together)
  together$data2 <- x_data2$x_data2
  
  colnames(together)[colnames(together)=="x_data1"] <- name1
  colnames(together)[colnames(together)=="data2"] <- name2
  
  plot_axis_max <- max(together, na.rm=TRUE)
  
  if(region=="full"){region_name<-"CDR3"}
  if(region=="indel"){region_name<-"N-Dβ-N"}
  
  jpeg(file = paste("/home/emre/kmer_plots/",jpeg_start,"_",name1,"_",name2,"_",vid,"_",jid,"_",region,"_", type,".jpg", sep = ""), width=650, height=650) 
  g <- plot(together,xlim=c(0,plot_axis_max),ylim=c(0,plot_axis_max),main=paste(main_start,"aminoacids frequencies in",name1,"and",name2,vid,"&",jid,"\n",region_name,type))
  text(together, labels=labels_plot, cex= 1, pos=3)
  abline(0,1)
  dev.off()
  print("DONE")
}

######################################################################################################################################################

#this one is out of date.

get_frequency_plots_aminoacids_universal_VJ_sep <- function(data1,data2,name1,name2,mer){ #this function makes plot for all possible V and J genes.
  
  backup1 <- data1
  backup2 <- data2
  
  dummy_data1 <- subset(data1, V.gene=="TRBV2*01" & J.gene=="TRBJ2-3*01")
  dummy_data2 <- subset(data2, V.gene=="TRBV2*01" & J.gene=="TRBJ2-3*01")
  
  unique_v <- subset(data1, V.gene=="TRBV20-1*01")
  unique_j <- unique(data1$J.gene)
  
  for(one_v in unique_v){
    
    data1 <- backup1
    data2 <- backup2
    
    for(one_j in unique_j){
      
      skip_this_one <- ""
      
      data1 <- backup1
      data2 <- backup2
      
      data1 <- subset(data1, V.gene==one_v & J.gene==one_j)
      data2 <- subset(data2, V.gene==one_v & J.gene==one_j)
      
      if(nrow(data1)==0 | nrow(data2)==0){ #make the dummy alvast df with the freq values
        data1 <- dummy_data1
        data2 <- dummy_data2
        skip_this_one <- "skip"
      }
      
      data1 <- get_variable_region_CDR3_aminoacids(data1)
      data2 <- get_variable_region_CDR3_aminoacids(data2)
      
      if(mer=="monos"){
        jpeg_start <- "mono_mer"
        main_start <- "Mono-mer"
        labels_plot <- aminoacids
        x_data1 <- get_count_aminoacids_monos(data1,region,type)
        x_data2 <- get_count_aminoacids_monos(data2,region,type)}
      
      if(mer=="dis"){
        jpeg_start <- "di_mer"
        main_start <- "Di-mer"
        labels_plot <- di_aminoacids
        x_data1 <- get_count_aminoacids_dis(data1,region,type)
        x_data2 <- get_count_aminoacids_dis(data2,region,type)} 
      
      if(mer=="tris"){
        jpeg_start <- "tri_mer"
        main_start <- "Tri-mer"
        labels_plot <- tri_aminoacids
        x_data1 <- get_count_aminoacids_tris(data1,region,type)
        x_data2 <- get_count_aminoacids_tris(data2,region,type)}
      
      if(mer=="quatros"){
        jpeg_start <- "quatro_mer"
        main_start <- "Quatro-mer"
        labels_plot <- quatro_aminoacids
        x_data1 <- get_count_aminoacids_quatros(data1,region,type)
        x_data2 <- get_count_aminoacids_quatros(data2,region,type)}
      
      x_data1 <- as.data.frame(x_data1)
      x_data2 <- as.data.frame(x_data2)
      
      together <- x_data1
      together <- as.data.frame(together)
      together$data2 <- x_data2$x_data2
      
      colnames(together)[colnames(together)=="x_data1"] <- name1
      colnames(together)[colnames(together)=="data2"] <- name2
      
      together$mean <- apply(together,1,mean,na.rm=TRUE)
      
      cc <- cor(together[,1],together[,2]) # correlation coefficient 
      coefficient_of_determination <- cc*cc
      #a <- (ya-yb)/(xa-xb)
      a <- cc
      a <- as.numeric(a)
      b <- 0
      x <- ""
      x <- as.numeric(x)
      y <- (a*x) + b 
      sd2 <- sd(together[,1])*2
      
      plot_axis_max <- max(together, na.rm=TRUE)
      print(plot_axis_max)
      
      #print("Creating plot.")
      
      data1_ab <- sum(data1$Number.of.reads)
      data2_ab <- sum(data2$Number.of.reads)
      data1_div <- length(unique(data1$Junction.nucleotide.sequence))   #ask aridaman if right!
      data2_div <- length(unique(data2$Junction.nucleotide.sequence))
      
      if(skip_this_one!="skip"){ #set minimum parameters here
        if(data1_div > 1){
          if(data2_div > 1){
            jpeg(file = paste("/home/emre/kmer_plots/",jpeg_start,"_",name1,"_",name2,"_",one_v,"_",one_j,".jpg", sep = ""), width=600, height=600) 
            g <- plot(together[,1],together[,2],xlim=c(0,plot_axis_max),ylim=c(0,plot_axis_max),main=paste(main_start,"aminoacids frequencies in",name1,"and",name2,one_v,"&",one_j,        "\n",name1,"ab:",data1_ab,"div:",data1_div,"\n",name2,"ab:",data2_ab,"div:",data2_div))      #,     #sub=paste("\n",name1,"ab:",data1_ab,"div:",data1_div,"\n",name2,"ab:",data2_ab,"div:",data2_div))
            abline(0,1)
            #print(g)
            dev.off() 
          }
        } 
      } 
      #print("DONE")        
    }
  }  
}

######################################################################################################################################################

get_plots_ratio_enrichment_coverage <- function(data1,data2,name1,name2){
  
  correction <- readline(prompt=("Do you want a coverage correction?: "))
  
  data1_ab <- get_vj_usage(data1,type="abundance")
  data1_div <- get_vj_usage(data1,type="diversity")
  
  data2_ab <- get_vj_usage(data2,type="abundance")
  data2_div <- get_vj_usage(data2,type="diversity")
  
  coverage1 <- data1_ab / data1_div
  coverage2 <- data2_ab / data2_div
  
  coverage1[coverage1 <= 0] <- NA
  coverage2[coverage2 <= 0] <- NA
  
  #if(correction=="yes"){
  #  coverage1[coverage1 <= 100 ] <- NA
  #  coverage2[coverage2 <= 100 ] <- NA  
  #}
  
  enrichment1 <- coverage1 / coverage2
  enrichment2 <- coverage2 / coverage1
  
  enrichment1[enrichment1 <= 0] <- NA
  enrichment2[enrichment2 <= 0] <- NA
  
  jpeg(file = paste("/home/emre/kmer_plots/","coverage_",name1,".jpg", sep = ""), width=1000, height=1000) 
  g <- heatmap.2(log10(coverage1),scale="none",density.info="none", col=bluered, lhei = c(2, 17), margin=c(6,6), main= paste("Coverage of",name1))
  dev.off() 
  
  jpeg(file = paste("/home/emre/kmer_plots/","coverage_",name2,".jpg", sep = ""), width=1000, height=1000) 
  g <- heatmap.2(log10(coverage2),scale="none",density.info="none", col=bluered, lhei = c(2, 17), margin=c(6,6), main= paste("Coverage of",name2))
  dev.off() 
  
  jpeg(file = paste("/home/emre/kmer_plots/","enrichment_",name1,".jpg", sep = ""), width=1000, height=1000) 
  g <- heatmap.2(log10(enrichment1),scale="none",density.info="none", col=bluered, lhei = c(2, 17), margin=c(6,6), main= paste("Enrichment of",name1))
  dev.off() 
  
  jpeg(file = paste("/home/emre/kmer_plots/","enrichment_",name2,".jpg", sep = ""), width=1000, height=1000) 
  g <- heatmap.2(log10(enrichment2),scale="none",density.info="none", col=bluered, lhei = c(2, 17), margin=c(6,6), main= paste("Enrichment of",name2))
  dev.off() 
  
  print("DONE")
}

######################################################################################################################################################

get_plots <- function(mer,region,type){ #this function uses the plot function to create for all top 10 enrichment families of PEMC and PBMC.
  
  #those ten below are from PEMC based on top ten of coverage
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV20-1*01","TRBJ1-5*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV25-1*01","TRBJ2-4*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV25-1*01","TRBJ1-3*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV20-1*01","TRBJ1-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV25-1*01","TRBJ2-3*01",mer,region,type)  
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV27*01","TRBJ1-5*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV27*01","TRBJ2-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-6*01","TRBJ2-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-1*01","TRBJ1-3*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV27*01","TRBJ1-1*01",mer,region,type)
  
  #those ten below are from PBMC based on top ten of coverage
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV7-8*01","TRBJ2-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV10-1*01","TRBJ1-6*01",mer,region,type)
  #get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV27*01","TRBJ1-1*01",mer,region,type) #overlap
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-8*01","TRBJ1-1*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-6*01","TRBJ1-1*01",mer,region,type)
  #get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV25-1*01","TRBJ2-3*01",mer,region,type) #overlap
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV10-1*01","TRBJ1-1*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-9*01","TRBJ1-5*01",mer,region,type)
  #get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV27*01","TRBJ1-5*01",mer,region,type) #overlap
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-5*01","TRBJ1-1*01",mer,region,type)
  
  #those 5 below are from PEMC on new families based on enrichment
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV18*01","TRBJ1-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV25-1*01","TRBJ2-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV16*01","TRBJ1-5*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV10-2*01","TRBJ1-5*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV3-1*01","TRBJ1-3*01",mer,region,type)
  
  #those 5 below are from PBMC on new families based on enrichment
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-6*01","TRBJ1-5*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV16*01","TRBJ2-3*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-6*01","TRBJ1-6*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-5*01","TRBJ1-3*01",mer,region,type)
  get_frequency_plots_aminoacids_fam(pbmc_filter,pemc_filter,"PBMC","PEMC","TRBV6-8*01","TRBJ2-1*01",mer,region,type)
  
}

######################################################################################################################################################

get_numbers_enrichment <- function(data1,data2,vid,jid){ #prints the value's of coverage, abundance and diversity of a given family
  
  fam1 <- subset(data1, V.gene==vid & J.gene==jid)
  ab1 <- sum(fam1$Number.of.reads)
  div1 <- length(unique(fam1$Amino.acid.sequence))
  ratio1 <- ab1/div1
  
  fam2 <- subset(data2, V.gene==vid & J.gene==jid)
  ab2 <- sum(fam2$Number.of.reads)
  div2 <- length(unique(fam2$Amino.acid.sequence))
  ratio2 <- ab2/div2
  
  cat(vid,jid,"\t\t\t\t","coverage:",ratio1,"\t\tab:",ab1,"\t\tdiv:",div1,"\t\t\t\t\tPEMC","\n",vid,jid,"\t\t\t\t","coverage:",ratio2,"\t\tab:",ab2,"\t\tdiv:",div2,"\t\t\t\t\tPBMC")
  
}

######################################################################################################################################################

get_numbers_distribution <- function(data,length){ #prints the sum of number of reads of given length of the indel region (use it for a specific family), I used this to plot the distribution plot 
  
  backup <- data
  
  data <- subset(data, Length.variable.amino.acid.region==length)
  abundance <- sum(data$Number.of.reads)
  
  cat("Length distribution:",length,"\tAbundance:",abundance)
}

######################################################################################################################################################

get_enrichment_output <- function(data1,data2,name1,name2){    #returns a nice matrix with abundace, diversity, coverage and enrichment of each V and J combination.
  
  file_name <- readline(prompt="Enter file name: ")
  
  backup1 <- data1
  backup2 <- data2
  backup_name1 <- name1
  backup_name2 <- name2
  
  unique_v <- length(unique(data1$V.gene))
  unique_j <- length(unique(data1$J.gene))
  
  possible_combinations <- unique_v * unique_j
  possible_combinations <- as.integer(possible_combinations)
  
  df <- data.frame(matrix(0, ncol = 1, nrow = possible_combinations))
  
  colnames(df)[colnames(df)=="matrix.0..ncol...1..nrow...possible_combinations."] <- "Family"   
  
  df$Family <- rep(1,possible_combinations)  #laat lopen tot 624
  
  df$V.gene <- ""
  colnames(df)[colnames(df)=="V.gene"] <- paste("V.gene",".",name1,sep="")
  df$J.gene <- ""
  colnames(df)[colnames(df)=="J.gene"] <- paste("J.gene",".",name1,sep="")
  df$Enrichment <- 0
  colnames(df)[colnames(df)=="Enrichment"] <- paste("Enrichment",".",name1,sep="")
  df$Coverage <- 0
  colnames(df)[colnames(df)=="Coverage"] <- paste("Coverage",".",name1,sep="")
  df$Abundance <- 0
  colnames(df)[colnames(df)=="Abundance"] <- paste("Abundance",".",name1,sep="")
  df$Diversity <- 0
  colnames(df)[colnames(df)=="Diversity"] <- paste("Diversity",".",name1,sep="")
  
  df$V.gene2 <- ""
  colnames(df)[colnames(df)=="V.gene2"] <- paste("V.gene",".",name2,sep="")
  df$J.gene2 <- ""
  colnames(df)[colnames(df)=="J.gene2"] <- paste("J.gene",".",name2,sep="")
  df$Enrichment2 <- 0
  colnames(df)[colnames(df)=="Enrichment2"] <- paste("Enrichment",".",name2,sep="")
  df$Coverage2 <- 0
  colnames(df)[colnames(df)=="Coverage2"] <- paste("Coverage",".",name2,sep="")
  df$Abundance2 <- 0
  colnames(df)[colnames(df)=="Abundance2"] <- paste("Abundance",".",name2,sep="")
  df$Diversity2 <- 0
  colnames(df)[colnames(df)=="Diversity2"] <- paste("Diversity",".",name2,sep="")
  
  unique_v <- unique(data1$V.gene)
  unique_j <- unique(data1$J.gene)
  
  count <- 0
  
  for(one_v in unique_v){
    
    data1 <- backup1
    data2 <- backup2
    
    for(one_j in unique_j){
      
      data1 <- backup1
      data2 <- backup2
      
      count <- count + 1
      print(count)
      
      data1 <- subset(data1, V.gene==one_v & J.gene==one_j)
      data2 <- subset(data2, V.gene==one_v & J.gene==one_j)
      
      abundance_data1 <- sum(data1$Number.of.reads)
      diversity_data1 <- length(unique(data1$Junction.nucleotide.sequence))
      coverage_data1 <- abundance_data1 / diversity_data1
      
      abundance_data2 <- sum(data2$Number.of.reads)
      diversity_data2 <- length(unique(data2$Junction.nucleotide.sequence))
      coverage_data2 <- abundance_data2 / diversity_data2
      
      enrichment_data1 <- coverage_data1 / coverage_data2
      enrichment_data2 <- coverage_data2 / coverage_data1
      
      df[,1][count] <- count
      
      df[,2][count] <- one_v
      df[,3][count] <- one_j
      df[,6][count] <- abundance_data1
      df[,7][count] <- diversity_data1
      df[,5][count] <- coverage_data1
      df[,4][count] <- enrichment_data1
      
      df[,8][count] <- one_v
      df[,9][count] <- one_j
      df[,12][count] <- abundance_data2
      df[,13][count] <- diversity_data2
      df[,11][count] <- coverage_data2
      df[,10][count] <- enrichment_data2
      
    }
  }
  file_name <- paste(file_name,".csv",sep="")
  write.csv(df,file_name,sep="\t",col.names=T)
  cat("File",file_name,"is saved in",getwd(),"\n")
  return(df)
}

######################################################################################################################################################

get_number_overlap_aas <- function(data1,data2){
  
  backup1 <- data1
  backup2 <- data2
  
  empty <- 0
  
  position <- length(data1$Amino.acid.sequence)
  
  position2 <- 0
  
  a <- "Scanning sequence"
  b <- "of"
  
  for(i in data1$Amino.acid.sequence){
    
    position2 <- position2 + 1
    
    cat(a,position2,b,position,"\n")
    
    unique_aa <- i
    
    for(k in data2$Amino.acid.sequence){
      
      if(i==k){
        #print(i)
        empty <- empty + 1
        print(empty)
        
        write.table(sample(rep(i),replace=F),file="test",row.names=F,quote=F,col.names=F,append=T)
        
      }         
    }       
  }
  cat("File:is saved in",getwd(),"\n")
}

######################################################################################################################################################

get_count_overlap_aminoacids_sequences <- function(finger,region,type){
  
  overlap_aminoacids <- rep(0,957)
  names(overlap_aminoacids) <- overlap_amino_acid_sequences
  
  total_elements <- c(0,0,0) # keep track total amount of elements, mono, di and tri respectively. 
  
  if(region=="full"){
    aminoacids_column <- finger$Amino.acid.sequence}              
  if(region=="indel"){
    aminoacids_column <- finger$Variable.region.amino.acid.sequence} 
  
  numberofreads <- finger$Number.of.reads 
  
  if(type=="diversity"){
    if(length(aminoacids_column) > 0){  
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        begin <- 1
        end <- length_of_seq
        
        if(length_of_seq > 0){
          
          #print(length_of_seq)
          #print(seq)
          
          overlap_aminoacids[[substr(seq, begin, end)]] = overlap_aminoacids[[substr(seq, begin, end)]] + 1
          total_elements[1] <- total_elements[1]+1
          
        }
      }
    }
  }
  
  if(type=="abundance"){
    if(length(aminoacids_column) > 0){  
      
      empty <- 0
      
      for(seq in aminoacids_column){
        
        length_of_seq <- nchar(seq)
        begin <- 1
        end <- length_of_seq
        
        possible_monos <- length_of_seq #this returns the possible combinations in the seq.
        
        empty <- empty + 1
        
        abundance <- data.frame()
        abundance <- rep(0,possible_monos)
        abundance <- numberofreads[empty]
        
        if(length_of_seq > 0){  
          
          overlap_aminoacids[[substr(seq, begin, end)]] = overlap_aminoacids[[substr(seq, begin, end)]] + abundance   
          
          total_elements[1] <- total_elements[1] + abundance      
          
        }
      }
    }
  }
  
  overlap_aminoacids_count <- overlap_aminoacids / total_elements[1]
  overlap <- data.frame()
  overlap <- overlap_aminoacids_count
  print(overlap)
  return(overlap)
}

######################################################################################################################################################

get_overlap_aminoacids_df <- function(data1,data2){ #returns a data frame that is based on the unique overlap amino acid sequences in both data sets.
  
  backup1 <- data1
  backup2 <- data2
  
  df <- subset(data1, V.gene=="empty")
  
  aminoacids_column1 <- data1$Amino.acid.sequence
  aminoacids_column2 <- data2$Amino.acid.sequence
  
  count <- 0
  copy.this.row1 <- 0
  
  so.far <- 0
  
  clones1 <- length(data1$Amino.acid.sequence)
  clones2 <- length(data2$Amino.acid.sequence)
  
  if(clones1>clones2){total<-clones1}
  if(clones1<clones2){total<-clones2} 
  
  for(i in aminoacids_column1){
    
    copy.this.row1 <- copy.this.row1 + 1
    
    copy.this.row2 <- 0
    
    data1 <- backup1
    data2 <- backup2
    
    for(k in aminoacids_column2){
      
      copy.this.row2 <- copy.this.row2 + 1
      
      data1 <- backup1
      data2 <- backup2
      
      if(i==k){
        
        so.far <- so.far + 1
        
        percentage <- so.far / total * 100
        
        print(percentage)
        
        
        count <- count + 2
        
        copy1 <- data1[copy.this.row1, ]
        copy2 <- data2[copy.this.row2, ]
        
        paste.here1 <- count - 1
        paste.here2 <- count
        
        df[paste.here1,] <- copy1
        df[paste.here2,] <- copy2
      }    
    }
  }
  return(df)
}

######################################################################################################################################################

get_frequency_plots_overlapped_aminoacids <- function(data1,data2,name1,name2,mer,region,type){     #mer= monos/dis/tris/quatros       #region= full/indel       #type= abundance/diversity
  
  backup1 <- data1
  backup2 <- data2
  
  data1 <- get_variable_region_CDR3_aminoacids(data1)
  data2 <- get_variable_region_CDR3_aminoacids(data2)
  
  if(mer=="monos"){
    jpeg_start <- "overlap"
    main_start <- "Overlap"
    #labels_plot <- overlap_amino_acid_sequences
    x_data1 <- get_count_overlap_aminoacids_sequences(data1,region,type)
    x_data2 <- get_count_overlap_aminoacids_sequences(data2,region,type)}
  
  x_data1 <- as.data.frame(x_data1)
  x_data2 <- as.data.frame(x_data2)
  
  together <- x_data1
  together <- as.data.frame(together)
  together$data2 <- x_data2$x_data2
  
  colnames(together)[colnames(together)=="x_data1"] <- name1
  colnames(together)[colnames(together)=="data2"] <- name2
  
  plot_axis_max <- max(together, na.rm=TRUE)
  
  if(region=="full"){region_name<-"CDR3"}
  if(region=="indel"){region_name<-"N-Dβ-N"}
  
  print(together)
  
  jpeg(file = paste("/home/emre/kmer_plots/",jpeg_start,"_",name1,"_",name2,"_", region,"_", type, ".jpg", sep = ""), width=600, height=600) 
  g <- plot(together,xlim=c(0,plot_axis_max),ylim=c(0,plot_axis_max),main=paste("Relative frequencies of the overlapped CDR3's in", name1,"and",name2)) #main_start,"aminoacids frequencies in",name1,"and",name2,"\n",region_name,type
  #text(together, labels=labels_plot, cex= 1, pos=3)
  abline(0,1)
  dev.off()
  print("DONE")
}

######################################################################################################################################################

get_fasta_file <- function(data1,name1,type,region,length,maxsize){     #type = fasta / fastaq
  
  #unique_question <- readline(prompt="Unique sequences?: ")
  unique_question <- "no"
  # define the quality column of full and indel aminoacids.
  # amino acids work only on FASTA and not FASTA Q for now.
  
  # define unique parameter for MEME.
  
  backup1 <- data1
  
  if(region=="full_aa"){
    column <- data1$Amino.acid.sequence
    #quality <- data1$xxxxx
  } 
  
  if(region=="indel_aa"){
    column <- data1$Variable.region.amino.acid.sequence
    #quality <- data1$xxxx
  }
  
  if(region=="full_nt"){
    column <- data1$Junction.nucleotide.sequence
    #quality <- data1$Quality
  }
  
  if(region=="indel_nt"){
    column <- data1$Variable.region.nucleotide.sequence
    quality <- data1$Variable.region.nucleotide.sequence.quality}
  
  if(unique_question=="yes"){
    column <- unique(column)
  }
  
  sequence_no <- 0
  
  new_line <- "\n"
  
  length_of_column <- length(column)
  
  if(type=="fasta"){
    
    for(i in column){
      
      sequence_no <- sequence_no + 1
      
      length_of_seq <- nchar(i)
      
      if(length_of_seq >= length){    # MEME allows only sequence with minimal n = 8
        
        seq <- i
        
        cat("Writing sequence",sequence_no,"of",length_of_column,"\n")
        
        write_this <- paste(">NO_",sequence_no,"|length=",length_of_seq,"|",new_line,seq,sep="")
        
        write.table(sample(rep(write_this),replace=T),file=name1,row.names=F,quote=F,col.names=F,append=T)      
        
        if(sequence_no==maxsize){
          cat("Fasta file is saved in:",getwd(),"\n")
          return()
        }
      }
    }
    cat("Fasta file is saved in:",getwd())
  }
  
  if(type=="fastaq"){
    
    for(i in column){
      
      sequence_no <- sequence_no + 1
      
      seq <- column[sequence_no]
      
      #quality_of_seq <- quality[sequence_no]
      
      length_of_seq <- nchar(seq)
      
      quality_of_seq <- c(rep("|",length_of_seq))
      
      if(length_of_seq >= length){      # MEME allows only sequence with minimal n = 8
        
        #seq <- i
        
        cat("Writing sequence",sequence_no,"of",length_of_column,"\n")
        
        write_this <- paste("@seq_id",sequence_no,"|length=",length_of_seq,"|",new_line,seq,new_line,"+",new_line,quality_of_seq,sep="")
        
        write.table(sample(rep(write_this),replace=T),file=name1,row.names=F,quote=F,col.names=F,append=T)  
        
        if(sequence_no==maxsize){
          cat("Fastaq file is saved in:",getwd())
          return()
        } 
      }
    }
    cat("Fastaq file is saved in:",getwd(),"\n")
  }
}

######################################################################################################################################################

get_quality_score <- function(data,region){
  
  if(region=="full_aa"){
    
  } 
  
  if(region=="indel_aa"){
    
  }
  
  if(region=="full_nt"){
    #do nothing
  }
  
  if(region=="indel_nt"){
    start <- data$V.gene.end.position + 1
    end <- data$J.gene.start.position - 1 
    
    data$Variable.region.nucleotide.sequence.quality <- substr(data$Quality, start, end)}
  
  return(data)}

######################################################################################################################################################

get_random_subset <- function(data,amount){
  
  backup <- data
  
  df <- subset(data, V.gene=="empty")
  
  length_of_data <- length(data[,1])
  
  number_rows <- sample(1:length_of_data,amount,replace=T)
  cat("The following random number rows are selected: ",number_rows,"\n")
  
  count <- 0
  
  for(i in number_rows){
    
    copy_this_row <- data[i, ]
    
    count <- count + 1
    paste.here.row <- count
    
    df[paste.here.row,] <- copy_this_row  
  }  
  return(df)  
}

######################################################################################################################################################

get_freq_overlap_random_plots <- function(mer,region,type){
  
  get_frequency_plots_aminoacids_universal(random_pbmc_1,overlap_cdr3,"1000 random CDR3s of PBMC (1)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_2,overlap_cdr3,"1000 random CDR3s of PBMC (2)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_3,overlap_cdr3,"1000 random CDR3s of PBMC (3)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_4,overlap_cdr3,"1000 random CDR3s of PBMC (4)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_5,overlap_cdr3,"1000 random CDR3s of PBMC (5)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_6,overlap_cdr3,"1000 random CDR3s of PBMC (6)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_7,overlap_cdr3,"1000 random CDR3s of PBMC (7)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_8,overlap_cdr3,"1000 random CDR3s of PBMC (8)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_9,overlap_cdr3,"1000 random CDR3s of PBMC (9)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_10,overlap_cdr3,"1000 random CDR3s of PBMC (10)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_11,overlap_cdr3,"1000 random CDR3s of PBMC (11)","957 shared CDR3s",mer,region,type)
  get_frequency_plots_aminoacids_universal(random_pbmc_12,overlap_cdr3,"1000 random CDR3s of PBMC (12)","957 shared CDR3s",mer,region,type)
  
}

######################################################################################################################################################

get_find_seq <- function(data,pattern,region){
  
  backup <- data
  
  if(region=="full_aa"){data <- data[grep(pattern,data$Amino.acid.sequence),]}
  
  if(region=="indel_aa"){data <- data[grep(pattern,data$Variable.region.amino.acid.sequence  ),]}
  
  if(region=="full_nt"){data <- data[grep(pattern,data$Junction.nucleotide.sequence  ),]}
  
  if(region=="indel_nt"){data <- data[grep(pattern,data$Variable.region.nucleotide.sequence),]}
  
  if(region=="group_aa"){data <- data[grep(pattern,data$CDR3_cluster_aa),]}
  
  return(data)
  
}

######################################################################################################################################################

get_check_overexpress <- function(data,data2,pattern,region){ #return occurence (%) of a k-mer
  
  backup <- data
  
  if(region=="full_aa"){data <- data[grep(pattern,data$Amino.acid.sequence),]}
  
  if(region=="indel_aa"){data <- data[grep(pattern,data$Variable.region.amino.acid.sequence  ),]}
  
  if(region=="full_nt"){data <- data[grep(pattern,data$Junction.nucleotide.sequence  ),]}
  
  if(region=="indel_nt"){data <- data[grep(pattern,data$Variable.region.nucleotide.sequence),]}
  
  overexpressed_number_of_reads <- sum(data$Number.of.reads)
  
  all_number_of_reads <- sum(data2$Number.of.reads)
  
  frequency_of_mer <- overexpressed_number_of_reads / all_number_of_reads * 100
  
  print(frequency_of_mer)
  
  return()
  
}  

######################################################################################################################################################

get_check_motif <- function(data,data2,pattern,region,type){ #returns occurence (%) of the motif
  
  backup <- data
  
  if(region=="full_aa"){data <- data[grep(pattern,data$Amino.acid.sequence),]}
  
  if(region=="indel_aa"){data <- data[grep(pattern,data$Variable.region.amino.acid.sequence  ),]}
  
  if(region=="full_nt"){data <- data[grep(pattern,data$Junction.nucleotide.sequence  ),]}
  
  if(region=="indel_nt"){data <- data[grep(pattern,data$Variable.region.nucleotide.sequence),]}
  
  if(type=="diversity"){  
    motif_number_of_reads <- length(unique(data$Junction.nucleotide.sequence))
    all_number_of_reads <- length(unique(data2$Junction.nucleotide.sequence))}
  
  if(type=="abundance"){  
    motif_number_of_reads <- sum(data$Number.of.reads)
    all_number_of_reads <- sum(data2$Number.of.reads)}
  
  frequency_of_motif <- motif_number_of_reads / all_number_of_reads * 100
  
  return(frequency_of_motif)
  
}  

######################################################################################################################################################

get_motif_statistics <- function(x){
  
  message <- paste("INPUT MOTIF SEQUENCE:",x)
  print(message)
  
  #print("### FULL REGION - ABUNDANCE  ###")
  #print("TOP 100 CLONES:")
  j=get_check_motif(data=top100clones,data2=top100clones,pattern=x,region="full_nt",type="abundance")
  
  #print("PEMC:")
  k=get_check_motif(data=pemc_filter,data2=pemc_filter,pattern=x,region="full_nt",type="abundance")
  
  #print("PBMC:")
  l=get_check_motif(data=pbmc_filter,data2=pbmc_filter,pattern=x,region="full_nt",type="abundance")
  
  #print("ABUNDANCE DIFFERENCE TOP100 AND PBMC:")
  D1 <- j-l
  
  #print("### FULL REGION - DIVERSITY  ###")
  #print("TOP 100 CLONES:")
  g=get_check_motif(data=top100clones,data2=top100clones,pattern=x,region="full_nt",type="diversity")
  
  #print("PEMC:")
  h=get_check_motif(data=pemc_filter,data2=pemc_filter,pattern=x,region="full_nt",type="diversity")
  
  #print("PBMC:")
  i=get_check_motif(data=pbmc_filter,data2=pbmc_filter,pattern=x,region="full_nt",type="diversity")
  
  #print("DIVERSITY DIFFERENCE TOP100 AND PEMC:")
  D2 <- g-h
  
  #print("DIVERSITY DIFFERENCE TOP100 AND PBMC:")
  D3 <- g-i
  
  df <- data.frame(matrix(nrow=1,ncol=8))
  colnames(df)[colnames(df)=="X1"] <- "A) Top 100 PEMC"
  colnames(df)[colnames(df)=="X2"] <- "A) Full PEMC"
  colnames(df)[colnames(df)=="X3"] <- "A) Full PBMC"
  colnames(df)[colnames(df)=="X4"] <- "D) Top 100 PEMC"
  colnames(df)[colnames(df)=="X5"] <- "D) Full PEMC"
  colnames(df)[colnames(df)=="X6"] <- "D) Full PBMC"
  colnames(df)[colnames(df)=="X7"] <- "Diff D) Top and PEMC"
  colnames(df)[colnames(df)=="X8"] <- "Diff D) Top and PBMC"
  
  df[,1] <- j
  df[,2] <- k
  df[,3] <- l
  df[,4] <- g
  df[,5] <- h
  df[,6] <- i
  df[,7] <- D2
  df[,8] <- D3
  
  View(df)
  print(df)
  return(df)
}

######################################################################################################################################################

get_motif_score_for_random <- function(data1,data2,pattern,region,type,amount){
  
  score_df <- data.frame(matrix(ncol = amount, nrow = 1))
  
  backup1 <- data1
  
  count <- 0
  
  for(i in 1:amount){
    
    count = count + 1
    print(count)
    
    data1 <- get_random_subset(data1,amount)
    
    data2 <- data1
    
    score <- get_check_motif(data1,data2,pattern,region,type)
    
    score_df[,count] <- score
    
    #View(score_df)
  }
  
  score_df <- as.data.frame(score_df)
  
  score_df$total <- rowSums(score_df)
  
  aantal_columns <- ncol(score_df) - 1
  
  score_df$mean <- score_df$total / aantal_columns
  
  #print(score_df$mean)
  
  return(score_df$mean)
}




####################################################################################################################################################################################################

get_motif_location <- function(data1,motif){
  
  count <- 0
  
  backup1 <- data1
  
  cat("INPUT MOTIF SEQUENCE: ",motif,"\n\n")
  
  timesn <- get_check_motif(data1,data1,motif,"full_nt",type="diversity")
  
  overview <- data.frame(matrix(ncol = 2, nrow = timesn))
  
  
  for(i in data1$Junction.nucleotide.sequence){
    
    count = count + 1
    print(count)
    
    location <- str_locate_all(i,motif)
    location <- as.data.frame(location)
    
    overview[count,] <- location[1,]
    
  }
  
  overview <- na.omit(overview)
  
  overview <- as.data.frame(overview)
  
  start <- mean(x=overview[,1])
  
  end <- mean(x=overview[,2])
  
  colnames(overview)[colnames(overview)=="X1"] <- "start"
  colnames(overview)[colnames(overview)=="X2"] <- "end"
  
  unique_start <- length(unique(overview$start))
  unique_end <- length(unique(overview$end))
  
  if(unique_start==1){start_msg<-"Same starts"}
  if(unique_start>1){start_msg<-"Different starts"}
  if(unique_end==1){end_msg<-"Same ends"}
  if(unique_end>1){end_msg<-"Different ends"}
  
  cat("START MOTIF SEQUENCE: ",start,"\t",start_msg,"\n\n")
  cat("END MOTIF SEQUENCE: ",end,"\t",end_msg,"\n")
  
  
  View(overview)
}

####################################################################################################################################################################################################

get_load_sequence_of_weblogo <- function(file,threshold){        #file = .txt document of nucleotide probability   #threshold = number of P
  
  data1 <- read.table(file,na.string=F)
  
  colnames(data1)[colnames(data1)=="V1"] <- "A"
  colnames(data1)[colnames(data1)=="V2"] <- "C"
  colnames(data1)[colnames(data1)=="V3"] <- "G"
  colnames(data1)[colnames(data1)=="V4"] <- "T"
  
  length_of_motif <- length(data1[,1])
  
  df <- data.frame(matrix(nrow=length_of_motif,ncol=4))
  
  count_a <- 0
  count_c <- 0
  count_g <- 0
  count_t <- 0
  
  for(i in data1$A){
    count_a = count_a + 1
    if(i > threshold){
      df[count_a,1] <- "A" }}
  
  for(i in data1$C){
    count_c = count_c + 1
    if(i > threshold){      
      df[count_c,2] <- "C"}  }
  
  for(i in data1$G){    
    count_g = count_g + 1    
    if(i > threshold){      
      df[count_g,3] <- "G"}}
  
  for(i in data1$T){    
    count_t = count_t + 1    
    if(i > threshold){      
      df[count_t,4] <- "T"}} 
  
  df[is.na(df)] <- ""
  
  df$nt <- 0
  
  for(i in 1:length_of_motif){
    vec <- c(df[i,1], df[i,2], df[i,3], df[i,4])
    df[i,5] <- paste(vec, collapse = "")}
  
  sequence <- ""
  for(i in df$nt){
    if(nchar(i)==1){
      nt <- i}
    if(nchar(i)>1){
      old <- i  
      begin <- 1
      end <- nchar(i)
      i <- paste(substr(old, 1, begin-1), "[", substr(old, begin, nchar(old)), sep = "")
      k <- paste(substr(i, 1, end+2), "]",  sep = "")
      nt <- k}
    
    sequence <- paste(sequence,nt,sep="")
    
  }
  
  cat("\nINPUT FILE: ",file,"\n")
  cat("THRESHOLD SET: ",threshold,"\n")
  cat("MOTIF SEQUENCE: ",sequence,"\n\n")
  
  return(sequence)}

####################################################################################################################################################################################################

get_plots_usage_motif <- function(data1,data2,data3,name1,name2,name3,type,motif,motif_no){
  
  backup1 <- data1
  backup2 <- data2
  backup3 <- data3
  
  data1 <- data1[grep(motif,data1$Junction.nucleotide.sequence),]
  data2 <- data2[grep(motif,data2$Junction.nucleotide.sequence),]
  data3 <- data3[grep(motif,data3$Junction.nucleotide.sequence),]
  
  data1_sumreads <- sum(data1$Number.of.reads)
  data2_sumreads <- sum(data2$Number.of.reads)
  data3_sumreads <- sum(data3$Number.of.reads)
  
  data1_distincts <- length(unique(data1$Junction.nucleotide.sequence))
  data2_distincts <- length(unique(data2$Junction.nucleotide.sequence))
  data3_distincts <- length(unique(data3$Junction.nucleotide.sequence))
  
  if(!is.character(data1$V.gene)){data1$V.gene <- as.character(data1$V.gene)}
  if(!is.character(data1$J.gene)){data1$J.gene <- as.character(data1$J.gene)}
  
  if(!is.character(data2$V.gene)){data2$V.gene <- as.character(data2$V.gene)}
  if(!is.character(data2$J.gene)){data2$J.gene <- as.character(data2$J.gene)}
  
  if(!is.character(data3$V.gene)){data3$V.gene <- as.character(data3$V.gene)}
  if(!is.character(data3$J.gene)){data3$J.gene <- as.character(data3$J.gene)}
  
  if(!is.character(pemc_filter$V.gene)){data1$V.gene <- as.character(pemc_filter$V.gene)}
  if(!is.character(pemc_filter$J.gene)){data1$J.gene <- as.character(pemc_filter$J.gene)}
  
  if(!is.character(pemc_filter$V.gene)){data2$V.gene <- as.character(pemc_filter$V.gene)}
  if(!is.character(pemc_filter$J.gene)){data2$J.gene <- as.character(pemc_filter$J.gene)}
  
  if(!is.character(pemc_filter$V.gene)){data3$V.gene <- as.character(pemc_filter$V.gene)}
  if(!is.character(pemc_filter$J.gene)){data3$J.gene <- as.character(pemc_filter$J.gene)}
  
  uv <- sort(unique(pemc_filter$V.gene))
  uj <- sort(unique(pemc_filter$J.gene))
  
  m1 <- matrix(0,nrow=length(uv),ncol=length(uj))
  dimnames(m1) <- list(uv,uj)
  
  m2 <- matrix(0,nrow=length(uv),ncol=length(uj))
  dimnames(m2) <- list(uv,uj)
  
  m3 <- matrix(0,nrow=length(uv),ncol=length(uj))
  dimnames(m3) <- list(uv,uj)
  
  if(type=="abundance"){data1.vj_usage <- with(data1,tapply(Number.of.reads,paste(V.gene,J.gene),sum))}
  if(type=="diversity"){data1.vj_usage <- with(data1,tapply(Amino.acid.sequence,paste(V.gene,J.gene),function(y)length(unique(y))))}
  map <- setNames(strsplit(names(data1.vj_usage)," "),names(data1.vj_usage))
  sapply(names(data1.vj_usage),function(s){
    vid <- map[[s]][1]
    jid <- map[[s]][2]
    m1[vid,jid] <<- data1.vj_usage[s]})
  
  if(type=="abundance"){data2.vj_usage <- with(data2,tapply(Number.of.reads,paste(V.gene,J.gene),sum))}
  if(type=="diversity"){data2.vj_usage <- with(data2,tapply(Amino.acid.sequence,paste(V.gene,J.gene),function(y)length(unique(y))))}
  map <- setNames(strsplit(names(data2.vj_usage)," "),names(data2.vj_usage))
  sapply(names(data2.vj_usage),function(s){
    vid <- map[[s]][1]
    jid <- map[[s]][2]
    m2[vid,jid] <<- data2.vj_usage[s]})
  
  if(type=="abundance"){data3.vj_usage <- with(data3,tapply(Number.of.reads,paste(V.gene,J.gene),sum))}
  if(type=="diversity"){data3.vj_usage <- with(data3,tapply(Amino.acid.sequence,paste(V.gene,J.gene),function(y)length(unique(y))))}
  map <- setNames(strsplit(names(data3.vj_usage)," "),names(data3.vj_usage))
  sapply(names(data3.vj_usage),function(s){
    vid <- map[[s]][1]
    jid <- map[[s]][2]
    m3[vid,jid] <<- data3.vj_usage[s]})
  
  data1 <- m1
  data2 <- m2
  data3 <- m3
  
  ########## ABUNDANCE V GENE ###########
  
  if(type=="abundance"){
    
    df <- rowSums(data1) 
    df <- as.data.frame(df)
    df$data2 <- rowSums(data2)
    df$data3 <- rowSums(data3)
    
    df$data1_sumreads <- data1_sumreads
    df$data2_sumreads <- data2_sumreads
    df$data3_sumreads <- data3_sumreads
    
    df[, "rf_data1"] <- df[,1] / df[, "data1_sumreads"] * 100 
    df[, "rf_data2"] <- df[,2] / df[, "data2_sumreads"] * 100
    df[, "rf_data3"] <- df[,3] / df[, "data3_sumreads"] * 100
    
    df_barplot <- subset(df, select=c(rf_data1, rf_data2, rf_data3)) 
    
    colnames(df_barplot)[colnames(df_barplot)=="rf_data1"] <- name1 
    colnames(df_barplot)[colnames(df_barplot)=="rf_data2"] <- name2  
    colnames(df_barplot)[colnames(df_barplot)=="rf_data3"] <- name3
    
    df_barplot <- t(df_barplot) 
    
    plot_axis_max <- max(df_barplot, na.rm=TRUE)
    
    gene <- "vgene"
    
    jpeg(file = paste("/home/emre/tmp/usage_plots/","motif_",motif_no,"_",gene,"_",type,"_",name1,"_",name2,"_",name3,".jpg", sep = ""), width=1000, height=550)
    a <- barplot(df_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("green","darkblue","red"),
                 main=paste("Abundance TRBV segments usage ratio in",name1,",",name2,"and",name3,"\n","MOTIF",motif_no,motif),
                 ylab="Relative frequency (%)",
                 legend=rownames(df_barplot),ylim=c(0,plot_axis_max))
    dev.off()
    
    ########## ABUNDANCE J GENE ###########
    
    df2 <- colSums(data1)  
    df2 <- as.data.frame(df2)
    df2$data2 <- colSums(data2) 
    df2$data3 <- colSums(data3) 
    
    df2$data1_sumreads <- data1_sumreads 
    df2$data2_sumreads <- data2_sumreads
    df2$data3_sumreads <- data3_sumreads
    
    df2[, "rf_data1"] <- df2[,1] / df2[, "data1_sumreads"] * 100  
    df2[, "rf_data2"] <- df2[,2] / df2[, "data2_sumreads"] * 100
    df2[, "rf_data3"] <- df2[,3] / df2[, "data3_sumreads"] * 100
    
    df2_barplot <- subset(df2, select=c(rf_data1, rf_data2, rf_data3))
    
    colnames(df2_barplot)[colnames(df2_barplot)=="rf_data1"] <- name1 
    colnames(df2_barplot)[colnames(df2_barplot)=="rf_data2"] <- name2  
    colnames(df2_barplot)[colnames(df2_barplot)=="rf_data3"] <- name3 
    
    df2_barplot <- t(df2_barplot) 
    
    plot_axis_max <- max(df2_barplot, na.rm=TRUE)
    
    gene <- "jgene"
    
    jpeg(file = paste("/home/emre/tmp/usage_plots/","motif_",motif_no,"_",gene,"_",type,"_",name1,"_",name2,"_",name3,".jpg", sep = ""), width=1000, height=550)
    b <- barplot(df2_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("green","darkblue","red"),
                 main=paste("Abundance TRBJ segments usage ratio in",name1,",",name2,"and",name3,"\n","MOTIF",motif_no,motif),
                 ylab="Relative frequency (%)",
                 legend=rownames(df2_barplot),ylim=c(0,plot_axis_max))    
    dev.off()
  }
  
  ########## DIVERSITY V GENE ###########
  
  if(type=="diversity"){    
    
    df3 <- rowSums(data1) 
    df3 <- as.data.frame(df3)
    df3$data2 <- rowSums(data2) 
    df3$data3 <- rowSums(data3) 
    
    df3$data1_distincts <- data1_distincts
    df3$data2_distincts <- data2_distincts
    df3$data3_distincts <- data3_distincts
    
    df3[, "rf_data1"] <- df3[,1] / df3[, "data1_distincts"] * 100 
    df3[, "rf_data2"] <- df3[,2] / df3[, "data2_distincts"] * 100
    df3[, "rf_data3"] <- df3[,3] / df3[, "data3_distincts"] * 100
    
    df3_barplot <- subset(df3, select=c(rf_data1, rf_data2, rf_data3))
    
    colnames(df3_barplot)[colnames(df3_barplot)=="rf_data1"] <- name1 
    colnames(df3_barplot)[colnames(df3_barplot)=="rf_data2"] <- name2  
    colnames(df3_barplot)[colnames(df3_barplot)=="rf_data3"] <- name3
    
    df3_barplot <- t(df3_barplot) 
    
    plot_axis_max <- max(df3_barplot, na.rm=TRUE)
    
    gene <- "vgene"
    
    jpeg(file = paste("/home/emre/tmp/usage_plots/","motif_",motif_no,"_",gene,"_",type,"_",name1,"_",name2,"_",name3,".jpg", sep = ""), width=1000, height=550)
    c <- barplot(df3_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("green","darkblue","red"),
                 main=paste("Diversity TRBV segments usage ratio in",name1,",",name2,"and",name3,"\n","MOTIF",motif_no,motif),
                 ylab="Relative frequency (%)",
                 legend=rownames(df3_barplot),ylim=c(0,plot_axis_max))
    dev.off()
    
    ########## DIVERSITY J GENE ###########
    
    df4 <- colSums(data1) 
    df4 <- as.data.frame(df4)
    df4$data2 <- colSums(data2) 
    df4$data3 <- colSums(data3) 
    
    df4$data1_distincts <- data1_distincts 
    df4$data2_distincts <- data2_distincts
    df4$data3_distincts <- data3_distincts
    
    df4[, "rf_data1"] <- df4[,1] / df4[, "data1_distincts"] * 100 
    df4[, "rf_data2"] <- df4[,2] / df4[, "data2_distincts"] * 100
    df4[, "rf_data3"] <- df4[,3] / df4[, "data3_distincts"] * 100
    
    df4_barplot <- subset(df4, select=c(rf_data1, rf_data2, rf_data3)) 
    
    colnames(df4_barplot)[colnames(df4_barplot)=="rf_data1"] <- name1 
    colnames(df4_barplot)[colnames(df4_barplot)=="rf_data2"] <- name2  
    colnames(df4_barplot)[colnames(df4_barplot)=="rf_data3"] <- name3  
    
    df4_barplot <- t(df4_barplot) 
    
    plot_axis_max <- max(df4_barplot, na.rm=TRUE)
    
    gene <- "jgene"
    
    jpeg(file = paste("/home/emre/tmp/usage_plots/","motif_",motif_no,"_",gene,"_",type,"_",name1,"_",name2,"_",name3,".jpg", sep = ""), width=1000, height=550)
    d <- barplot(df4_barplot,beside=T,las=2,cex.axis= 0.75, cex.names = 0.75, col=c("green","darkblue","red"),
                 main=paste("Diversity TRBJ segments usage ratio in",name1,",",name2,"and",name3,"\n","MOTIF",motif_no,motif),
                 ylab="Relative frequency (%)",
                 legend=rownames(df4_barplot),ylim=c(0,plot_axis_max))
    dev.off()
    
  }
}

####################################################################################################################################################################################################

get_motif_sequence_on_genes <- function(data1,motif){
  
  count <- 0
  
  backup1 <- data1
  
  cat("INPUT MOTIF SEQUENCE: ",motif,"\n\n")
  
  timesn <- get_check_motif(data1,data1,motif,"full_nt",type="diversity")
  timesn <- as.numeric(timesn)
  
  overview <- data.frame(matrix(ncol = 2, nrow = timesn))
  
  for(i in data1$Junction.nucleotide.sequence){
    count = count + 1
    #print(count)
    
    location <- str_locate_all(i,motif)
    location <- as.data.frame(location)
    
    overview[count,] <- location[1,]}
  
  ####
  count <- 0
  overview$V.gene.end.position <- ""
  
  for(end_v in data1$V.gene.end.position){
    count = count + 1
    overview[count,3] <- end_v}
  
  ####
  count <- 0
  overview$J.gene.start.position <- ""
  
  for(begin_j in data1$J.gene.start.position){
    count = count + 1
    overview[count,4] <- begin_j}
  
  ####
  count <- 0
  overview$Junction.nucleotide.sequence
  
  for(seq in data1$Junction.nucleotide.sequence){
    count = count + 1
    overview[count,5] <- seq}
  
  overview <- na.omit(overview)
  overview <- as.data.frame(overview)
  
  colnames(overview)[colnames(overview)=="X1"] <- "start_motif"
  colnames(overview)[colnames(overview)=="X2"] <- "end_motif"
  
  overview <- overview[,c(5,1,2,3,4)]
  
  ####
  count <- 0
  overview$V_nt_in_motif <- ""
  overview$indel_nt_in_motif <- ""
  overview$J_nt_in_motif <- ""
  
  
  for(nt in 1:length(overview[,1])){
    
    count = count + 1
    
    start_motif <- overview[count,"start_motif"]
    end_motif <- overview[count,"end_motif"]
    V.gene.end.position <- overview[count,"V.gene.end.position"]
    J.gene.start.position <- overview[count,"J.gene.start.position"]
    
    start_motif <- as.numeric(start_motif)
    end_motif <- as.numeric(end_motif)
    V.gene.end.position <- as.numeric(V.gene.end.position)
    J.gene.start.position <- as.numeric(J.gene.start.position)
    length_of_motif <- end_motif - start_motif + 1
    
    
    #1 motif only in V 
    if(start_motif < V.gene.end.position && end_motif <= V.gene.end.position){
      overview[count,"V_nt_in_motif"] <- length_of_motif}
    
    #2 motif in V and D
    if(start_motif < V.gene.end.position && end_motif > V.gene.end.position && end_motif <= J.gene.start.position){
      overview[count,"V_nt_in_motif"] <- V.gene.end.position - start_motif + 1                                     
      overview[count,"indel_nt_in_motif"] <- end_motif - V.gene.end.position}
    
    #3 motif only in D
    if(start_motif >= V.gene.end.position && end_motif <= J.gene.start.position){
      overview[count,"indel_nt_in_motif"] <- length_of_motif}             
    
    #4 motif in D and J
    if(start_motif >= V.gene.end.position && start_motif < J.gene.start.position && end_motif > J.gene.start.position){ 
      overview[count,"indel_nt_in_motif"] <- J.gene.start.position - start_motif + 1                        
      overview[count,"J_nt_in_motif"] <- end_motif - J.gene.start.position}
    
    #5 motif only in J
    if(start_motif >= J.gene.start.position && end_motif > J.gene.start.position){
      overview[count,"J_nt_in_motif"] <- length_of_motif}
    
    #6 motif in V, D and J
    if(start_motif < V.gene.end.position && end_motif > J.gene.start.position){
      overview[count,"V_nt_in_motif"] <- V.gene.end.position - start_motif                                  
      overview[count,"indel_nt_in_motif"] <- J.gene.start.position - V.gene.end.position                       
      overview[count,"J_nt_in_motif"] <- end_motif - J.gene.start.position + 1}
    
  }
  
  # Percent of V gene in motif
  empty_v <- 0
  sum_v_nt_in_motif <- overview$V_nt_in_motif
  for(i in sum_v_nt_in_motif){
    if(i>=1){
      i <- as.numeric(i)
      empty_v <- empty_v + i}}
  sum_v_nt_in_motif <- empty_v
  
  sum_v_nt_in_motif <- as.numeric(sum_v_nt_in_motif)
  
  mean_of_sum_v_nt_in_motif <- sum_v_nt_in_motif / length(overview[,1])
  mean_of_sum_v_nt_in_motif <- as.numeric(mean_of_sum_v_nt_in_motif)
  
  percent_of_v_nt_in_motif <- mean_of_sum_v_nt_in_motif / length_of_motif * 100
  
  # Percent of indel in motif
  empty_indel <- 0
  View(overview)
  sum_indel_nt_in_motif <- overview$indel_nt_in_motif
  for(i in sum_indel_nt_in_motif){
    if(i>=1){
      i <- as.numeric(i)
      empty_indel <- empty_indel + i}}
  sum_indel_nt_in_motif <- empty_indel
  
  sum_indel_nt_in_motif <- as.numeric(sum_indel_nt_in_motif)
  
  mean_of_sum_indel_nt_in_motif <- sum_indel_nt_in_motif / length(overview[,1])
  mean_of_sum_indel_nt_in_motif <- as.numeric(mean_of_sum_indel_nt_in_motif)
  
  percent_of_indel_nt_in_motif <- mean_of_sum_indel_nt_in_motif / length_of_motif * 100
  
  
  # Percent of J gene in motif
  empty_j <- 0
  sum_j_nt_in_motif <- overview$J_nt_in_motif
  for(i in sum_j_nt_in_motif){
    if(i>=1){
      i <- as.numeric(i)
      empty_j <- empty_j + i}}
  sum_j_nt_in_motif <- empty_j
  
  sum_j_nt_in_motif <- as.numeric(sum_j_nt_in_motif)
  
  mean_of_sum_j_nt_in_motif <- sum_j_nt_in_motif / length(overview[,1])
  mean_of_sum_j_nt_in_motif <- as.numeric(mean_of_sum_j_nt_in_motif)
  
  percent_of_j_nt_in_motif <- mean_of_sum_j_nt_in_motif / length_of_motif * 100
  
  cat("\n[1] V gene in motif: ",percent_of_v_nt_in_motif,"%\n")
  cat("[2] N-DB-N in motif: ",percent_of_indel_nt_in_motif,"%\n")
  cat("[3] J gene in motif: ",percent_of_j_nt_in_motif,"%\n\n")
  
  vdj_percentages <- c(percent_of_v_nt_in_motif,percent_of_indel_nt_in_motif,percent_of_j_nt_in_motif)
  
  print(vdj_percentages)
  
  #return(overview)  
}

####################################################################################################################################################################################################

get_best_motif_discovery_tool <- function(data1,data2,region,type,motifs,background){  #background is yes if data1 differs from data2
  
  backup1 <- data1
  backup2 <- data2
  
  count_motifs <- length(motifs)
  
  count <- 0
  
  results <- data.frame(matrix(ncol = 5, nrow = count_motifs))
  
  #results <- as.data.frame(results)
  
  colnames(results)[colnames(results)=="X1"] <- "count"
  colnames(results)[colnames(results)=="X2"] <- "motif"
  colnames(results)[colnames(results)=="X3"] <- "score_data1"
  colnames(results)[colnames(results)=="X4"] <- "score_data2"
  colnames(results)[colnames(results)=="X5"] <- "difference"
  
  count_row <- 0
  
  for(motif in motifs){
    
    score_data1 <- 0
    score_data2 <- 0 
    
    count <- count + 1
    progress <- count / count_motifs * 100
    cat("[1]",progress,"%\n")
    
    score_data1 <- get_check_motif(data1,data1,motif,region,type) #returns occurence (%) of the motif
    score_data2 <- get_check_motif(data2,data2,motif,region,type) #returns occurence (%) of the motif
    
    difference <- score_data1 - score_data2
    
    count_row <- count_row + 1
    
    results[count_row,1] <- count
    results[count_row,2] <- motif
    results[count_row,3] <- score_data1
    results[count_row,4] <- score_data2
    results[count_row,5] <- difference
    
  }  
  
  if(background=="yes"){results <- results[order(results$difference,decreasing=T),]}
  if(background!="yes"){results <- results[order(results$score_data1,decreasing=T),]}
  
  View(results)
  return(results)
}

####################################################################################################################################################################################################

get_more_motifs <- function(motif_results,nt_or_aa,limit){
  
  if(nt_or_aa=="nt"){row_amounts <- 30 * limit}
  if(nt_or_aa=="aa"){row_amounts <- 44 * limit}
  
  count <- 0
  count_row <- 0
  
  new_motifs <- data.frame(matrix(ncol = 1, nrow = row_amounts))
  
  colnames(new_motifs)[colnames(new_motifs)=="X1"] <- "motifs"
  
  for(i in motif_results$motif){
    
    i <- as.character(i)
    
    count <- count + 1
    progress <- count / limit * 100
    cat("[1]",progress,"%\n")
    
    if(nt_or_aa=="nt"){
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("A",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("C",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("T",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("G",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[AC]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[AG]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[AT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[CG]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[CT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[GT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[ACG]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[ACT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[AGT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[CGT]",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("[ACGT]",i,sep="")
      
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"A",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "C",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "T" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "G",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[AC]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[AG]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[AT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[CG]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[CT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[GT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[ACG]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[ACT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[AGT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[CGT]" ,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i , "[ACGT]" ,sep="")}
    
    if(nt_or_aa=="aa"){
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("R",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("H",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("K",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("D",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("E",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("S",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("T",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("N",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("Q",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("C",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("G",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("P",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("A",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("V",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("I",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("L",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("M",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("F",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("Y",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("W",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste("U",i,sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(".",i,sep="")
      
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"R",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"H",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"K",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"D",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"E",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"S",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"T",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"N",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"Q",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"C",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"G",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"P",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"A",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"V",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"I",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"L",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"M",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"F",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"Y",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"W",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,"U",sep="")
      count_row <- count_row + 1
      new_motifs[count_row,1] <- paste(i,".",sep="")}
    
    
    if(count==limit){
      
      zoveel <- length(new_motifs[,1])
      count <- 0
      
      for(i in new_motifs[,1]){
        
        count <- count + 1
        
        progress <- count/zoveel*100
        
        print(progress)
        
        seq <- i
        
        write_this <- paste(seq,sep="")
        
        write.table(sample(rep(write_this),replace=F),file="vooreven.txt",row.names=F,quote=F,col.names=F,append=T)
      } 
      
      read <- get_aminoacids_load("vooreven.txt")
      read <- unique(read)
      
      return(read)
    }
  }
}

####################################################################################################################################################################################################

get_load_sequence_of_tool <-function(file,tool,threshold){        #file = .txt document of nucleotide probability   #threshold = number of P, range 0-1 or 0-100
  
  #tool = meme/bioprospector/mdscan
  
  #threshold gave a problem, solved with A C T G i's as.integer.
  # nog niet opgelost, als threshold 5 is, dan pakt ie 5,6 niet. threshold 4, om alles boven 5 te kunnen pakken
  backup_threshold <- threshold
  if(tool!="meme"){threshold <- threshold - 1}
  
  data1 <- read.table(file,na.string=F)
  
  if(tool=="meme"){
    colnames(data1)[colnames(data1)=="V1"] <- "A"
    colnames(data1)[colnames(data1)=="V2"] <- "C"
    colnames(data1)[colnames(data1)=="V3"] <- "G"
    colnames(data1)[colnames(data1)=="V4"] <- "T"
  }
  
  if(tool=="bioprospector"){
    data1 <- data1[-1,]
    data1[,9] <- NULL
    data1[,8] <- NULL
    data1[,7] <- NULL
    data1[,6] <- NULL
    data1[,1] <- NULL
    row.names(data1) <- NULL
    colnames(data1)[colnames(data1)=="V2"] <- "A"
    colnames(data1)[colnames(data1)=="V3"] <- "C"
    colnames(data1)[colnames(data1)=="V4"] <- "G"
    colnames(data1)[colnames(data1)=="V5"] <- "T"
  }
  
  if(tool=="mdscan"){
    data1[,8] <- NULL
    data1[,7] <- NULL
    data1[,6] <- NULL
    data1[,5] <- NULL
    row.names(data1) <- NULL
    colnames(data1)[colnames(data1)=="V2"] <- "A"
    colnames(data1)[colnames(data1)=="V3"] <- "C"
    colnames(data1)[colnames(data1)=="V4"] <- "G"
    colnames(data1)[colnames(data1)=="V5"] <- "T"
  }
  
  if(tool=="motifsampler"){
    #ATCG
    #data1[,1] <- NULL
    #row.names(data1) <- NULL
    colnames(data1)[colnames(data1)=="V1"] <- "A"
    colnames(data1)[colnames(data1)=="V2"] <- "T"
    colnames(data1)[colnames(data1)=="V3"] <- "C"
    colnames(data1)[colnames(data1)=="V4"] <- "G"
  }
  
  
  length_of_motif <- length(data1[,1])
  
  df <- data.frame(matrix(nrow=length_of_motif,ncol=4))
  
  count_a <- 0
  count_c <- 0
  count_g <- 0
  count_t <- 0
  
  #print(data1)
  
  for(i in data1$A){
    i <- as.integer(i)
    count_a = count_a + 1
    if(i > threshold){
      print("AAAAA")
      df[count_a,1] <- "A" }}
  
  for(i in data1$C){
    i <- as.integer(i)
    count_c = count_c + 1
    if(i > threshold){      
      df[count_c,2] <- "C"}  }
  
  for(i in data1$G){    
    i <- as.integer(i)
    count_g = count_g + 1    
    if(i > threshold){      
      df[count_g,3] <- "G"}}
  
  for(i in data1$T){    
    i <- as.integer(i)
    count_t = count_t + 1    
    if(i > threshold){      
      df[count_t,4] <- "T"}} 
  
  df[is.na(df)] <- ""
  
  df$nt <- 0
  
  print(data1)
  
  
  for(i in 1:length_of_motif){
    vec <- c(df[i,1], df[i,2], df[i,3], df[i,4])
    df[i,5] <- paste(vec, collapse = "")}
  
  sequence <- ""
  for(i in df$nt){
    if(nchar(i)==1){
      nt <- i}
    if(nchar(i)>1){
      old <- i  
      begin <- 1
      end <- nchar(i)
      i <- paste(substr(old, 1, begin-1), "[", substr(old, begin, nchar(old)), sep = "")
      k <- paste(substr(i, 1, end+2), "]",  sep = "")
      nt <- k}
    
    sequence <- paste(sequence,nt,sep="")
    
  }
  
  cat("\nINPUT FILE: ",file,"\n")
  cat("THRESHOLD SET: ",backup_threshold,"\n")
  cat("MOTIF SEQUENCE: ",sequence,"\n\n")
  
  return(sequence)}

####################################################################################################################################################################################################

get_useful_motif_of_tool <- function(file,tool,threshold){ #checks if the used web tool has discovered a significant motif (diversity difference => 10%)
  
  sequence <- get_load_sequence_of_tool(file,tool,threshold)
  
  x <- sequence
  
  #print("### FULL REGION - DIVERSITY  ###")
  #print("TOP 100 CLONES:")
  g=get_check_motif(data=top100clones,data2=top100clones,pattern=x,region="full_nt",type="diversity")
  #print(g)
  
  #print("PEMC:")
  #h=get_check_motif(data=pemc_filter,data2=pemc_filter,pattern=x,region="full_nt",type="diversity")
  #print(h)
  
  #print("PBMC:")
  i=get_check_motif(data=pbmc_filter,data2=pbmc_filter,pattern=x,region="full_nt",type="diversity")
  #print(i)
  
  #print("DIVERSITY DIFFERENCE TOP100 AND PBMC:")
  D3 <- g-i
  #print(D3)
  #cat("\n")
  
  if(D3>=10){
    print("DIFFERENCE TOP100 AND PBMC: ")
    print(D3)
    cat("\n motif sequence",sequence,"is useful")}
  
  if(D3<=10){
    print("TRY NEXT MOTIF")
  }  
}

####################################################################################################################################################################################################

get_delete <- function(x){
  
  a <- get_load_sequence_of_weblogo("scan_this",0.1)
  
  b <- get_motif_statistics(a)
  
  cat("\n")
  if(b[1,8]>=10){print("### USEFUL MOTIF")}
  if(b[1,8]<=10){print("### TRY NEXT MOTIF")}
}


####################################################################################################################################################################################################

get_motif_statistics_comparison_betweem_datasets <- function(data1,data2,name1,name2,motif,region,vid,jid,group_aa){  #data1 is responder, data2 is nonresponder, vid en jid kan je leeg laten
  x <- motif
  print(paste("INPUT MOTIF SEQUENCE:",x))
  
  #  if(length(group_aa[,1])>0){
  #    new_seq <- ""
  #    # convert motif to his original Amino acids form
  #    for(pos in 1:nchar(x)){
  #      old_aa <- substr(x,pos,pos)
  #      if(old_aa != "["){
  #        if(old_aa != "]"){
  #          find_group_for_old_aa <- group_aa[grep(old_aa,group_aa[,3]),]
  #          replace_aa <- find_group_for_old_aa[,2]
  #          if(nchar(replace_aa)>1){replace_aa <- paste("[",replace_aa,"]",sep="")}}}
  #      new_seq <- paste(new_seq,replace_aa,sep="")}
  #    print(new_seq)}
  
  if(vid!=""){
    if(jid!=""){
      data1 <- subset(data1, V.gene==vid & J.gene==jid)
      data2 <- subset(data2, V.gene==vid & J.gene==jid)
      pemc_filter <- subset(pemc_filter, V.gene==vid & J.gene==jid)
      pbmc_filter <- subset(pbmc_filter, V.gene==vid & J.gene==jid)
      mothera_filter <- subset(mothera_filter, V.gene==vid & J.gene==jid)
      motherb_filter <- subset(motherb_filter, V.gene==vid & J.gene==jid)
      motherc_filter <- subset(motherc_filter, V.gene==vid & J.gene==jid)
      childa1_filter <- subset(childa1_filter, V.gene==vid & J.gene==jid)
      childa2_filter <- subset(childa2_filter, V.gene==vid & J.gene==jid)
      childb1_filter <- subset(childb1_filter, V.gene==vid & J.gene==jid)
      childb2_filter <- subset(childb2_filter, V.gene==vid & J.gene==jid)
      childc1_filter <- subset(childc1_filter, V.gene==vid & J.gene==jid)
      childc2_filter <- subset(childc2_filter, V.gene==vid & J.gene==jid)
      m1d1_filtered <- subset(m1d1_filtered, V.gene==vid & J.gene==jid)
      m1d2_filtered <- subset(m1d2_filtered, V.gene==vid & J.gene==jid)
      m2d1_filtered <- subset(m2d1_filtered, V.gene==vid & J.gene==jid)
      m2d2_filtered <- subset(m2d2_filtered, V.gene==vid & J.gene==jid)
      f1d1_filtered <- subset(f1d1_filtered, V.gene==vid & J.gene==jid)
      f1d2_filtered <- subset(f1d2_filtered, V.gene==vid & J.gene==jid)
    }}
  
  n_seqs_of_responder <- length(data1$Amino.acid.sequence)
  n_seqs_of_nonresponder <- length(data2$Amino.acid.sequence)
  cat("N clones of",name1,":",n_seqs_of_responder,"\n")
  cat("N clones of",name2,":",n_seqs_of_nonresponder,"\n")
  
  #abundance
  # TB
  a_data1=get_check_motif(data=data1,data2=data1,pattern=x,region,type="abundance")
  a_data2=get_check_motif(data=data2,data2=data2,pattern=x,region,type="abundance") ## new moet nog in list 
  a_pemc=get_check_motif(data=pemc_filter,data2=pemc_filter,pattern=x,region,type="abundance") ## new moet nog in list 
  a_pbmc=get_check_motif(data=pbmc_filter,data2=pbmc_filter,pattern=x,region,type="abundance") ## new moet nog in list 
  
  # MOTHER
  a_mothera=get_check_motif(data=mothera_filter,data2=mothera_filter,pattern=x,region,type="abundance")
  a_motherb=get_check_motif(data=motherb_filter,data2=motherb_filter,pattern=x,region,type="abundance")
  a_motherc=get_check_motif(data=motherc_filter,data2=motherc_filter,pattern=x,region,type="abundance")
  a_childa1=get_check_motif(data=childa1_filter,data2=childa1_filter,pattern=x,region,type="abundance")
  a_childa2=get_check_motif(data=childa2_filter,data2=childa2_filter,pattern=x,region,type="abundance")
  a_childb1=get_check_motif(data=childb1_filter,data2=childb1_filter,pattern=x,region,type="abundance")
  a_childb2=get_check_motif(data=childb2_filter,data2=childb2_filter,pattern=x,region,type="abundance")
  a_childc1=get_check_motif(data=childc1_filter,data2=childc1_filter,pattern=x,region,type="abundance")
  a_childc2=get_check_motif(data=childc2_filter,data2=childc2_filter,pattern=x,region,type="abundance")
  
  # WARREN
  a_m1d1=get_check_motif(m1d1_filtered,m1d1_filtered,pattern=x,region,type="abundance")  #NEW
  a_m1d2=get_check_motif(m1d2_filtered,m1d2_filtered,pattern=x,region,type="abundance")  #NEW
  a_m2d1=get_check_motif(m2d1_filtered,m2d1_filtered,pattern=x,region,type="abundance")  #NEW
  a_m2d2=get_check_motif(m2d2_filtered,m2d2_filtered,pattern=x,region,type="abundance")  #NEW
  a_f1d1=get_check_motif(f1d1_filtered,f1d1_filtered,pattern=x,region,type="abundance")  #NEW
  a_f1d2=get_check_motif(f1d2_filtered,f1d2_filtered,pattern=x,region,type="abundance")  #NEW
  
  dif_data1 <- 0
  dif_data2 <- a_data1 - a_data2
  dif_pemc <- a_data1 - a_pemc
  dif_pbmc <- a_data1 - a_pbmc
  dif_mothera <- a_data1 - a_mothera
  dif_motherb <- a_data1 - a_motherb
  dif_motherc <- a_data1 - a_motherc
  dif_childa1 <- a_data1 - a_childa1
  dif_childa2 <- a_data1 - a_childa2
  dif_childb1 <- a_data1 - a_childb1
  dif_childb2 <- a_data1 - a_childb2
  dif_childc1 <- a_data1 - a_childc1
  dif_childc2 <- a_data1 - a_childc2
  dif_m1d1 <- a_data1 - a_m1d1
  dif_m1d2 <- a_data1 - a_m1d2
  dif_m2d1 <- a_data1 - a_m2d1
  dif_m2d2 <- a_data1 - a_m2d2
  dif_f1d1 <- a_data1 - a_f1d1
  dif_f1d2 <- a_data1 - a_f1d2
  
  #diversity
  # TB
  d_data1=get_check_motif(data=data1,data2=data1,pattern=x,region,type="diversity")
  d_data2=get_check_motif(data=data2,data2=data2,pattern=x,region,type="diversity") ## new moet nog in list 
  d_pemc=get_check_motif(data=pemc_filter,data2=pemc_filter,pattern=x,region,type="diversity") ## new moet nog in list 
  d_pbmc=get_check_motif(data=pbmc_filter,data2=pbmc_filter,pattern=x,region,type="diversity") ## new moet nog in list 
  
  # MOTHER
  d_mothera=get_check_motif(data=mothera_filter,data2=mothera_filter,pattern=x,region,type="diversity")
  d_motherb=get_check_motif(data=motherb_filter,data2=motherb_filter,pattern=x,region,type="diversity")
  d_motherc=get_check_motif(data=motherc_filter,data2=motherc_filter,pattern=x,region,type="diversity")
  d_childa1=get_check_motif(data=childa1_filter,data2=childa1_filter,pattern=x,region,type="diversity")
  d_childa2=get_check_motif(data=childa2_filter,data2=childa2_filter,pattern=x,region,type="diversity")
  d_childb1=get_check_motif(data=childb1_filter,data2=childb1_filter,pattern=x,region,type="diversity")
  d_childb2=get_check_motif(data=childb2_filter,data2=childb2_filter,pattern=x,region,type="diversity")
  d_childc1=get_check_motif(data=childc1_filter,data2=childc1_filter,pattern=x,region,type="diversity")
  d_childc2=get_check_motif(data=childc2_filter,data2=childc2_filter,pattern=x,region,type="diversity")
  
  # WARREN
  d_m1d1=get_check_motif(m1d1_filtered,m1d1_filtered,pattern=x,region,type="diversity")  #NEW
  d_m1d2=get_check_motif(m1d2_filtered,m1d2_filtered,pattern=x,region,type="diversity")  #NEW
  d_m2d1=get_check_motif(m2d1_filtered,m2d1_filtered,pattern=x,region,type="diversity")  #NEW
  d_m2d2=get_check_motif(m2d2_filtered,m2d2_filtered,pattern=x,region,type="diversity")  #NEW
  d_f1d1=get_check_motif(f1d1_filtered,f1d1_filtered,pattern=x,region,type="diversity")  #NEW
  d_f1d2=get_check_motif(f1d2_filtered,f1d2_filtered,pattern=x,region,type="diversity")  #NEW
  
  ddif_data1 <- 0
  ddif_data2 <- d_data1 - d_data2
  ddif_pemc <- d_data1 - d_pemc
  ddif_pbmc <- d_data1 - d_pbmc
  ddif_mothera <- d_data1 - d_mothera
  ddif_motherb <- d_data1 - d_motherb
  ddif_motherc <- d_data1 - d_motherc
  ddif_childa1 <- d_data1 - d_childa1
  ddif_childa2 <- d_data1 - d_childa2
  ddif_childb1 <- d_data1 - d_childb1
  ddif_childb2 <- d_data1 - d_childb2
  ddif_childc1 <- d_data1 - d_childc1
  ddif_childc2 <- d_data1 - d_childc2
  ddif_m1d1 <- d_data1 - d_m1d1
  ddif_m1d2 <- d_data1 - d_m1d2
  ddif_m2d1 <- d_data1 - d_m2d1
  ddif_m2d2 <- d_data1 - d_m2d2
  ddif_f1d1 <- d_data1 - d_f1d1
  ddif_f1d2 <- d_data1 - d_f1d2
  
  df <- data.frame(matrix(nrow=19,ncol=5))
  colnames(df)[colnames(df)=="X1"] <- "Data set"
  colnames(df)[colnames(df)=="X2"] <- "Abundance (%)"
  colnames(df)[colnames(df)=="X3"] <- "Diversity (%)"
  colnames(df)[colnames(df)=="X4"] <- "Difference Abundance (%)"
  colnames(df)[colnames(df)=="X5"] <- "Difference Diversity (%)"
  
  datas <- c(name1,name2,"PEMC", "PBMC", "Mother A", "Mother B", "Mother C", "Child A1", "Child A2", "Child B1", "Child B2", "Child C1", "Child C2","M1D1","M1D2","M2D1","M2D2","F1D1","F2D2")
  abundances <- c(a_data1, a_data2, a_pemc, a_pbmc, a_mothera, a_motherb, a_motherc, a_childa1, a_childa2, a_childb1, a_childb2, a_childc1, a_childc2, a_m1d1, a_m1d2, a_m2d1, a_m2d2, a_f1d1, a_f1d2)
  diversities <- c(d_data1, d_data2, d_pemc, d_pbmc, d_mothera, d_motherb, d_motherc, d_childa1, d_childa2, d_childb1, d_childb2, d_childc1, d_childc2, d_m1d1, d_m1d2, d_m2d1, d_m2d2, d_f1d1, d_f1d2)
  difference_abundances <- c(dif_data1, dif_data2, dif_pemc, dif_pbmc, dif_mothera, dif_motherb, dif_motherc, dif_childa1, dif_childa2, dif_childb1, dif_childb2, dif_childc1, dif_childc2, dif_m1d1, dif_m1d2, dif_m2d1, dif_m2d2, dif_f1d1, dif_f1d2)
  difference_diversities <- c(ddif_data1, ddif_data2, ddif_pemc, ddif_pbmc, ddif_mothera, ddif_motherb, ddif_motherc, ddif_childa1, ddif_childa2, ddif_childb1, ddif_childb2, ddif_childc1, ddif_childc2, ddif_m1d1, ddif_m1d2, ddif_m2d1, ddif_m2d2, ddif_f1d1, ddif_f1d2)
  
  count<-0
  for(i in datas){
    count <- count + 1
    df[count,1] <- i}
  
  count<-0
  for(i in abundances){
    count <- count + 1
    df[count,2] <- i}
  
  count<-0
  for(i in diversities){
    count <- count + 1
    df[count,3] <- i}
  
  count<-0
  for(i in difference_abundances){
    count <- count + 1
    df[count,4] <- i}
  
  count<-0
  for(i in difference_diversities){
    count <- count + 1
    df[count,5] <- i}
  
  print(df)
  return(df)
}

####################################################################################################################################################################################################

get_motif_significant_for_top <- function(data,type,motif){
  
  backup <- data
  
  V19 <- subset(data, V.gene=="TRBV19*01")
  V20_1 <- subset(data, V.gene=="TRBV20-1*01")
  V27 <- subset(data, V.gene=="TRBV27*01")
  V28 <- subset(data, V.gene=="TRBV28*01")
  
  a <- get_check_motif(V19,V19,motif,"full_nt",type)
  b <- get_check_motif(V20_1,V20_1,motif,"full_nt",type)
  c <- get_check_motif(V27,V27,motif,"full_nt",type)
  d <- get_check_motif(V28,V28,motif,"full_nt",type)
  
  total <- a+b+c+d
  
  gemiddelde <- total / 4 
  
  print(gemiddelde)
  
}

####################################################################################################################################################################################################

get_motif_significant_for_top_abundance <- function(data,type,motif){
  
  backup <- data
  
  V19 <- subset(data, V.gene=="TRBV19*01")
  V20_1 <- subset(data, V.gene=="TRBV20-1*01")
  V27 <- subset(data, V.gene=="TRBV27*01")
  V28 <- subset(data, V.gene=="TRBV28*01")
  
  xtopV19 <- V19[grep(motif,V19$Junction.nucleotide.sequence  ),]
  xtopV20_1 <- V20_1[grep(motif,V20_1$Junction.nucleotide.sequence  ),]
  xtopV27 <- V27[grep(motif,V27$Junction.nucleotide.sequence  ),]
  xtopV28 <- V28[grep(motif,V28$Junction.nucleotide.sequence  ),]
  
  cat("\n")
  print("V19")
  print(sum(xtopV19$Number.of.reads))
  
  cat("\n")
  print("V20-1")
  print(sum(xtopV20_1$Number.of.reads))
  
  cat("\n")
  print("V27")
  print(sum(xtopV27$Number.of.reads))
  
  cat("\n")
  print("V28")
  print(sum(xtopV28$Number.of.reads))
  
  #a <- rbind(xtopV19,xtopV20_1,xtopV27,xtopV28)
  #b <- sum(a$Number.of.reads)
  #print(b)
}

####################################################################################################################################################################################################3

get_motif_aa_replace_variable_column <- function(data1,motif,region){
  
  count <- 0
  backup1 <- data1
  cat("INPUT MOTIF SEQUENCE: ",motif,"\n\n")
  timesn <- get_check_motif(data1,data1,motif,region,type="diversity")
  overview <- data.frame(matrix(ncol = 2, nrow = timesn))
  
  if(region=="full_nt"){
    for(i in data1$Junction.nucleotide.sequence){
      count = count + 1
      location <- str_locate_all(i,motif)
      location <- as.data.frame(location)
      overview[count,] <- location[1,]}}
  
  if(region=="full_aa"){
    for(i in data1$Amino.acid.sequence){
      count = count + 1
      location <- str_locate_all(i,motif)
      location <- as.data.frame(location)
      overview[count,] <- location[1,]}}
  
  
  overview <- na.omit(overview)
  overview <- as.data.frame(overview)
  start <- mean(x=overview[,1])
  end <- mean(x=overview[,2])
  
  colnames(overview)[colnames(overview)=="X1"] <- "start"
  colnames(overview)[colnames(overview)=="X2"] <- "end"
  
  mijnlijst3 <- seq(3,100, by=3)
  mijnlijst4 <- seq(4,100, by=3)
  mijnlijst5 <- seq(5,100, by=3)
  
  overview$in_frame_correction <- ""
  overview$in_frame_correction_end <- ""
  
  true_or_false3 <- ""
  true_or_false4 <- ""
  true_or_false5 <- ""
  
  end_true_or_false3 <- ""
  end_true_or_false4 <- ""
  end_true_or_false5 <- ""
  
  count <- 0
  for(i in overview$start){    
    count <- count + 1
    true_or_false3[count] <- (i %in% mijnlijst3)
    true_or_false4[count] <- (i %in% mijnlijst4)
    true_or_false5[count] <- (i %in% mijnlijst5)}
  
  count <- 0
  for(i in overview$end){    
    count <- count + 1
    end_true_or_false3[count] <- (i %in% mijnlijst3)
    end_true_or_false4[count] <- (i %in% mijnlijst4)
    end_true_or_false5[count] <- (i %in% mijnlijst5)}
  
  count <- 0
  for(i in true_or_false3){
    count <- count + 1
    if(i==TRUE){
      overview[count,"in_frame_correction"] <- overview[count,"start"]}}
  
  count <- 0
  for(i in true_or_false4){
    count <- count + 1
    if(i==TRUE){
      correction <- overview[count,"start"] - 1
      overview[count,"in_frame_correction"] <- correction}}
  
  count <- 0
  for(i in true_or_false5){
    count <- count + 1
    if(i==TRUE){
      correction <- overview[count,"start"] - 2
      overview[count,"in_frame_correction"] <- correction}}
  
  count <- 0
  for(i in end_true_or_false3){
    count <- count + 1
    if(i==TRUE){
      overview[count,"in_frame_correction_end"] <- overview[count,"end"]}}
  
  count <- 0
  for(i in end_true_or_false4){
    count <- count + 1
    if(i==TRUE){
      correction <- overview[count,"end"] + 2
      overview[count,"in_frame_correction_end"] <- correction}}
  
  count <- 0
  for(i in end_true_or_false5){
    count <- count + 1
    if(i==TRUE){
      correction <- overview[count,"end"] + 1
      overview[count,"in_frame_correction_end"] <- correction}}
  
  ####
  data1$Amino.acid.sequence.of.motif <- ""
  
  if(region=="full_nt"){data1 <- data1[grep(motif,data1$Junction.nucleotide.sequence  ),]}
  if(region=="full_aa"){data1 <- data1[grep(motif,data1$Amino.acid.sequence  ),]}
  
  count <- 0
  if(region=="full_nt"){
    for(i in overview$in_frame_correction){
      count <- count + 1
      start <- i
      start <- as.integer(start)
      start <- (start / 3)
      end <- overview[count,"in_frame_correction_end"]
      end <- as.integer(end)
      end <- end / 3
      data1[count,"Amino.acid.sequence.of.motif"] <- substr(data1[count,"Amino.acid.sequence"], start, end)}}
  
  count <- 0 
  if(region=="full_aa"){
    for(i in data1$Amino.acid.sequence){
      count <- count + 1
      a <- str_locate_all(i,motif)
      a <- as.data.frame(a)
      start <- a[1,1]
      end <- a[1,2]
      data1[count,"Amino.acid.sequence.of.motif"] <- substr(data1[count,"Amino.acid.sequence"], start, end)}}
  
  ### TIJDELIJK omdat freq plots alleen op full en indel werkt en nog niet op motif_seq.
  data1$Variable.region.amino.acid.sequence <- data1$Amino.acid.sequence.of.motif
  
  cat("[1] Content of Variable.region.amino.acid.sequence column is changed to all amino acids which are part of the motif.")
  return(data1)
}

####################################################################################################################################################################################################

get_delete4 <- function(pattern,region){
  
  a <- get_check_motif(top100clones,top100clones,pattern,region,div)
  b <- get_check_motif(pbmc_filter,pbmc_filter,pattern,region,div)
  c <- get_check_motif(pemc_filter,pemc_filter,pattern,region,div)
  d <- get_check_motif(pbmc_top100,pbmc_top100,pattern,region,div)
  
  cat("DIVERSITY \n")
  cat("TOP100 PBMC: ",d,"\n")
  cat("TOP100 PEMC: ",a,"\n")
  cat("PBMC: ",b,"\n")
  cat("PEMC: ",c,"\n\n")
  
  e <- get_check_motif(top100clones,top100clones,pattern,region,ab)
  f <- get_check_motif(pbmc_filter,pbmc_filter,pattern,region,ab)
  g <- get_check_motif(pemc_filter,pemc_filter,pattern,region,ab)
  h <- get_check_motif(pbmc_top100,pbmc_top100,pattern,region,ab)
  
  cat("ABUNDANCE \n")
  cat("TOP100 PBMC: ",h,"\n")
  cat("TOP100 PEMC: ",e,"\n")
  cat("PBMC: ",f,"\n")
  cat("PEMC: ",g,"\n")
}

####################################################################################################################################################################################################

get_motif_aa_best <- function(data1,data2,group,group2,region,type){
  
  #maxlength of CDR3 in PBMC is 38 aa.
  
  aa <- ""
  aa2 <- ""
  
  if(group==1){aa <-"[RHK]"}
  if(group2==1){aa2 <-"[RHK]"}   
  
  if(group==2){aa <-"[DE]"}
  if(group2==2){aa2 <-"[DE]"}  
  
  if(group==3){aa <-"[STNQ]"}
  if(group2==3){aa2 <-"[STNQ]"}  
  
  if(group==4){aa <-"[CUGP]"}
  if(group2==4){aa2 <-"[CUGP]"}  
  
  if(group==5){aa <-"[AVILMFYW]"}
  if(group2==5){aa2 <-"[AVILMFYW]"}  
  
  group_poss <- c("")
  dots <- ""
  add_dot <- "."
  
  count <- 0
  for(i in 1:38){
    count <- count + 1
    dots <- paste(dots,add_dot, sep="")
    seq <- paste(aa,dots,aa2,sep="")
    group_poss[count] <- seq}
  
  statistics_list <- c("")
  count <- 0
  
  for(i in group_poss){
    
    a <- get_check_motif(data1,data1,i,region,type)
    b <- get_check_motif(data2,data2,i,region,type)
    
    a <- as.integer(a)
    b <- as.integer(b)
    
    dif <- a - b
    count <- count + 1
    statistics_list[count] <- dif}
  
  statistics_list <- as.data.frame(statistics_list)
  return(statistics_list)}

get_delete <- function(data1,data2,region,type){
  
  df <- data.frame(matrix(nrow=38,ncol=25))
  
  count <- 0
  for(i in 1:5){
    for(k in 1:5){
      count <- count + 1
      a <- get_motif_aa_best(data1,data2,i,k,region,type)
      df[,count] <- a
      print(i)
      print(k)
      print("DONE")
    }
  }
  
  return(df)
}

####################################################################################################################################################################################################

#return the measures of the relative abundance or bias between the observed and expected frequencies of the 2-mers 
get_odds_ratio_di_aminoacids <- function(mono_mer, di_mer){
  
  print("IN PROGRESS: Calculating odds ratio of di amino acids")
  
  v <- di_mer
  for(i in 1:length(di_mer)){
    p <- di_mer[[i]]
    exp <- 1
    seq <- names(di_mer)[i]
    up <- nchar(seq)
    for(aa in 1:up){
      el <- substr(seq, aa, aa)
      exp <- exp*mono_mer[[el]]
    }
    v[i] <- (p/exp)
  }
  #print(v)
  print("DONE")
  cat("\n")
  v <- as.matrix(v)
  RANK <- (v[order(v[,1],decreasing=T),])
  View(RANK)
  return(v)
}

####################################################################################################################################################################################################

#return the measures of the relative abundance or bias between the observed and expected frequencies of the given 3-mers 
get_odds_ratio_tri_aminoacids <- function(mono_mer, di_mer, tri_mer){
  print("IN PROGRESS: Calculating odds ratio of tri amino acids")
  v <- tri_mer
  for(i in 1:length(tri_mer)){
    p <- tri_mer[[i]]    #freq of each tri-mer
    f1 <- 1
    f2 <- 1
    f3 <- 0
    X <- "x"
    Z <- "z"
    seq <- names(tri_mer)[i]
    up <- nchar(seq)
    for(aa in 1:up){
      el <- substr(seq, aa, aa)
      f1 <- f1*mono_mer[[el]]
      if(aa == 1){X <- el}
      if(aa == up){Z <- el}
      if(aa < up){
        el2 <- substr(seq, aa, aa+1)
        f2 <- f2*di_mer[[el2]]
      }
    }
    for(j in 1:20){
      N <- aminoacids[[j]]
      tri <- paste(X, N, Z, sep = "")
      f3 <- f3 + tri_mer[[tri]]
    }
    v[i] <- (p*f1)/(f2*f3)
  }
  print("DONE")
  cat("\n")
  
  v <- as.matrix(v)
  RANK <- (v[order(v[,1],decreasing=T),])
  
  View(RANK)
}

####################################################################################################################################################################################################

get_motif_subset <- function(data1,motif,region){ #creates a subset with only contains the given motif but also replaces the indel region by the amino acids wich are part of the motif.
  data1 <- get_find_seq(data1,motif,region)
  print(length(data1$Number.of.reads))
  data1 <- get_motif_aa_replace_variable_column(data1,motif,region)
  return(data1)}

####################################################################################################################################################################################################

get_rid_of_background_amino_acids <- function(data1){
  
  backup1 <- data1
  
  count <- 0
  
  for(i in data1$Amino.acid.sequence){
    
    
    count <- count + 1
    
    nt_sequence_end_of_v_gene <- data1[count,6]
    
    aa_in_v_gene <- nt_sequence_end_of_v_gene / 3
    
    aa_in_v_gene2 <- ceiling(aa_in_v_gene)
    
    aa_in_v_gene2 <- aa_in_v_gene2 - 2 #zoveel moet er van het V gen af 
    
    length_of_cdr <- nchar(i)
    
    new_i <- substr(i,aa_in_v_gene2,length_of_cdr)
    
    #################
    
    nt_sequence_end_of_j_gene <- data1[count,"J.gene.start.position"]
    
    k <- data1[count,"Junction.nucleotide.sequence"]
    
    length_of_nt_junction <- nchar(k)
    
    aa_in_j_gene <- length_of_nt_junction - nt_sequence_end_of_j_gene
    
    aa_in_j_gene2 <- aa_in_j_gene / 3
    
    aa_in_j_gene2 <- ceiling(aa_in_j_gene2)
    
    aa_in_j_gene2 <- aa_in_j_gene2 + 2
    
    new_i2 <- substr(new_i,1,nchar(new_i)-aa_in_j_gene2)
    
    data1[count,"Variable.region.amino.acid.sequence"] <- new_i2
  }
  return(data1) 
}

####################################################################################################################################################################################################

get_trim_sequences_of_fasta_file <- function(fastafile,name1,n_elements,begin_or_end){
  a<-get_aminoacids_load(fastafile)
  sequence_no <- 0
  new_line <- "\n"
  for(i in a){
    if(startsWith(i,">")!=TRUE){
      if(nchar(i)>=11){      
        if(begin_or_end=="begin"){seq <- substr(i,n_elements+1,nchar(i))}
        if(begin_or_end=="end"){seq <- substr(i,1,nchar(i)-n_elements)}
        sequence_no <- sequence_no + 1
        write_this <- paste(">NO_",sequence_no,"|length=",nchar(seq),"|",new_line,seq,sep="")
        write.table(sample(rep(write_this),replace=T),file=name1,row.names=F,quote=F,col.names=F,append=T)}}}
  cat("[1] DONE")
}

####################################################################################################################################################################################################

get_fasta_file_all_VJ_combinations <- function(data1,name1,region,length,maxsize){  
  
  #unique_question <- readline(prompt="Unique sequences?: ")
  unique_question <- "yes"
  
  backup1 <- data1
  
  unique_v <- unique(data1$V.gene)
  unique_j <- unique(data1$J.gene)
  
  count <- 0
  
  for(one_v in unique_v){
    
    count <- count + 1
    data1 <- backup1
    one_v <- unique_v[count]
    print(one_v)
    
    for(one_j in unique_j){
      
      data1 <- backup1
      
      data1 <- subset(data1, V.gene==one_v & J.gene==one_j)
      data1 <- data1[1:1000,]
      
      if(region=="full_aa"){column <- data1$Amino.acid.sequence} 
      if(region=="indel_aa"){column <- data1$Variable.region.amino.acid.sequence}
      if(region=="full_nt"){column <- data1$Junction.nucleotide.sequence}
      if(region=="indel_nt"){column <- data1$Variable.region.nucleotide.sequence}
      if(region=="group_aa"){column <- data1$CDR3_cluster_aa}
      if(unique_question=="yes"){column <- unique(column)}
      
      sequence_no <- 0
      new_line <- "\n"
      length_of_column <- length(column)
      
      if(length_of_column>2){      
        for(i in column){
          sequence_no <- sequence_no + 1
          length_of_seq <- nchar(i)
          if(length_of_seq >= length){    # MEME allows only sequence with minimal n = 8
            
            seq <- i
            #cat("Writing sequence",sequence_no,"of",length_of_column,"\n")
            write_this <- paste(">NO_",sequence_no,"|length=",length_of_seq,"|",new_line,seq,sep="")
            write.table(sample(rep(write_this),replace=T),file=paste(name1,"_",one_v,"_",one_j,".fasta",sep=""),row.names=F,quote=F,col.names=F,append=T)      
            
            if(sequence_no==maxsize){
              cat("above has more than 1000")
              #cat("Fasta file is saved in:",getwd(),"\n")
              #return()
              
            }}}}}}
  
  cat("Fasta file is saved in:",getwd())
}

####################################################################################################################################################################################################

get_amount_seqs_of_family <- function(data){
  backup <- data
  unique_v <- unique(data$V.gene)
  unique_j <- unique(data$J.gene)
  count <- 0
  for(one_v in unique_v){
    count <- count + 1
    data <- backup
    one_v <- unique_v[count]
    for(one_j in unique_j){  
      data <- backup
      data <- subset(data, V.gene==one_v & J.gene==one_j)
      amount_seqs <- length(data[,1])
      cat(one_v,one_j,":",amount_seqs,"\n")
      if(amount_seqs>1000){cat(one_v,one_j,"FAMILY HAS MORE THAN 1000 SEQS, USE BOOTSTRAP FOR MEME\n")}}}}

####################################################################################################################################################################################################

# x = rawoutput.tsv of a_analyse_meme.py. It returns only the significant MOTFIS.
get_pipe1 <- function(x){
  x <- read.csv(x,header=F)
  colnames(x)[colnames(x)=="X.....home.emre.tmp.motifs.pemc_vj_sep.results.pemc_TRBV12.4.01_TRBJ1.2.01.fasta...."] <- "X"
  count = 0
  count2 = 0
  overview <- data.frame(matrix(ncol = 1, nrow = 973))
  dezerij <- 0
  for(i in x[,1]){
    count = count + 1
    count2 = count
    i <- substr(i,1,5)
    if(i=="MOTIF"){
      count2 = count2 + 1
      motif <- x[count2,1]
      motif <- as.character(motif)
      dezerij <- dezerij +1
      overview[dezerij,1] <- motif}}  
  overview <- overview[1:dezerij,]
  return(overview)}

####################################################################################################################################################################################################

# x = rawoutput.tsv of a_analyse_meme.py. x2 = numbers_of_motifs_in_families.txt of a_analyse_meme_3.py ### wanneer fasta bestand pemc, moet abc 1 en 2 zijn. bij responder heb je een extra _ daarom moet abc 2 en 3 zijn.   #lijkt er op dat x2 niet nodig is, 5meme_pipe.py
get_pipe2 <- function(x){
  check_x <- x
  x <- read.csv(x,header=F)
  #x2 <- read.table(x2)
  colnames(x)[colnames(x)=="X.....home.emre.tmp.motifs.pemc_vj_sep.results.pemc_TRBV12.4.01_TRBJ1.2.01.fasta...."] <- "X"
  overview <- data.frame(matrix(ncol = 3, nrow = 1000)) 
  count = 0
  count2 = 0
  zoveelste_rij_zit_hashtag <- 0
  mylist <- c("")
  zoveelste_hashtag = 0
  count4 <- 0
  count5 <- 1
  x <- as.data.frame(x)
  origineel <- x
  for(i in x[,1]){
    i2 <- substr(i,1,3)
    zoveelste_rij_zit_hashtag <- zoveelste_rij_zit_hashtag + 1
    if(i2=="###"){
      zoveelste_hashtag <- zoveelste_hashtag + 1
      mylist[zoveelste_hashtag] <- zoveelste_rij_zit_hashtag}}
  for(k in 1:length(mylist)){
    x <- origineel
    count4<-count4+1
    count5<-count5+1
    begin <- mylist[count4]
    begin <- as.integer(begin)
    end <- mylist[count5]
    end <- as.integer(end)
    end <- end - 1
    if(count4!=length(mylist)){
      x <- x[begin:end,]
      for(i in x){
        i <- substr(i,1,5)
        if(i=="MOTIF"){
          deze_families <- origineel[begin,]
          count = count + 1
          deze_families <- as.character(deze_families)
          test <- substr(deze_families,38,nchar(deze_families)-10)
          test <- strsplit(test, "_")
          test <- as.vector(test)
          abc <- test[[1]]
          v.gene <- abc[2]
          j.gene <- abc[3]
          overview[count,1] <- v.gene
          overview[count,2] <- j.gene
          count2 = count2 + 1 }}}}
  
  # om laatste familie mee te nemen.
  
  df<- x[grep("###",x[,1]),]
  df<- as.data.frame(df)
  length_df <- length(df[,1])
  deze <- df[length_df,]
  deze <- as.vector(deze)
  this <- substr(deze,38,nchar(deze)-10)
  test2 <- strsplit(deze, "_")
  test2 <- as.vector(test2)
  abc <- test2[[1]]
  v.gene <- abc[2]
  j.gene <- abc[3]
  j.gene <- strsplit(j.gene,".fasta")
  j.gene <- j.gene[[1]]
  j.gene <- j.gene[1]
  
  df2 <- data.frame(matrix(ncol=3,nrow=1))
  df2[1,1]<-v.gene
  df2[1,2]<-j.gene
  
  overview <- overview[1:count2,]  ### DEZE LATEN
  
  overview <- rbind(overview,df2)
  
  check <- get_pipe1(check_x)
  length_check <- length(check)
  length_df <- length(overview[,1])
  if(length_check>length_df){
    add_row <- overview[length_df,]
    overview <- rbind(overview,add_row)
  }
  
  return(overview)}

####################################################################################################################################################################################################

# rawoutput.tsv from a_analyse_meme.py
get_motifs_meme_pipe <- function(rawoutput){
  
  all_motifs <- get_pipe1(rawoutput)
  families_and_freq <- get_pipe2(rawoutput)
  
  # REMOVE, MADE FOR GROUP_CLUSTER UNIQUE.
  #families_and_freq <- unique(families_and_freq)
  
  all_motifs <- as.data.frame(all_motifs)
  View(all_motifs)
  View(families_and_freq)
  
  all_motifs$V.gene <- families_and_freq[,1]
  all_motifs$J.gene <- families_and_freq[,2]
  
  return(all_motifs)}

####################################################################################################################################################################################################

get_del <- function(x,pemc,pbmc){
  
  clones <- unique(x$Amino.acid.sequence)
  length_of_clones <- length(clones)
  overview <- data.frame(matrix(ncol = 3, nrow = length_of_clones))
  
  count=0
  for(i in clones){
    count=count+1
    
    one_clone_in_pemc <- pemc[grep(i,pemc$Amino.acid.sequence),]
    one_clone_in_pbmc <- pbmc[grep(i,pbmc$Amino.acid.sequence),]
    
    abundance_pemc <- sum(one_clone_in_pemc$Number.of.reads)
    abundance_pbmc <- sum(one_clone_in_pbmc$Number.of.reads)
    
    overview[count,1] <- i
    overview[count,2] <- abundance_pemc
    overview[count,3] <- abundance_pbmc
    
  }
  View(overview)
  return(overview)
}

####################################################################################################################################################################################################

#returns data frame with everything of the selected clones, read the selected clones first with get_amino_load
get_del2 <- function(data,data2){
  
  length_of_clones <- length(data)
  
  overview <- data.frame(matrix(ncol = 16, nrow = 1))
  
  count=0
  for(i in data){
    
    count <- count + 1
    
    if(count==1){overview <- data2[grep(i,data2$Amino.acid.sequence),]}
    
    if(count>2){
      data_of_clone <- data2[grep(i,data2$Amino.acid.sequence),]
      overview <- rbind(overview,data_of_clone)}
    
  }
  View(overview)
  return(overview)
}

####################################################################################################################################################################################################

get_occurence_of_motif_in_datasets <- function(data1,data2,output_rfunction_meme_pipe,name1,name2,region,group_aa){ #  data 1 and 2 run1_responder_data_frame,run1_non_responder_data_frame      name1 and 2"RUN1_RESPONDERS" "RUN1_NONRESPONDERS"
  
  count=0
  
  for(i in output_rfunction_meme_pipe[,1]){
    
    count=count+1
    
    vid <- output_rfunction_meme_pipe[count,2]
    print(vid)
    
    jid <- output_rfunction_meme_pipe[count,3]
    print(jid)
    
    overview <- get_motif_statistics_comparison_betweem_datasets(data1,data2,name1,name2,i,region,vid,jid,group_aa)
    
    data1x <- get_find_seq(data1,i,region)
    data2x <- get_find_seq(data2,i,region)
    
    data1x <- subset(data1x, V.gene==vid && J.gene==jid)
    data2x <- subset(data2x, V.gene==vid && J.gene==jid)
    
    ab1 <- sum(data1x$Number.of.reads)
    div1 <- length(unique(data1x[,1]))
    
    ab2 <- sum(data2x$Number.of.reads)
    div2 <- length(unique(data2x[,1]))
    
    overview <- overview[,1:3]
    
    plot_this <- overview[,2:3]
    plot_this <- t(plot_this)
    
    jpeg(file = paste("/home/emre/kmer_plots/","motif_",count,"_",vid,"_",jid,".jpg", sep = ""), width=750, height=400) 
    
    barplot(plot_this,names.arg=overview[,1],las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),beside=T,ylim=c(0,100),
            ,ylab="Relative frequency (%)",legend=c("Abundance","Diversity"), main=paste("Occurence of motif",count,i,"\n found in",vid,"and",jid))  #"\nAB1:",ab1,"\tDIV1:",div1,"\nAB2:",ab2,"\tDIV2:",div2
    print("DONE")
    dev.off()
    
  }}

################################################################################################################################################################################################################################################

get_aa_distr_ggplot <- function(data1,data2,name1,name2,region,vid,jid,motif,motif_name){    
  
  names_legend <- data.frame(matrix(ncol = 1, nrow = 2))
  rownames(names_legend)[rownames(names_legend)==1] <- name1
  rownames(names_legend)[rownames(names_legend)==2] <- name2
  
  main_plot <- ""
  if(region=="full"){
    main_plot=paste("CDR3 length distribution in",vid,jid,"\n","for motif",motif)
    nchar_of_aa1 <- nchar(data1$Amino.acid.sequence)
    nchar_of_aa2 <- nchar(data2$Amino.acid.sequence)
  }
  
  if(region=="indel"){
    main_plot=paste("N-DB-N length distribution in",vid,jid,"\n","for motif",motif)
    nchar_of_aa1 <- nchar(data1$Variable.region.amino.acid.sequence)
    nchar_of_aa2 <- nchar(data2$Variable.region.amino.acid.sequence)
  }
  
  nchar_of_aa1 <- table(nchar_of_aa1)
  nchar_of_aa2 <- table(nchar_of_aa2)
  
  nchar_of_aa1 <- as.data.frame(nchar_of_aa1)
  nchar_of_aa2 <- as.data.frame(nchar_of_aa2)
  
  nchar_of_aa1_length <- length(nchar_of_aa1[,1])
  nchar_of_aa2_length <- length(nchar_of_aa2[,1])
  
  #count=0
  #for(i in nchar_of_aa1[,1]){count=count+1
  #                           if(count==1){nchar_of_aa1_minimum <- i}
  #                           if(count==nchar_of_aa1_length){nchar_of_aa1_maximum <- i}}
  
  #count=0
  #for(i in nchar_of_aa2[,1]){count=count+1
  #                           if(count==1){nchar_of_aa2_minimum <- i}
  #                           if(count==nchar_of_aa2_length){nchar_of_aa2_maximum <- i}}
  
  #if(nchar_of_aa1_minimum>nchar_of_aa2_minimum){begin_aa_plot<-nchar_of_aa2_minimum}
  #if(nchar_of_aa1_minimum<nchar_of_aa2_minimum){begin_aa_plot<-nchar_of_aa1_minimum}
  
  #if(nchar_of_aa1_maximum>nchar_of_aa2_maximum){end_aa_plot<-nchar_of_aa1_maximum}
  #if(nchar_of_aa2_maximum<nchar_of_aa2_maximum){end_aa_plot<-nchar_of_aa2_maximum}
  
  aa_list <- c("")
  count=0
  for(i in nchar_of_aa1[,1]){count=count+1
                             aa_list[count] <- i}
  for(i in nchar_of_aa2[,1]){count=count+1
                             aa_list[count] <- i}
  aa_list <- (unique(sort(aa_list)))
  
  df <- data.frame(matrix(ncol = 3, nrow = length(aa_list)))
  
  nchar_of_aa1_total <- sum(nchar_of_aa1[,2])
  nchar_of_aa2_total <- sum(nchar_of_aa2[,2])
  
  nchar_of_aa1[,2] <- nchar_of_aa1[,2]/nchar_of_aa1_total*100
  nchar_of_aa2[,2] <- nchar_of_aa2[,2]/nchar_of_aa2_total*100
  
  count=0
  for(i in df[,1]){count=count+1
                   df[count,1]<-aa_list[count]}
  
  #df <- df[order(df[,1],decreasing=F),]
  
  xlist_aa1 = c("")
  xlist_freq1 = c("")
  xlist_aa2 = c("")
  xlist_freq2 = c("")
  
  count=0
  for(i in nchar_of_aa1[,1]){count=count+1
                             freq <- nchar_of_aa1[count,2]
                             xlist_aa1[count] <- i
                             xlist_freq1[count] <- freq}
  
  count=0
  for(i in df[,1]){count=count+1
                   count2=0
                   for(k in xlist_aa1){count2=count2+1
                                       if(i==k){df[count,2]<-xlist_freq1[count2]}}}
  
  count=0
  for(i in nchar_of_aa2[,1]){count=count+1
                             freq <- nchar_of_aa2[count,2]
                             xlist_aa2[count] <- i
                             xlist_freq2[count] <- freq}
  
  count=0
  for(i in df[,1]){count=count+1
                   count2=0
                   for(k in xlist_aa2){count2=count2+1
                                       if(i==k){df[count,3]<-xlist_freq2[count2]}}}
  
  df[is.na(df)] <- 0
  
  count=0
  for(i in df[,1]){
    count=count+1
    if(nchar(i)==1){
      
      paste_this <- 0
      paste_this <- as.character(paste_this)
      i <- as.character(i)
      i <- paste(paste_this,i,sep="")
      i <- as.numeric(i)
      df[count,1] <- i
      
    }
  }
  
  count_ones=0
  for(i in df[,1]){
    if(nchar(i)==1){count_ones=count_ones+1}}
  
  one_number_df <- data.frame(matrix(ncol = 3, nrow = count_ones))
  
  count=0
  count_new_df=0
  for(i in df[,1]){
    count=count+1
    if(nchar(i)==1){
      count_new_df=count_new_df+1
      one_number_df[count_new_df,] <- df[count,]}}
  
  length_of_df <- length(df[,1])
  df <- df[1:(length_of_df-count_ones),]
  df <- rbind(one_number_df,df)
  df_barplot <- t(df)
  colnames(df_barplot) = df_barplot[1, ] 
  df_barplot = df_barplot[-1, ] 
  aa_numbers <- colnames(df_barplot)
  df_barplot <- matrix(as.numeric(unlist(df_barplot)),nrow=nrow(df_barplot))
  df_barplot <- as.matrix.data.frame(df_barplot)
  colnames(df_barplot) = aa_numbers
  max_in_df <- max(df_barplot) + 5
  
  
  jpeg(file = paste("/home/emre/kmer_plots/",motif_name,"_",name1,"_",name2,"_",vid,"_",jid,"_",region,"_","barplot.jpg", sep = ""), width=700, height=480) 
  
  barplot2(df_barplot,beside=T,ylim=c(0,max_in_df),las=2,cex.axis= 0.75, cex.names = 0.75, col=c("darkblue","red"),main=main_plot,
           xlab="N amino acids",  ylab="Relative frequency (%)",legend=c(name1,name2)
           
  )
  dev.off()
  
  #print(as.matrix(df_barplot))
  
}

####################################################################################################################################################################################################

get_freq_plots_of_motifs_analyse <- function(meme_out_put_motifs,data1,data2,name1,name2,directory){
  
  #setwd(directory)
  # 1 FREQUENCY K-MER PLOTS
  # 2 AA LENGTH DISTRIBUTION PLOTS
  # 3 COMPARISON OF OCCURENCE OF MOTIF BETWEEN DATA SETS
  # 4 TSV FILE OF DATA1X AND DATA2X
  
  data1 <- get_variable_region_CDR3_aminoacids(data1)
  data2 <- get_variable_region_CDR3_aminoacids(data2)
  
  count <- 0
  
  mers <- c("monos","dis","tris","quatros")
  regions <- c("full","indel")
  types <- c("abundance","diversity")
  motif_number <- "motif_"
  
  
  # 3 COMPARISON OF OCCURENCE OF MOTIF BETWEEN DATA SETS
  #get_occurence_of_motif_in_datasets(data1,data2,meme_out_put_motifs,name1,name2)
  
  count_motif=0 ## DIT IS ALLEEN OMDAT DE EERSTE MOTIEF NIET CORRECT WAS VAN RUN1
  for(motif in meme_out_put_motifs[,1]){
    count=count+1
    count_motif=count_motif+1
    
    vid <- meme_out_put_motifs[count,2]
    jid <- meme_out_put_motifs[count,3]
    
    data1x <- subset(data1, V.gene==vid & J.gene==jid)
    data2x <- subset(data2, V.gene==vid & J.gene==jid)
    
    motif <- as.character(motif)
    data1x <- get_find_seq(data1x,motif,full_aa)
    data2x <- get_find_seq(data2x,motif,full_aa)
    
    motif_name <- paste(motif_number,count_motif,sep="")
    print(motif_name)
    
    amount_clones1 <- length(data1x$Amino.acid.sequence)
    amount_clones2 <- length(data2x$Amino.acid.sequence)
    
    # 2 AA LENGTH DISTRIBUTION PLOTS
    for(regionx in regions){
      if(amount_clones1>=1){
        if(amount_clones2>=1){
          get_aa_distr_ggplot(data1x,data2x,name1,name2,regionx,vid,jid,motif,motif_name)
        }
      }
    }
    
    # 1 FREQUENCY K-MER PLOTS
    for(merx in mers){
      for(regionx in regions){
        for(typex in types){
          
          get_frequency_plots_aminoacids_universal(data1x,data2x,name1,name2,merx,regionx,typex,"logoff",motif_name)           
        }}}   
    
    
    
  }
  
}


##################################################################################################################################################################################################################################################################################################################################################################################################################################################

get_responder_and_non <- function(data1,data2){
  
  data1 <- data1[order(data1[,1],decreasing=F),]
  data2 <- data2[order(data2[,1],decreasing=F),]
  
  count=0
  for(i in data1$Amino.acid.sequence){
    
    count=count+1
    
    df1 <- get_find_seq(data1,i,"full_aa")
    abundance1 <- sum(df1$Number.of.reads)
    
    df2 <- get_find_seq(data2,i,"full_aa")
    abundance2 <- sum(df2$Number.of.reads)
    
    
    if(abundance1<200 && abundance2<200){
      cat(i,"\n")
      write.table(sample(rep(i),replace=T),file="cat4.txt",row.names=F,quote=F,col.names=F,append=T)  
    }
    
    #print(count)
    #if(count==500){
    #  return("STOP")
    #}
  }
  
}

################################################################################################################################################################################################################################################################################################################################################################################

get_dfs <- function(data,cdr3s){
  
  count=0
  
  for(i in cdr3s){
    count=count+1
    if(count==1){
      df <- get_find_seq(data,i,"full_aa")
    }
    
    df2 <- get_find_seq(data,i,"full_aa")
    df <- rbind(df,df2)
    a <- count/length(cdr3s)*100
    print(a)
    
  }
  return(df)
}

################################################################################################################################################################################################################################################################################################################################################################################

get_table_immunoseq <- function(data,name,tb,indel_specific){  #name is for label the TCR clones, lib.
  results_end <- read.table(data,header=T,sep="\t",quote="",stringsAsFactors=F)
  results_end <- as.data.frame(results_end)
  
  if(tb=="tb"){
    results_end <- read.table(data,header=F,sep="\t",quote="",stringsAsFactors=F)
    results_end <- as.data.frame(results_end)
    colnames(results_end) <- results_end[1,]
    results_end <- results_end[-1,]
  }
  
  v_name <- results_end$vGeneName
  v_name <- substr(v_name,1,10)
  j_name <- results_end$jGeneName
  j_name <- substr(j_name,1,10)
  
  colnames(results_end)[colnames(results_end)=="count..reads."] <- "Number.of.reads"
  colnames(results_end)[colnames(results_end)=="aminoAcid"] <- "Amino.acid.sequence"
  colnames(results_end)[colnames(results_end)=="vGeneName"] <- "V.gene"
  results_end$V.gene <- v_name
  colnames(results_end)[colnames(results_end)=="jGeneName"] <- "J.gene"
  results_end$J.gene <- j_name
  colnames(results_end)[colnames(results_end)=="nucleotide"] <- "Junction.nucleotide.sequence"
  colnames(results_end)[colnames(results_end)=="dGeneName"] <- "D.gene"
  colnames(results_end)[colnames(results_end)=="vIndex"] <- "V.gene.start.position"
  colnames(results_end)[colnames(results_end)=="jIndex"] <- "J.gene.start.position"
  colnames(results_end)[colnames(results_end)=="cdr3Length"] <- "J.gene.end.position"  
  colnames(results_end)[colnames(results_end)=="sequenceStatus"] <- "Frame"
  colnames(results_end)[colnames(results_end)=="frequencyCount...."] <- "Relative.frequency.percentage"
  
  data <- results_end
  
  count_vgene = 0
  for(i in data$V.gene){
    count_vgene = count_vgene + 1
    if(i=="unresolved"){
      i <- data[count_vgene,"vFamilyName"]
      data[count_vgene,"V.gene"] <- i
    }
  }
  
  count_jgene = 0
  for(i in data$J.gene){
    count_jgene = count_jgene + 1
    if(i=="unresolved"){
      i <- data[count_jgene,"vFamilyName"]
      data[count_jgene,"V.gene"] <- i
    }
  }
  
  data$vMaxResolved <- NULL
  data$vFamilyName <- NULL
  data$vGeneAllele <- NULL
  data$vFamilyTies <- NULL
  data$vGeneNameTies <- NULL
  data$vGeneAlleleTies <- NULL
  data$dMaxResolved <- NULL
  data$dFamilyName <- NULL
  data$dGeneAllele <- NULL
  data$dFamilyTies <- NULL
  data$dGeneNameTies <- NULL
  data$dGeneAlleleTies   <- NULL
  data$jMaxResolved  <- NULL
  data$jFamilyName <- NULL    
  data$jGeneAllele <- NULL
  data$jFamilyTies <- NULL  
  data$jGeneNameTies <- NULL  
  data$jGeneAlleleTies <- NULL
  data$estimatedNumberGenomes <- NULL
  data$vOrphon <- NULL
  data$dOrphon <- NULL  
  data$jOrphon <- NULL  
  data$vFunction <- NULL	
  data$dFunction <- NULL	
  data$jFunction <- NULL	
  data$fractionNucleated <- NULL
  data$cloneResolved <- NULL
  
  
  data<-as.data.frame(data)
  data$Number.of.reads <- as.integer(data$Number.of.reads)
  data<-get_filter_immunoseq(data)
  data<-get_relative_abundance_frequency_column(data)
  
  data$vDeletion <- as.numeric(data$vDeletion)
  data$n1Insertion	<- as.numeric(data$n1Insertion)
  data$d5Deletion	<- as.numeric(data$d5Deletion)
  data$d3Deletion	<- as.numeric(data$d3Deletion)
  data$n2Insertion	<- as.numeric(data$n2Insertion)
  data$jDeletion<- as.numeric(data$jDeletion)
  
  get_indel_region <- function(x){
    data$N1.nucleotide.sequence <- ""
    data$N1.amino.acid.sequence <- ""
    data$D.gene.nucleotide.sequence <- ""
    data$D.gene.amino.acid.sequence <- ""
    data$N2.nucleotide.sequence <- ""
    data$N2.amino.acid.sequence <- ""
    data$V.gene.end.position <- ""
    count=0
    for(i in data$Junction.nucleotide.sequence){
      count=count+1
      v.end <- as.numeric(data[count,'n1Index']) - 1
      if(v.end==-2){v.end <- as.numeric(data[count,'dIndex'])-1}
      if(v.end==-2){v.end <- as.numeric(data[count,'n2Index'])-1}
      if(v.end==-2){v.end <- as.numeric(data[count,'J.gene.start.position'])-1}
      data[count,'V.gene.end.position'] <- v.end
      j.start <- as.numeric(data[count,'J.gene.start.position'])
      backup_j.start <- j.start
      n1index <- as.numeric(data[count,'n1Index'])
      backup_n1index <- n1index
      n2index <- as.numeric(data[count,'n2Index'])
      backup_n2index <- n2index
      dindex <- as.numeric(data[count,'dIndex'])
      backup_dindex <- dindex
      dindex2 <- dindex - 1
      
      if(n1index>0){data[count,'N1.nucleotide.sequence'] <- substr(i,n1index,dindex2)}
      if(dindex>0){if(dindex!=j.start){data[count,'D.gene.nucleotide.sequence']<-substr(i,dindex,(n2index-1))}}
      
      if(n2index>0){j.start <- j.start - 1
                    data[count,'N2.nucleotide.sequence'] <- substr(i,n2index,j.start)}  
      
      # GET N1 AMINO ACIDS
      if(n1index>0){if(dindex>0){
        n1index <- n1index - as.numeric(data[count,'V.gene.start.position'])
        dindex <- dindex - 1 - as.numeric(data[count,'V.gene.start.position'])
        n1_begin_aa_cut <- ceiling(n1index/3)    
        n1_end_aa_cut <- ceiling(dindex/3)
        n1_end_aa_cut2 <- dindex/3
        if(n1_begin_aa_cut!=n1_end_aa_cut){if(nchar(n1_end_aa_cut2)<3){if(n1_end_aa_cut2!=n1_end_aa_cut){n1_end_aa_cut<-n1_end_aa_cut-1}}}
        data[count,'N1.amino.acid.sequence'] <- substr(data[count,'Amino.acid.sequence'],n1_begin_aa_cut,n1_end_aa_cut)}}
      
      j.start <- backup_j.start
      n1index <- backup_n1index
      n2index <- backup_n2index
      dindex <- backup_dindex 
      
      # GET D AMINO ACIDS
      if(dindex>0){
        if(n2index>0){
          dindex <- dindex - as.numeric(data[count,'V.gene.start.position'])
          n2index <- n2index - 1 - as.numeric(data[count,'V.gene.start.position'])
          d_begin_aa_cut <- ceiling(dindex/3)    
          d_end_aa_cut <- ceiling(n2index/3)
          d_end_aa_cut2 <- n2index/3
          if(d_begin_aa_cut!=d_end_aa_cut){if(nchar(d_end_aa_cut2)<3){if(d_end_aa_cut2!=d_end_aa_cut){d_end_aa_cut<-d_end_aa_cut-1}}}
          data[count,'D.gene.amino.acid.sequence'] <- substr(data[count,'Amino.acid.sequence'],d_begin_aa_cut,d_end_aa_cut)}
        if(n2index<0){
          dindex <- dindex - as.numeric(data[count,'V.gene.start.position'])
          j.start <- j.start - 1 - as.numeric(data[count,'V.gene.start.position'])
          d_begin_aa_cut <- ceiling(dindex/3)    
          d_end_aa_cut <- ceiling(j.start/3)
          d_end_aa_cut2 <- j.start/3
          if(d_begin_aa_cut!=d_end_aa_cut){if(nchar(d_end_aa_cut2)<3){if(d_end_aa_cut2!=d_end_aa_cut){d_end_aa_cut<-d_end_aa_cut-1}}}
          data[count,'D.gene.amino.acid.sequence'] <- substr(data[count,'Amino.acid.sequence'],d_begin_aa_cut,d_end_aa_cut)}}
      
      j.start <- backup_j.start
      n1index <- backup_n1index
      n2index <- backup_n2index
      dindex <- backup_dindex 
      
      # GET N2 AMINO ACIDS
      if(n2index>0){if(j.start>0){
        n2index <- n2index - as.numeric(data[count,'V.gene.start.position'])
        j.start <- j.start - 1 - as.numeric(data[count,'V.gene.start.position'])
        n2_begin_aa_cut <- ceiling(n2index/3)    
        n2_end_aa_cut <- ceiling(j.start/3)
        n2_end_aa_cut2 <- j.start/3
        if(n2_begin_aa_cut!=n2_end_aa_cut){if(nchar(n2_end_aa_cut2)<3){if(n2_end_aa_cut2!=n2_end_aa_cut){n2_end_aa_cut<-n2_end_aa_cut-1}}}
        data[count,'N2.amino.acid.sequence'] <- substr(data[count,'Amino.acid.sequence'],n2_begin_aa_cut,n2_end_aa_cut)}}
      
    }
    
    data<-data[,c("Number.of.reads","Amino.acid.sequence","Junction.nucleotide.sequence","Relative.frequency.percentage","Frame","V.gene","D.gene","J.gene","vDeletion","n1Insertion","d5Deletion","d3Deletion","n2Insertion","jDeletion","V.gene.start.position","V.gene.end.position","n1Index","dIndex","n2Index","J.gene.start.position","J.gene.end.position","N1.nucleotide.sequence","D.gene.nucleotide.sequence","N2.nucleotide.sequence","N1.amino.acid.sequence","D.gene.amino.acid.sequence","N2.amino.acid.sequence")]
    
    data$Length.N1.nucleotide.sequence <- nchar(data$N1.nucleotide.sequence)
    data$Length.D.gene.nucleotide.sequence <- nchar(data$D.gene.nucleotide.sequence)
    data$Length.N2.nucleotide.sequence <- nchar(data$N2.nucleotide.sequence)
    data$Length.N1.amino.acid.sequence <- nchar(data$N1.amino.acid.sequence)
    data$Length.D.gene.amino.acid.sequence <- nchar(data$D.gene.amino.acid.sequence)
    data$Length.N2.amino.acid.sequence <- nchar(data$N2.amino.acid.sequence)
  }
  
  if(indel_specific=="on"){get_indel_region(x)}
  if(indel_specific!="on"){data<-data[,c("Number.of.reads","Amino.acid.sequence","Junction.nucleotide.sequence","Relative.frequency.percentage","Frame","V.gene","D.gene","J.gene","V.gene.start.position","J.gene.start.position" )]}
  
  data$lib <- name
  cat("Adaptive immunoseq data named ",name," is loaded.\n",sep="")
  return(data)
}

##########################################################


get_filter_immunoseq <- function(data){
  data<-subset(data,Frame=="In")
  colnames(data)[colnames(data)=="Relative.frequency.(%)"] <- "Relative.frequency.percentage"
  reads <- sum(data$Number.of.reads)
  data$Relative.frequency.percentage <- data$Number.of.reads/reads*100
  data$V.gene <- str_replace_all(data$V.gene,"C","")
  data$D.gene <- str_replace_all(data$D.gene,"C","")
  data$J.gene <- str_replace_all(data$J.gene,"C","")
  print("Filter done.")
  return(data)}

#####

get_del <- function(data,data2){
  count=0
  count2=0
  length_of_clones <- length(data[,1])
  seqs <- data.frame(matrix(ncol = 1, nrow = length_of_clones))
  for(i in data$Junction.nucleotide.sequence){
    count=count+1
    if(data[count,'n1Index']>0){
      count2=count2+1
      last.v <- data[count,'V.gene.end.position']
      begin.n1 <- data[count,'n1Index']
      seq <- substr(i,last.v,begin.n1)
      seqs[count2,1] <- seq
    }
  }
  
  count=0
  count2=0
  length_of_clones <- length(data2[,1])
  seqs2 <- data.frame(matrix(ncol = 1, nrow = length_of_clones))
  for(i in data2$Junction.nucleotide.sequence){
    count=count+1
    if(data2[count,'n1Index']>0){
      count2=count2+1
      last.v <- data2[count,'V.gene.end.position']
      begin.n1 <- data2[count,'n1Index']
      seq <- substr(i,last.v,begin.n1)
      seqs2[count2,1] <- seq
    }
  }
  
  seqs <- table(seqs)
  seqs2 <- table(seqs2)
  seqs <- seqs/sum(seqs)*100
  seqs2 <- seqs2/sum(seqs2)*100
  seqs <- as.data.frame(seqs)
  seqs2 <- as.data.frame(seqs2)
  seqs[,3]<-seqs2[,2]
  seqs$mean <- (seqs[,2]+seqs[,3])/2
  
  print(seqs)
  
  
  #return(seqs)
}


#do odds ratio on these nucleotides, really random or selection ????



get_tumor_del <- function(data1,data2,motifs){
  
  backup1 <- data1
  backup2 <- data2
  
  ab_tumor <- sum(data1$Number.of.reads)
  div_tumor <- length(unique(data1$Amino.acid.sequence))
  
  ab_mucosa <-sum(data2$Number.of.reads)
  div_mucosa <- length(unique(data2$Amino.acid.sequence))
  
  count=0
  for(i in motifs[,1]){
    data1 <- backup1
    data2 <- backup2
    count=count+1
    
    vid<-motifs[count,2]
    jid<-motifs[count,3]
    i <- as.character(i)
    vid<-as.character(vid)
    jid<-as.character(jid)
    #data1 <- get_find_seq(data1,i,"full_aa")
    #data2 <- get_find_seq(data2,i,"full_aa")
    data1 <- subset(data1,V.gene==vid)
    data1 <- subset(data1,J.gene==jid)
    data2 <- subset(data2,V.gene==vid)
    data2 <- subset(data2,J.gene==jid)
    
    
    ab1 <- get_check_motif(data1,data1,i,"full_aa","abundance")
    ab2 <- get_check_motif(data2,data2,i,"full_aa","abundance")
    div1 <- get_check_motif(data1,data1,i,"full_aa","diversity")
    div2 <- get_check_motif(data2,data2,i,"full_aa","diversity")
    
    
    if(length(unique(data1$Amino.acid.sequence))>=10){
      
      if(ab1>80){
        if(div1>50){
          
          cat("\n[1] motif",count,i)
          cat("\n[2]Tumor Abundance: ",ab1)
          cat("\n[3]Mucosa Abundance: ",ab2)
          cat("\n[4]Tumor Diversity: ",div1)
          cat("\n[5]Mucosa Diversity: ",div2,"\n")
          
        }
      }
    }
  }
  
}

get_read_multiple_results <- function(x){ #read all results.tsv in a dir.
  
  count=0
  for(i in list.files(path=getwd())){
    if(i != "error_col" && i != "good"){
      print(i)
      count=count+1
      if(count==1){
        first<-get_table_immunoseq(i,i,"","")}
      if(count!=1){
        second <- get_table_immunoseq(i,i,"","")
        first <- rbind(first,second)
      }    
    }
  }
  return(first)
}

############################

get_epitope_test <- function(data,epitopes){
  
  for(i in epitopes){
    
    length_i <- nchar(i)
    
    zovaak <- length_i - 9
    
    if(zovaak>=1){mylist <- seq(1,zovaak,by=2)}
    
    for(k in 1:mylist){
      print(k)
      
    }
    print("done")
    
    print(zovaak)
    
  }
}

#######################

get_del <- function(data1,data2,motifs){
  
  df <- data.frame(matrix(ncol=1,nrow=length(motifs[,1])))
  colnames(df)[colnames(df)=="X1"] <- "motifs"  
  df$tumor_abundance <- ""
  df$pbmc_abundance <- ""
  df$tumor_diversity <- ""
  df$pbmc_diversity <- ""
  df$V.gene <- ""
  df$J.gene <- ""
  df$sum.Relative.fre.of.fam <- ""
  
  backup1 <- data1
  backup2 <- data2
  
  count=0
  for(i in motifs[,1]){
    
    i <- chartr("x",".",i)
    
    data1 <- backup1
    data2 <- backup2
    
    count=count+1
    v.gene <- motifs[count,2]
    j.gene <- motifs[count,3]
    
    data1 <- subset(data1, V.gene==v.gene)
    data1 <- subset(data1, J.gene==j.gene)    
    data2 <- subset(data2, V.gene==v.gene)
    data2 <- subset(data2, J.gene==j.gene)
    
    data1_ab <- sum(data1$Number.of.reads)
    data2_ab <- sum(data2$Number.of.reads)
    data1_div <- length(unique(data1$Amino.acid.sequence))
    data2_div <- length(unique(data2$Amino.acid.sequence))
    
    data2 <- get_find_seq(data2,i,"full_aa")
    data1 <- get_find_seq(data1,i,"full_aa")
    
    ab1 <- sum(data1$Number.of.reads)/data1_ab*100
    ab2 <- sum(data2$Number.of.reads)/data2_ab*100
    div1 <- length(unique(data1$Amino.acid.sequence))/data1_div*100
    div2 <- length(unique(data2$Amino.acid.sequence))/data2_div*100
    
    df[count,1] <- i
    df[count,2] <- ab1
    df[count,3] <- ab2
    df[count,4] <- div1
    df[count,5] <- div2
    df[count,6] <- v.gene
    df[count,7] <- j.gene
    
  }  
  
  df <- subset(df, df[,1]!="CAS")
  df <- subset(df, pbmc_abundance!=100)
  df <- subset(df, pbmc_abundance<=50)
  df[is.na(df)] <- 0
  df$tumor_abundance <- as.integer(df$tumor_abundance)
  df <- (df[order(df[,2],decreasing=T),])
  df <- get_relativefreq(df,data1)
  return(df)
}

###############################

get_relativefreq <- function(x,x2){
  df <- x
  backup1 <- x
  backup2 <- x2
  count=0
  for(i in x[,1]){
    print(i)
    x <- backup1
    x2 <- backup2
    count=count+1
    v.gene <- x[count,'V.gene']
    j.gene <- x[count,'J.gene']
    x2 <- get_find_seq(x2,i,full_aa)
    x2 <- subset(x2,V.gene==v.gene)
    x2 <- subset(x2,J.gene==j.gene)
    freq <- sum(x2[,4])
    df[count,8] <- freq
  }
  return(df)}

###############################

get_abundance_clones <- function(data){
  
  backup <- data
  clones <- unique(data$Amino.acid.sequence)
  df <- data.frame(matrix(ncol=2,nrow=length(clones)))
  total_freq <- sum(data[,4])
  
  count=0
  for(i in clones){
    data <- backup
    freq <- 0
    count=count+1
    sub_x <- get_find_seq(data,i,"full_aa")
    freq <- sum(sub_x[,4])
    freq <- freq/total_freq
    df[count,1] <- i
    df[count,2] <- freq
  }
  return(df)
}

###########################################


get_del9 <- function(x){ #read all results.tsv in a dir.
  
  count=0
  for(i in list.files(path=getwd())){
    count=count+1
    if(i=="rawoutput.tsv"){
      print("A")
      if(count==1){
        #first <- get_motifs_meme_pipe(i)
        print("dtis1")
      }
      if(count!=1){
        second <- get_motifs_meme_pipe(i)
        #first <- rbind(first,second)
      }
      
    }
    
  }
  
  #a <- tapply(first[,1],first[,1],sum)
  
  return()}

###########################################

get_abc <- function(x){
  
  df <- data.frame(matrix(ncol=1,nrow=8000))
  x <- as.data.frame(x)
  count=1
  for(i in x[,2]){
    count=count+1
    length_i <- nchar(i) - 1
    k <- substr(i,1,length_i)
    df[count,1] <- k}
  df<-df[2:8001,]
  x[,2]<-df
  
  return(x)
}

######################################

get_abc2 <- function(x){
  alist <- c(4,5,6,7,8,9,10,11,12,13,14)
  for(i in alist){ 
    x[,i] <- paste(x[,i],",",sep="")
  }
  return(x)
}

############################################

get_CDR3_for_atchley_vjsep <- function(data1,name1,region){
  backup1 <- data1
  unique_v <- unique(data1$V.gene)
  unique_j <- unique(data1$J.gene)
  count <- 0
  
  for(one_v in unique_v){
    count <- count + 1
    data1 <- backup1
    one_v <- unique_v[count]
    print(one_v)
    
    for(one_j in unique_j){
      
      data1 <- backup1
      data1 <- subset(data1, V.gene==one_v & J.gene==one_j)
      data1 <- data1[1:1000,]
      
      if(region=="full_aa"){column <- data1$Amino.acid.sequence} 
      if(region=="indel_aa"){column <- data1$Variable.region.amino.acid.sequence}
      if(region=="full_nt"){column <- data1$Junction.nucleotide.sequence}
      if(region=="indel_nt"){column <- data1$Variable.region.nucleotide.sequence}
      
      length_of_column <- length(column)
      
      if(length_of_column>2){      
        for(i in column){
          
          if(nchar(i)>5){
            seq <- i
            write_this <- paste(seq,sep="")
            write.table(sample(rep(write_this),replace=T),file=paste(name1,"_",one_v,"_",one_j,".fasta",sep=""),row.names=F,quote=F,col.names=F,append=T)      
            
          }}}}}
  
  cat("Fasta file is saved in:",getwd())
}

#######################################

get_CDR3_for_atchley <- function(data1,name1,region){
  if(region=="full_aa"){column <- data1$Amino.acid.sequence} 
  if(region=="indel_aa"){column <- data1$Variable.region.amino.acid.sequence}
  for(i in column){if(nchar(i)>5){write.table(sample(rep(i),replace=T),file=paste(name1,".fasta",sep=""),row.names=F,quote=F,col.names=F,append=T)}}
  cat("Fasta file is saved in:",getwd())}

#######################################

get_ <- function(x){
  count=0
  for(i in 1:615){
    name <- ""
    count=count+1
    name <- paste("pemcx",count,"_vector",sep="")
    name2 <- paste("pemcx",count,sep="")
    cat(name," <- get_contig_atchley(",name2,")\n",sep="")
  }
}

#######################################

get_contig_atchley <- function(data1){
  df <- colSums(data1)
  df<-as.data.frame(df)
  total <- sum(df[,1])
  df$relative <- ""
  count=0
  for(i in df[,1]){count=count+1
                   df[count,2] <- i/total*100}
  df[,2] <- as.numeric(df[,2])
  df_vector <- as.vector(df[,2])
  return(df_vector)
}

#######################################

# to rbind the vectors into a matrix for Dist. function

get_del2 <- function(x){ 
  count=400
  df <- matrix(nrow=1,ncol=100)
  for(i in 1:300){
    name <- ""
    count=count+1
    name <- paste("pemcx",count,"_vector,",sep="")
    cat(name)
  }
}

#######################################

get_CDR3_groupbased <- function(data,amino_acid_group){
  
  backup <- data
  new_aas <- amino_acid_group
  data$CDR3_cluster_aa <- ""
  
  amount_CDR3 <- length(data$Amino.acid.sequence)
  
  for(i in 1:amount_CDR3){
    seq <- data[i,"Amino.acid.sequence"]
    length_seq <- nchar(seq)
    new_seq <- ""
    
    for(k in 1:length_seq){
      old_aa <- substr(seq,k,k)
      find_group_for_old_aa <- new_aas[grep(old_aa,new_aas[,2]),]
      replace_aa <- find_group_for_old_aa[,3]
      new_seq <- paste(new_seq,replace_aa,sep="",collapse=NULL)   
    }
    data[i,"CDR3_cluster_aa"] <- new_seq
    
  }
  print("DONE: CDR3 clones translated into new set of amino acids.")
  return(data)
}



########################################################3

get_occurence_of_motif_group_aa<- function(data1,data2,output_rfunction_meme_pipe,region,type_subset){  #group_aa
  #type subset = genes or group_aa
  df <- data.frame(matrix(ncol=1,nrow=length(output_rfunction_meme_pipe[,1])))
  count=0
  
  for(i in output_rfunction_meme_pipe[,1]){
    count=count+1
    
    i <- chartr("x",".",i) 
    
    data1x <- data1
    data2x <- data2
    
    if(type_subset == "genes"){
      vid <- output_rfunction_meme_pipe[count,2]
      jid <- output_rfunction_meme_pipe[count,3]
      data1x <- subset(data1, V.gene==vid)
      data1x <- subset(data1x, J.gene==jid)
      data2x <- subset(data2, V.gene==vid)
      data2x <- subset(data2x, J.gene==jid)}
    
    if(type_subset == "group_aa"){
      group <- output_rfunction_meme_pipe[count,3]
      data1x <- subset(data1x, group_cluster==group)
      data2x <- subset(data2x, group_cluster==group)
    }
    
    tab1 <- sum(data1x$Number.of.reads)
    tab2 <- sum(data2x$Number.of.reads)
    tdiv1 <- length(unique(data1x$Amino.acid.sequence))
    tdiv2 <- length(unique(data2x$Amino.acid.sequence))
    
    data1x <- get_find_seq(data1x,i,region)
    data2x <- get_find_seq(data2x,i,region)
    
    nab1 <- sum(data1x$Number.of.reads)
    ndiv1 <- length(unique(data1x[,1]))
    nab2 <- sum(data2x$Number.of.reads)
    ndiv2 <- length(unique(data2x[,1]))
    
    ab1 <- sum(data1x$Number.of.reads)/tab1*100
    div1 <- length(unique(data1x[,1]))/tdiv1*100
    ab2 <- sum(data2x$Number.of.reads)/tab2*100
    div2 <- length(unique(data2x[,1]))/tdiv2*100
    
    if(ab1!=100){ab1<-format(ab1, digits=2, nsmall=2)}
    if(ab2!=100){ab2<-format(ab2, digits=2, nsmall=2)}
    if(div1!=100){div1<-format(div1, digits=2, nsmall=2)}
    if(div2!=100){div2<-format(div2, digits=2, nsmall=2)}
    
    #if(type_subset == "genes"){cat("\n",count,"Motif ",i,vid,"\t",jid,"\n","RES AB:",ab1,"\tRES DIV:",div1,"\n","NON AB:",ab2,"\tNON DIV:",div2,"\n")}
    #if(type_subset == "group_aa"){cat("\n",count,"Motif ",i,"group",group,"\n","RES AB:",ab1,"\tRES DIV:",div1,"\n","NON AB:",ab2,"\tNON DIV:",div2,"\n")}
    
    if(type_subset == "genes"){cat("\n",i,"\t",vid,"\t",jid,"\t",ab1,"\t",ab2,"\t",div1,"\t",div2)}
    if(type_subset == "group_aa"){cat("\n",i,"\t","\t","\t",ab1,"\t",ab2,"\t",div1,"\t",div2)}
  }
}


##################################

# ZET AAN OM VIJF UUR
# get_occurence_of_motif_in_datasets(run8_responder_data_frame,run8_non_responder_data_frame,run8_motifs,"run8_responder","run8_non_responder",amino_acid_5group)
# get_occurence_of_motif_in_datasets(run9_responder_data_frame,run9_non_responder_data_frame,run9_motifs,"run9_responder","run9_non_responder",amino_acid_6group)
# get_occurence_of_motif_in_datasets(run10_responder_data_frame,run10_non_responder_data_frame,run10_motifs,"run10_responder","run10_non_responder",amino_acid_9group)

################################################

get_del12 <- function(x){
  df <- data.frame(matrix(ncol=3,nrow=615))
  begin=0
  count1=1
  count2=2
  count3=3
  for(i in x[,1]){
    begin=begin+1
    if(begin==1){
      c <- x[3,1]
      line <- paste(c) #a,b,
      line <- substr(line,26,47)        
      line <- strsplit(line,"_")        
      line <- line[[1]]        
      vgene <- line[1]
      jgene <- line[2]
      jgene <- strsplit(jgene,"\\.")
      jgene <- jgene[[1]]
      jgene <- jgene[1]
      df[begin,1] <- "pemcx1_vector"
      df[begin,2] <- vgene
      df[begin,3] <- jgene}
    if(begin>1){
      if(begin<=615){
        count1=count1+3
        count2=count2+3
        count3=count3+3
        a <- x[count1,1]
        b <- x[count2,1]
        c <- x[count3,1]
        line <- paste(c) #a,b        
        line <- substr(line,26,47)        
        line <- strsplit(line,"_")        
        line <- line[[1]]        
        vgene <- line[1]
        jgene <- line[2]
        jgene <- strsplit(jgene,"\\.")
        jgene <- jgene[[1]]
        jgene <- jgene[1]
        df[begin,1] <- paste("pemcx",begin,"_vector",sep="")
        df[begin,2] <- vgene
        df[begin,3] <- jgene}}}
  return(df)}

###################################################################

get_group_cluster <- function(x){
  column <- data.frame(matrix(ncol=1,nrow=length(x[,1])))
  count=0
  for(v in x$V.gene){
    count=count+1
    df <- subset(pemcxnumbers_and_genes, X2==v)
    if(length(df[,1]>=1)){
      j <- x[count,"J.gene"]
      df <- subset(df, X3==j)
      if(length(df[,1]>=1)){
        column[count,] <- as.integer(df[,4])
      }
    }
  }
  x$group_cluster <- column[,1]
  return(x)
}

###############

get_fasta_file_group_clusters <- function(data1,name1,region,length,maxsize){  
  unique_question <- "yes"
  backup1 <- data1
  unique_group <- unique(data1$group_cluster)
  count <- 0 
  for(one_group in unique_group){
    data1 <- backup1
    data1 <- subset(data1, group_cluster==one_group)
    data1 <- data1[1:1000,]
    if(region=="full_aa"){column <- data1$Amino.acid.sequence} 
    if(region=="indel_aa"){column <- data1$Variable.region.amino.acid.sequence}
    if(region=="full_nt"){column <- data1$Junction.nucleotide.sequence}
    if(region=="indel_nt"){column <- data1$Variable.region.nucleotide.sequence}
    if(region=="group_aa"){column <- data1$CDR3_cluster_aa}
    if(unique_question=="yes"){column <- unique(column)}
    sequence_no <- 0
    new_line <- "\n"
    length_of_column <- length(column)
    if(length_of_column>2){      
      for(i in column){
        sequence_no <- sequence_no + 1
        length_of_seq <- nchar(i)
        if(length_of_seq >= length){    # MEME allows only sequence with minimal n = 8
          seq <- i
          write_this <- paste(">NO_",sequence_no,"|length=",length_of_seq,"|",new_line,seq,sep="")
          write.table(sample(rep(write_this),replace=T),file=paste(name1,"_group_",one_group,".fasta",sep=""),row.names=F,quote=F,col.names=F,append=T)      
          if(sequence_no==maxsize){
            cat("reached more than 1000 clones")}}}}}
  cat("Fasta file is saved in:",getwd())
}

##############################################################################

get_values_for_PCA <- function(data,aminoacids_groups){
  data <- get_CDR3_groupbased(data,aminoacids_groups)
  row_length <- length(data[,1])  
  df <- data.frame(matrix(ncol=length(aminoacids_groups[,1])+1,nrow=row_length))  
  df$X1 <- data$CDR3_cluster_aa
  df <- as.data.frame(df)
  count=0
  count2=1
  aminoacids_letters <- c()
  for(i in aminoacids_groups[,3]){count=count+1
                                  count2=count2+1    
                                  names(df)[count2] <- as.character(i)
                                  aminoacids_letters <- c(aminoacids_letters,i)}  
  count=0
  for(i in df[,1]){mono_aminoacids <- rep(0,length(aminoacids_letters))
                   names(mono_aminoacids) <- aminoacids_letters
                   count=count+1
                   total_elements <- c(0,0,0)
                   length_of_seq <- nchar(i)
                   for(k in 1:length_of_seq){mono_aminoacids[[substr(i, k, k)]] = mono_aminoacids[[substr(i, k, k)]] + 1
                                             total_elements[1] <- total_elements[1]+1}
                   mono_aminoacids_count <- mono_aminoacids / total_elements[1]
                   monos <- as.data.frame(mono_aminoacids_count)
                   sum_percentages_of_all_aminoacids_groups<-sum(monos[,1])
                   stopifnot(sum_percentages_of_all_aminoacids_groups>0.95)    
                   count_aa=1
                   for(i in monos[,1]){count_aa=count_aa+1
                                       df[count,count_aa] <- as.numeric(i)*100}}  
  return(df)
}

#########################################

# adjust the parameter ngroups, use screetimeplot to decide how many groups must be made based on the cluster dendrogram. BRAM.

get_PCA <- function(responder,non,nclones,ngroups,aminoacids_groups){
  backup_res <- responder
  backup_non <- non    
  responder$Number.of.reads <- responder[,"Number.of.reads"]
  responder$Amino.acid.sequence <- backup_res[,"Amino.acid.sequence"]
  non$Number.of.reads <- non[,"Number.of.reads"]
  non$Amino.acid.sequence <- backup_non[,"Amino.acid.sequence"]  
  a <- tapply(responder$Number.of.reads,responder$Amino.acid.sequence,sum)
  a <- as.data.frame(a)
  rank_resp <- (a[order(a[,1],decreasing=T),])  
  b <- tapply(non$Number.of.reads,non$Amino.acid.sequence,sum)
  b <- as.data.frame(b)
  b <- subset(b,b>=10)
  rank_non <- (b[order(b[,1],decreasing=F),])  
  rank_resp <- as.data.frame(rank_resp)
  rank_non <- as.data.frame(rank_non)  
  df_res <- rank_resp[1:nclones,]    
  df_non <- rank_non[1:nclones,] 
  
  #df_res<-as.data.frame(df_res)
  #df_non<-as.data.frame(df_non)
  #abc1 <- df_res  # voor usratio clonalsize
  #abc2 <- df_non
  #vec<-c()
  #for(i in abc1){vec<-c(vec,i)}
  #return(vec)
  
  df_res <- rownames(df_res)
  df_non <- rownames(df_non)
  df_res <- as.data.frame(df_res)
  df_non <- as.data.frame(df_non)
  colnames(df_res)[colnames(df_res)=="df_res"] <- "Amino.acid.sequence"
  colnames(df_non)[colnames(df_non)=="df_non"] <- "Amino.acid.sequence"
  df_res[,1] <- as.vector(df_res[,1])
  df_non[,1] <- as.vector(df_non[,1])
  seqss <- rbind(df_res,df_non)
  df_res <- get_values_for_PCA(df_res,aminoacids_groups)
  df_res$clone_group <- "Responder"
  df_non <- get_values_for_PCA(df_non,aminoacids_groups)
  df_non$clone_group <- "Non-responder"
  counts <- rbind(df_res,df_non)
  clone_groups <- counts$clone_group
  counts <- as.matrix.data.frame(counts)
  sequences_of_clones <- counts[,1] ##### sequences_of_clones dit zijn de Amino.acid.sequence s
  #return(sequences_of_clones)
  aantal_columns <- length(colnames(counts))-1
  df <- counts[,2:aantal_columns]
  rownames(df) <-  seq(1,nclones*2,by=1)
  class(df) <- "numeric"
  pca1 = prcomp(df, scale. = TRUE)
  cat("\nGeneral information of function PCA:\n")
  print(pca1)
  cat("\nSummary of PCA model:\n")
  print(summary(pca1))
  
  variances <- pca1$sdev^2 / sum(pca1$sdev^2)*100
  total_variances <- 0
  done <- ""
  howmany_pcs <- 0
  for(i in 1:ncol(pca1$x)){add_variance <- variances[1]
                           total_variances <- total_variances + add_variance
                           if(total_variances>=85){if(done!="done"){howmany_pcs <- i
                                                                    done <- "done"
                                                                    cat("\n")
                                                                    print(paste("First",i,"Principle Component(s) cover >85% variability of the data and will be used for further analysis."))}}}
  
  if(howmany_pcs>3){print("ERROR: SCRIPT WILL NOT PLOT ABOVE PC3. (under construction)")}
  combn_matrix <- as.data.frame(combn(howmany_pcs,2))
  
  #  ### PLOT VARIANCES, TO DECIDE WHICH PCs RETAIN FOR FURTHER ANALYSIS. LOOK WHICH PCs HAVE MOST VARIABILITY IN DATA. ####
  function_plot1 <- function(x){
    g2 <- plot(pca1, type = "l", main="PCA plot - Variances")
    print(g2)}
  
  # ### PLOT THE FIRST THREE PCs + circles
  function_plot2 <- function(x){
    scores <- data.frame(df, pca1$x[,1:3])
    pc1.2 <- qplot(x=PC1, y=PC2, data=scores, colour=clone_groups)  
    legend <- get_legend(pc1.2)
    pc1.2 <- pc1.2 + theme(legend.position="none") 
    pc1.3 <- qplot(x=PC1, y=PC3, data=scores, colour=clone_groups)  + theme(legend.position="none")
    pc2.3 <- qplot(x=PC2, y=PC3, data=scores, colour=clone_groups)  + theme(legend.position="none")
    
    loadings <- data.frame(pca1$rotation, .names = row.names(pca1$rotation))
    theta <- seq(0,2*pi,length.out = 100)
    circle <- data.frame(x = cos(theta), y = sin(theta))
    p1.2 <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) + coord_fixed(ratio=1) + labs(x = "PC1", y = "PC2") 
    legend_circle <- get_legend(p1.2)
    p1.2 <- p1.2 + theme(legend.position="none") 
    p1.3 <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC1, y = PC3, label = .names, colour = .names)) + coord_fixed(ratio=1) + labs(x = "PC1", y = "PC3") + theme(legend.position="none") 
    p2.3 <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC2, y = PC3, label = .names, colour = .names)) + coord_fixed(ratio=1) + labs(x = "PC2", y = "PC3") + theme(legend.position="none") 
    
    grid.arrange(pc1.2, pc1.3, pc2.3, legend, p1.2, p1.3, p2.3, legend_circle, ncol=4, nrow=2)#, widths=c(2.3, 2.3, 2.3, 0.8, 2.3, 2.3, 2.3, 0.8))
    
  }
  
  # ### PLOT AMINO ACIDS RATIO, BASED ON THE PERCENTAGES.  # NU NOG ALLEEN OP U EN S , MAAK FOR LOOP FOR ALLE AMINO ACIDS. CHANGE AANGEGEVEN MET #
  function_plot3 <- function(x){
    df2 <- as.data.frame(df)
    df2$us <- df2$U/df2$S #
    myhist <- hist(df2[1:nclones,"us"]) #
    multiplier <- myhist$counts / myhist$density
    mydensity <- density(df2[1:nclones,"us"]) #
    mydensity$y <- mydensity$y * multiplier[1]
    myhist2 <- hist(df2[nclones+1:length(df2[,1]),"us"]) #
    multiplier2 <- myhist2$counts / myhist2$density
    mydensity2 <- density(df2[(nclones+1):(length(df2[,1])),"us"]) #
    mydensity2$y <- mydensity2$y * multiplier2[1]
    maxy1 <- max(mydensity$y)
    maxy2 <- max(mydensity2$y)
    maxx1 <- max(mydensity$x)
    maxx2 <- max(mydensity2$x)
    if(maxx1>=maxx2){maxx<-maxx1}
    if(maxx2>=maxx1){maxx<-maxx2}
    if(maxy1>=maxy2){maxy<-maxy1}
    if(maxy2>=maxy1){maxy<-maxy2}
    miny1 <- min(mydensity$y)
    miny2 <- min(mydensity2$y)
    minx1 <- min(mydensity$x)
    minx2 <- min(mydensity2$x)
    if(minx1>=minx2){minx<-minx1}
    if(minx2>=minx1){minx<-minx2}
    if(miny1>=miny2){miny<-miny1}
    if(miny2>=miny1){miny<-miny2}
    plot(mydensity,xlim=c(minx,maxx),ylim=c(miny,maxy),col="skyblue",lwd=5,ylab="",xlab="",main="")
    par(new=TRUE)
    plot(mydensity2,xlim=c(minx,maxx),ylim=c(miny,maxy),col=scales::alpha('red',.5),main="",lwd=5,ylab="Frequency",xlab="U/S ratio") #
    legend('topright',unique(clone_groups),lty=1, col=c('skyblue', 'red'), bty='n', cex=1,lwd=5)
  }
  
  
  # ### PLOT 3D
  function_plot4 <- function(x){
    plot3d(pca1$x, col=c("red","blue"), type="s", size=1, axes=F)
    axes3d(edges=c("x--", "y--", "z"), lwd=4, axes.len=2, labels=TRUE)
    grid3d("x")
    grid3d("y")
    grid3d("z")}
  
  #  ### PLOT FANCY PCs
  function_plot5 <- function(x){
    for(i in combn_matrix){
      pcx <- i[1]
      pcy <- i[2]
      g <- ggbiplot(pca1, choices = c(pcx,pcy), obs.scale = 1, groups=clone_groups, var.scale = 1,  ellipse = TRUE, circle = TRUE, labels=rownames(df)) 
      g <- g + scale_color_discrete(name = '')
      g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
      #  g <- g + ylim(-3,3)+xlim(-5.5,5.5)
      plot(g)
      
      
      #   jpeg(file = paste("/home/emre/Desktop/PCA_PCOA/plots/",pcx,"_",pcy,".jpg", sep = ""), width=650, height=650) 
      #  plot(g)
      # dev.off()
      
      
    }
  }
  
  #  ### PLOT FANCY COORDINATE
  function_plot6 <- function(x){
    print("Calculating Levenshtein distance...")
    sequences_of_clones <- as.data.frame(sequences_of_clones)
    dm <- matrix(ncol=(nclones*2),nrow=(nclones*2))
    numbers <- seq(1,(nclones*2),by=1)
    colnames(dm) <- numbers
    rownames(dm) <- numbers
    for(rij in rownames(dm)){
      for(kolom in colnames(dm)){
        if(rij==kolom){value=0}
        value<-stringdist(sequences_of_clones[rij,],sequences_of_clones[kolom,],method="lv")
        dm[rij,kolom] <- value}}
    
    pcoa <- cmdscale(dm,eig=TRUE)
    print(pcoa$points)
    #  return(pcoa)
    scores <- data.frame(df, pcoa$points[,1:2])
    pcoaplot <- qplot(x=X1, y=X2, data=scores, colour=clone_groups,xlab="Coordinate 1",ylab="Coordinate 2",main="") + theme(legend.position="none") 
    plot(pcoaplot)
    return(pcoa)    
  }
  
  #  ### PLOT CLUSTER DENDOGRAM ### HOW MANY PCs ???
  function_plot7 <- function(x){
    di <- Dist(pca1$x, method="pearson")
    tree <- hclust(di, method="average")
    pca1$hcluster <- as.factor((cutree(tree, k=ngroups)-(ngroups-1)) %% ngroups +1)  #fancy table
    plot(tree, xlab="",main="Cluster dendrogram\ndist. pearson correlation\nhclust average distance",sub="",labels=F)
    rect.hclust(tree, k=ngroups, border="red") 
    groups <- as.data.frame(cutree(tree,k=ngroups))
    groups$n <- rownames(df)
    groupdf <- data.frame(matrix(ncol=8,nrow=ngroups))
    for(k in 1:ngroups){
      a<-subset(groups, groups[,1]==k)
      groupdf[k,1]<-k
      count = 0
      n_resp=0
      seqlist = ""      
      for(i in a[,2]){
        count=count+1
        i <- as.numeric(i)
        seqlist = paste(seqlist,", ",i,sep="")
        if(i<=nclones){n_resp=n_resp+1}}      
      resp_p <- n_resp/count*100
      resp_p <- as.numeric(format(resp_p,digits=3))
      non_p <- 100-resp_p
      non_p <- as.numeric(format(non_p,digits=3))
      n_resp <- n_resp
      n_non <- count-n_resp
      resp_list <- ""
      non_list <- ""      
      b <- strsplit(seqlist,", ")[[1]]
      count5=0
      for(i in 1:length(b)){
        seq <- b[i]        
        if(nchar(seq)>=1){          
          seq<-as.numeric(seq)          
          if(seq<=nclones){
            if(i==2){resp_list <- seq}
            if(i>2){resp_list <- paste(resp_list,", ",seq,sep="")}}          
          if(seq>nclones){
            count5=count5+1
            if(count5==1){non_list <- seq}
            if(count5>1){non_list <- paste(non_list,", ",seq,sep="")}}}}
      
      groupdf[k,2] <- resp_p
      groupdf[k,3] <- non_p
      groupdf[k,4] <- n_resp
      groupdf[k,5] <- n_non
      groupdf[k,6] <- n_resp+n_non
      groupdf[k,7] <- resp_list
      groupdf[k,8] <- non_list
      
    }
    
    columnnames <- c("GROUP","RESP(%)","NON(%)","RESP_N","NON_N","TOTAL_N","resp_id","non_id")
    names(groupdf)<-columnnames    
    cat("\n")
    print(groupdf[,1:6])
    cat("NOTE: RESP_ID and NON_ID not shown in the table (column 7 and 8)")
    
  }
  
  
  
  
  #function_plot1(x)    # VARIANCES OF PCs
  function_plot2(x)    # THREE PLOTS OF PC1, PC2, PC3 AND CORRELATION CIRCLES
  #function_plot3(x)    # AMINO ACIDS RATIOS
  #function_plot4(x)    # 3D
  #function_plot5(x)    # FANCY BIG DETAILED PLOT
  #c<- function_plot6(x)    # FANCY PLOT FOR COORDINATE LEVENSHTEIN
  #function_plot7(x)    # CLUSTERING
  
  
  #overview <- as.data.frame(counts)
  #a <- as.data.frame(pca1$x)
  #b <- as.data.frame(c$points)
  #overview$pc1 <- a[,1]
  #overview$pc2 <- a[,2]
  #overview$co1 <- b[,1]
  #overview$co2 <- b[,2]
  #overview$original <- seqss
  #return(overview)
  
  ######
  
  
  ## GEEFT CMDSCALE OOK RORATION VAN DE AMINOZUREN? JE WILT WETEN WAAROM EEN CLUSTER NAAR EEN BEPAALDE RICHTING IS GESCHOVEN.
  
  
  ## SHOW FORMULA OF CALCULATING THE PERCENTAGE OF PCs VARIANCES
  
  ## PLOT CUMULATIVE PROPORTION INSTEAD OF JUST PCA
  
  ## COLOR LEAVES OF H. CLUSTER DENDROGRAM.
  
  ## FUNCTION TO AUTOMATIC CUTREE? BUT HOW MANY GROUPS/CUTOFF?
  
  ## WHERE IS THE U LOCATED IN THE RESPONDERS?
  
  
  ### CAN WE PREDICT EPITOPES BASED SIGNIFANT RESPONDESR? PROTEIN-PROTEIN INTERACTION.
  
  
  ## TAKE THE OUTER 50 CLONES TO FIND A CERTAIN MOTIF
  
  ## FUNCTION TO GET THE FASTA FILE OF THE CDR3 GROUPS. NOTE: DONT USE THE NONRESPONDERS IN THE SAME GROUP AS DISCRIMINATIVE MODE BECAUSE THEY ARE SIMILAR.
  
  ## FIND MORE BOMAN TOOLS.
  
  ## RUN MEME PIPELINE
  
  ## MAKE PIPELINE FOR GMAP, GAPPED MOTIF OF CDR3s WITH THE SAME LENGTH. MINIMUM FOR GMAP?
  
  ######
  
}



##############################

get_kidera <- function(x,method_dist,method_hclust){
  df<- data.frame(matrix(ncol=10,nrow=20))
  rownames(df) <- aminoacids
  factors <- c("helix.bend.pref", "side.chain.size", "extended.str.pref", "hydrophobicity", "double.bend.pref", "partial.spec.vol", "flat.ext.pref", "occurrence.alpha.reg", "pK.C", "surrounding.hydrop")
  aminocount=0
  for(i in aminoacids){
    aminocount=aminocount+1
    columncount=0
    for(factor in factors){
      columncount=columncount+1
      value <- kidera(i,factor)
      df[aminocount,columncount] <- value}}  
  dist1 <- Dist(df,method=method_dist)
  plot(hclust(dist1,method=method_hclust),main="Kidera")
  return(df)}

#######################################

### SAMPLE = DATA.FRAME WITH ONE COLUMN OF CDR3 SEQUENCES. METHOD == PEARSON OR LV.
get_DEND <- function(sample,dist_method){
  vec <- c()
  for(i in sample[,1]){vec<-c(vec,i)}  
  groupCodes <- c(rep("RESP",100),rep("NON",100))
  rownames(sample) <- make.unique(groupCodes)
  colorCodes <- c(RESP="blue", NON="red")
  distSamples <- vec
  if(dist_method=="pearson"){distSamples <- Dist(vec,method="pearson")}
  if(dist_method=="lv"){distSamples <- stringdistmatrix(distSamples,distSamples,method="lv")}
  hc <- hclust(as.dist(distSamples),method="average")
  dend <- as.dendrogram(hc)
  labels_colors(dend) <- colorCodes[groupCodes][order.dendrogram(dend)]
  par(cex=0.5, mar=c(5, 8, 4, 1))
  plot(dend, xlab="", ylab="", main="", sub="", axes=FALSE)
  par(cex=1)
  axis(2)}

################### niet gebruiken, stringdistmatrix doet het zelfde.
get_dm <- function(x){
  dm2 <- matrix(ncol=199,nrow=200)
  dm2 <- dm2[2:200,]
  cols <- seq(1,199,by=1)
  rows <- seq(2,200,by=1)
  colnames(dm2) <- cols
  rownames(dm2) <- rows
  combinaties <- combn(200,2)
  for(i in as.data.frame(combinaties)){
    eerstenumber <- i[1]
    tweedenumber <- i[2]
    eersteseq <- seqlist[eerstenumber,]
    tweedeseq <- seqlist[tweedenumber,]
    value <- stringdist(eersteseq,tweedeseq,method="lv")
    dm2[tweedenumber-1,eerstenumber] <- value}  
  dm2[is.na(dm2)] <- 0  
  return(dm2)}

########################

# DATA is data.frame of N clones of responder and non, which contains the 5 aa percentages
get_USratio_violin <- function(data,nclones){
  data$US.ratio <- data$U/data$S
  data$Clone <- ""
  data <- as.data.frame(data)
  data[1:100,"Clone"] <- "Responder"
  data[101:200,"Clone"] <- "Non-responder"
  View(data)
  p <- ggplot(data, aes(factor(Clone), US.ratio)) 
  p + geom_violin(aes(fill = factor(Clone)),trim=F) + coord_flip() + labs(x = "", y = "U/S ratio") + theme(legend.position="none") 
}

##########################################################

get_res_or_non_matrix <- function(x){  
  df1 <- data.frame(matrix(ncol=4,nrow=34))
  count=0
  vec<-c()
  for(i in x){
    count=count+1
    i <- seqlist_20aa[i,]
    seq <- as.character(i)
    vec<-c(vec,seq)
    a<- get_find_seq(pemc_filter,i,"full_aa")
    nr <- sum(a$Number.of.reads)
    v <- a[1,"V.gene"]
    j <- a[1,"J.gene"]
    df1[count,1] <- nr
    df1[count,2] <- seq
    df1[count,3] <- v
    df1[count,4] <- j
  }
  return(df1)  
}


#######################
get_log2_aa_mono_count_plot <- function(x){
  ### change this D
  d <- data.frame(amino_acid=c("M", "H", "N", "S", "T", "Q", "V", "L", "P", "F", "C", "R", "A", "W", "Y", "G", "D", "E", "K", "I"), ratio=c(1.55124851,  1.07062266,  0.93066209,  0.81428291,  0.38132350,  0.33894490,  0.30732292,  0.25906775,  0.13961761,  0.04816301, -0.00456765, -0.23225967, -0.35750243, -0.44875149, -0.55077243, -0.56777560, -0.63516462, -0.66334555, -1.53621434, -1.94798412))
  p <- ggplot(d, aes(y=ratio)) 
  d$amino_acid <- reorder(d$amino_acid, d$ratio)
  p + geom_bar(aes(x=amino_acid), data=d, stat="identity") + labs(list(title = "T100 and B100 CDR3 clones", x = "Amino acid", y = "Log2 Responder / Non ratio (%)"))
}
#############################

get_responders <- function(d,nclones,pca_or_pcoa,x,y){
  ### d = pca$x or pcoa$points
  if(pca_or_pcoa =="pca"){d<-d$x}
  d <- as.data.frame(d)
  d <- d[1:nclones,]
  if(x<=0){d <- subset(d, V1<=x)}
  if(x>=0){d <- subset(d, V1>=x)}
  if(y<=0){d <- subset(d, V2<=y)}
  if(y>=0){d <- subset(d, V2>=y)}
  return(d)
}


get_del <- function(x){
  scores5 <- data.frame(pca_5aa$x[,1:2])
  scores9 <- data.frame(pca_9aa$x[,1:2])
  scores20 <- data.frame(pca_20aa$x[,1:2])
  scores5o <- data.frame(pcoa_5aa)
  scores9o <- data.frame(pcoa_9aa)
  scores20o <- data.frame(pcoa_20aa)
  pc5 <- qplot(x=PC1, y=PC2, data=scores5, colour=clone_groups)  + xlab("") + ylab("") + ggtitle("PCA 5")+ theme(plot.title=element_text(size=12))
  legend <- get_legend(pc5)
  plot(legend)
  pc5 <- pc5 + theme(legend.position="none") 
  pc9 <- qplot(x=PC1, y=PC2, data=scores9, colour=clone_groups)  + theme(legend.position="none")+ xlab("") + ylab("") + ggtitle("PCA 9")+ theme(plot.title=element_text(size=12))
  pc20 <- qplot(x=PC1, y=PC2, data=scores20, colour=clone_groups)  + theme(legend.position="none")+ xlab("") + ylab("") + ggtitle("PCA 20")+ theme(plot.title=element_text(size=12))
  pc5o <- qplot(x=X1, y=X2, data=scores5o, colour=clone_groups)  + theme(legend.position="none")+ xlab("") + ylab("") + ggtitle("PCoA 5")+ theme(plot.title=element_text(size=12))
  pc9o <- qplot(x=X1, y=X2, data=scores9o, colour=clone_groups)  + theme(legend.position="none")+ xlab("") + ylab("") + ggtitle("PCoA 9")+ theme(plot.title=element_text(size=12))
  pc20o <- qplot(x=X1, y=X2, data=scores20o, colour=clone_groups)  + theme(legend.position="none") + xlab("") + ylab("") + ggtitle("PCoA 20") + theme(plot.title=element_text(size=12))
  #grid.arrange(pc5,pc9,pc20,pc5o,pc9o,pc20o,ncol=3, nrow=2)  
  
}

########################3

get_random100_pca_for_nice_plot_us_ratio <- function(x){
  
  x <- get_random_subset(x,200)
  x <- get_PCA(x,pbmc_filter,100,4,amino_acid_5group2)
  x <- as.data.frame(x)
  x$US <- x$U/x$S
  x$LOG2_US <- log(x$US)
  return(x)
  
}

###########################

get_jitter_plot_nice_US_ratio_pbmc_random <- function(x){
  
  df <- data.frame(matrix(ncol=2,nrow=1200))
  df[1:200,1] <- "T100"
  df[101:200,1] <- "B100"
  df[201:300,1] <- "R100.01"
  df[301:400,1] <- "R100.02"
  df[401:500,1] <- "R100.03"
  df[501:600,1] <- "R100.04"
  df[601:700,1] <- "R100.05"
  df[701:800,1] <- "R100.06"
  df[801:900,1] <- "R100.07"
  df[901:1000,1] <- "R100.08"
  df[1001:1100,1] <- "R100.09"
  df[1101:1200,1] <- "R100.10"
  
  df[1:100,2] <- test_pemc[1:100,"US"]
  df[101:200,2] <- test_pemc[101:200,"US"]
  df[201:300,2] <- test1[101:200,"US"]
  df[301:400,2] <-  test2[101:200,"US"]
  df[401:500,2] <-  test3[101:200,"US"]
  df[501:600,2] <-  test4[101:200,"US"]
  df[601:700,2] <-  test5[101:200,"US"]
  df[701:800,2] <-  test6[101:200,"US"]
  df[801:900,2] <-  test7[101:200,"US"]
  df[901:1000,2] <-  test8[101:200,"US"]
  df[1001:1100,2] <-  test9[101:200,"US"]
  df[1101:1200,2] <-  test10[101:200,"US"]
  
  df$clone_group <- ""
  df[1:100,3] <- "Responder PEMC clones"
  df[101:200,3] <- "Non-responder PBMC clones"
  df[201:1200,3] <- "Random PBMC clones"
  clone_groups <- df$clone_group
  p <- qplot(X1, X2, data = df, geom = c("boxplot", "jitter"),colour=clone_groups, fill=clone_groups, alpha=0.2) + xlab("") + ylab("U/S ratio") + ggtitle("") 
  plot(p)
  
}

##################################

get_jitter_plot_nice_US_ratio_pemc_random <- function(x){
  
  df <- data.frame(matrix(ncol=2,nrow=1200))
  df[1:200,1] <- "T100"
  df[101:200,1] <- "B100"
  df[201:300,1] <- "R100.11"
  df[301:400,1] <- "R100.12"
  df[401:500,1] <- "R100.13"
  df[501:600,1] <- "R100.14"
  df[601:700,1] <- "R100.15"
  df[701:800,1] <- "R100.16"
  df[801:900,1] <- "R100.17"
  df[901:1000,1] <- "R100.18"
  df[1001:1100,1] <- "R100.19"
  df[1101:1200,1] <- "R100.20"
  
  df[1:100,2] <- test_pemc[1:100,"US"]
  df[101:200,2] <- test_pemc[101:200,"US"]
  df[201:300,2] <- test11[1:100,"US"]
  df[301:400,2] <-  test12[1:100,"US"]
  df[401:500,2] <-  test13[1:100,"US"]
  df[501:600,2] <-  test14[1:100,"US"]
  df[601:700,2] <-  test15[1:100,"US"]
  df[701:800,2] <-  test16[1:100,"US"]
  df[801:900,2] <-  test17[1:100,"US"]
  df[901:1000,2] <-  test18[1:100,"US"]
  df[1001:1100,2] <-  test19[1:100,"US"]
  df[1101:1200,2] <-  test20[1:100,"US"]
  
  df$clone_group <- ""
  df[1:100,3] <- "Responder PEMC clones"
  df[101:200,3] <- "Non-responder PBMC clones"
  df[201:1200,3] <- "Random PEMC clones"
  clone_groups <- df$clone_group
  p <- qplot(X1, X2, data = df, geom = c("boxplot", "jitter"),colour=clone_groups, fill=clone_groups, alpha=0.2) + xlab("") + ylab("U/S ratio") + ggtitle("") 
  plot(p)
  
}

##########################################

get_US_ratio_clonal_size_plot <- function(x){  
  #p <- qplot(data=test_pemc, log10_clonal_size, US) + xlab("Log10 Clonal Size") + ylab("U/S ratio") + ggtitle("") + geom_point(colour = "#56B4E9")   
  #p <- p +  geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) 
  #p <- p + geom_text(aes(x = 4.5, y = 5, label = lm_eqn(test123)), parse = TRUE)
  #plot(p)
  
  lm_eqn = function(df){
    m = lm(y ~ x, df);
    eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, list(a = format(coef(m)[1], digits = 2), b = format(coef(m)[2], digits = 2), r2 = format(summary(m)$r.squared, digits = 3)))
    as.character(as.expression(eq));                 
  }
  
  x <- coef(model)
  intercept <- signif(x[1], 3)
  terms <- paste(signif(x[-1], 3), names(x[-1]), sep="*", collapse= " + ")
  e1 <- "y = 0.564x - 0.92"  #paste(intercept,"+", terms) #, collapse = " + ")
  e2 <- paste("R^2 = ", round(summary(model)$r.squared, 3))
  
  p <- ggplot(test123, aes(x=x, y=y)) + 
    geom_point() + 
    geom_smooth(method=lm,color="black") +
    annotate("text", label=e1, x=max(test123$x), y=max(test123$y), 
             hjust=1, size=5, vjust=0.5) +
    annotate("text", label=e2, x=max(test123$x), y=max(test123$y), 
             hjust=1, size=5, vjust=2.5) +
    xlab("Log10 Clonal Size") + ylab("U/S ratio") + ggtitle("") + geom_point(colour = "#56B4E9")   
  
  plot(p)
}


#########################

# K = AMOUNT OF CLUSTERS
get_dendrogram_for_atchley_subgroups <- function(k){
  hca   <- hclust(Dist(all_20aa,method="pearson"),method="average")
  clust <- cutree(hca,k=k)  # k clusters
  
  dendr    <- dendro_data(hca, type="rectangle") # convert for ggplot
  clust.df <- data.frame(label=rownames(all_20aa), cluster=factor(clust))
  dendr[["labels"]]   <- merge(dendr[["labels"]],clust.df, by="label")
  rect <- aggregate(x~cluster,label(dendr),range)
  rect <- data.frame(rect$cluster,rect$x)
  ymax <- mean(hca$height[length(hca$height)-((k-2):(k-1))])
  
  p <- ggplot() + 
    geom_segment(data=segment(dendr), aes(x=x, y=y, xend=xend, yend=yend)) + 
    geom_text(data=label(dendr), aes(x, y, label=label, hjust=-0.1, color=cluster), 
              size=4.5) +
    geom_rect(data=rect, aes(xmin=X1-.3, xmax=X2+.3, ymin=0, ymax=ymax), 
              color="red", fill=NA)+
    #geom_hline(yintercept=0.33, color="blue")+
    coord_flip() + scale_y_reverse(expand=c(0, 1)) +
    ylim(1.5,-0.5)+
    #theme_dendro() +
    theme(legend.position="none") +
    labs(x="Amino acid",y="Height") +
    geom_text(aes(x = 19.5, y = 1, label ="Distance method: Pearson", parse = TRUE),size=4.5) +
    geom_text(aes(x = 18.5, y = 1.022, label ="Cluster method: Average", parse = TRUE),size=4.5) 
  
  plot(p)
}


###################

# vul x in als hoeveel TRBJ1-5 in de T100 clones zitten.
get_kans <- function(x){
  nclones <- 65405
  n_j1_5 <- x
  responders <- 12
  for(i in 1:responders){
    if(i==1){
      kans <- n_j1_5/nclones
    }
    if(i>=2){
      kans <- kans*((n_j1_5-1)/(nclones-1))
    }
  }
  print(kans)
  eenopde <- 1/kans
  cat("Selectie van 12 responders met TRBJ1-5*01 segment van de T100 clones is 1 op de",eenopde) 
}

##vier scenarios##
# diversity x % van T100 clones
# abundance x % van sum(T100$Number.of.reads) clones
# diversity 6400 van 64.000 clones
# abundance 25 % van x clones.

#########################

# K = AMOUNT OF CLUSTERS
get_dendrogram_for_12_responders <- function(k){
  hca   <- hclust(as.dist(stringdistmatrix(responders_seq,responders_seq,method="lv")),method="average")
  #clust <- cutree(hca,k=k)  # k clusters
  
  dendr <- dendro_data(hca,type="rectangle")
  #dendr    <- dendro_data(hca, type="rectangle") # convert for ggplot
  #clust.df <- data.frame(label=rownames(a), cluster=factor(clust))
  #dendr[["labels"]]   <- merge(dendr[["labels"]],clust.df, by="label")
  #rect <- aggregate(x~cluster,label(dendr),range)
  #rect <- data.frame(rect$cluster,rect$x)
  #ymax <- mean(hca$height[length(hca$height)-((k-2):(k-1))])
  
  p <- ggplot() + 
    geom_segment(data=segment(dendr), aes(x=x, y=y, xend=xend, yend=yend)) + 
    geom_text(data=label(dendr), aes(x, y, label=label, hjust=-0.1, color=cluster), size=4.5) +
    #geom_rect(data=rect, aes(xmin=X1-.3, xmax=X2+.3, ymin=0, ymax=ymax), 
    #          color="red", fill=NA)+
    coord_flip() + scale_y_reverse(expand=c(0, 1)) +
    ylim(1.5,-0.5)+
    theme(legend.position="none") +
    labs(x="Amino acid",y="Height") +
    geom_text(aes(x = 19.5, y = 1, label ="Distance method: Levenshtein", parse = TRUE),size=4.5) +
    geom_text(aes(x = 18.5, y = 1.022, label ="Cluster method: Average", parse = TRUE),size=4.5) 
  
  plot(p)
}

##############################################################################

get_dendrogram_for_12_responders <- function(x){
  
  dist1 <- stringdistmatrix(responders_seq,responders_seq,method="lv")
  hc <- hclust(as.dist(dist1),method="complete")
  dendr <- dendro_data(hc, type="rectangle")  
  
  p <- ggplot() + geom_segment(data=segment(dendr), aes(x=x, y=y, xend=xend, yend=yend)) +
    coord_flip() +
    scale_y_reverse() +
    labs(y="Amino acid mutation", x="Responder clones") +
    geom_text(data=dendr$labels, aes(x, y, label=paste(for_plot_seq2," (T",for_plot_numbers2,")",sep=""), hjust=-0.1), size=4.5) +
    ylim(6,-5) +
    geom_text(aes(x = 13, y = 5, label ="Distance method: Levenshtein", parse = TRUE),size=3) +
    geom_text(aes(x = 12.5, y = 5.231, label ="Cluster method: Average", parse = TRUE),size=3)
  plot(p)
}

get_del <- function(x){
  ggdendrogram(b,rotate=TRUE,theme_dendro=F)+
    labs(y="Amino acid mutation", x="Responder clones") +
    coord_flip() +
    scale_y_reverse() +
    geom_text(data=dendr$labels, aes(x, y, label=paste(for_plot_seq," (",for_plot_numbers2,")",sep=""), hjust=-0.1), size=4.5) +
    ylim(6,-5) +
    geom_text(aes(x = 13, y = 5, label ="Distance method: Levenshtein", parse = TRUE),size=3) +
    geom_text(aes(x = 12.5, y = 5.231, label ="Cluster method: Average", parse = TRUE),size=3)
  
}

get_responder <- function(x,data){
  count=0
  for(i in x){
    count=count+1
    df <- get_find_seq(data,i,"full_aa")
    if(count==1){
      df1 <- df
    }
    if(count>1){
      df1 <- rbind(df1,df)
    }
  }
  return(df1)
}


get_hiv_motif_epitope <- function(epitope_dataset,motif){
  subjects <- unique(epitope_dataset$Subject)
  count=0
  for(s in subjects){
    b <- subset(epitope_dataset,Subject==s)
    divtotal <- length(b[,1])
    b<- get_find_seq(b,motif,"full_aa")
    count=count+1
    subject_no<-noquote(subjects[count])
    ab<-format((sum(b$Frequency.abundance)),digits=2,trim=2)
    div<-length(b[,1])
    dvi2 <- format(div/divtotal*100,digits=2,trim=2)
    cat(subject_no,"Abundance:\t",ab,"\tDiversity:\t",dvi2,"\n")
  }
  
  
}

get_j_gene_aa_in_df <- function(data){
  data$J.gene.amino.acid.sequence <- ""
  data$J.gene.amino.acid.sequence2 <- ""
  count=0
  for(i in data$J.gene.start.position){count=count+1
                                       #data[count,"J.gene.amino.acid.sequence"] <- substr(data[count,"Amino.acid.sequence"],trunc((i/3)),nchar(data[count,"Amino.acid.sequence"]))
                                       data[count,"J.gene.amino.acid.sequence2"] <- substr(data[count,"Amino.acid.sequence"],trunc((i/3))-1,nchar(data[count,"Amino.acid.sequence"]))
  }
  return(data)
}


get_del <- function(motif){
  
  a <- get_find_seq(pemc_filter_1_5,motif,"full_aa")
  b <- get_find_seq(pbmc_filter_1_5,motif,"full_aa")
  div1 <- length(a[,1])/length(pemc_filter_1_5[,1])*100
  div2 <- length(b[,1])/length(pbmc_filter_1_5[,1])*100
  ab1 <- sum(a$Number.of.reads)/sum(pemc_filter_1_5$Number.of.reads)*100
  ab2 <- sum(b$Number.of.reads)/sum(pbmc_filter_1_5$Number.of.reads)*100
  
  cat("\nPEMC ab: ",ab1,"div: ",div1)
  cat("\nPBMC ab: ",ab2,"div: ",div2)
  
  
}

#get_PCA(mothera_filter,mothera_filter,100,4,amino_acid_5group2)
#get_PCA(motherb_filter,motherb_filter,100,4,amino_acid_5group2)
#get_PCA(motherc_filter,motherc_filter,100,4,amino_acid_5group2)
#get_PCA(childa1_filter,childa1_filter,100,4,amino_acid_5group2)
#get_PCA(childa2_filter,childa2_filter,100,4,amino_acid_5group2)
#get_PCA(childb1_filter,childb1_filter,100,4,amino_acid_5group2)
#get_PCA(childb2_filter,childb2_filter,100,4,amino_acid_5group2)
#get_PCA(childc1_filter,childc1_filter,100,4,amino_acid_5group2)
#get_PCA(childc2_filter,childc2_filter,100,4,amino_acid_5group2)
#get_PCA(m1d1_filtered,m1d1_filtered,100,4,amino_acid_5group2)
#get_PCA(m1d2_filtered,m1d2_filtered,100,4,amino_acid_5group2)
#get_PCA(m2d1_filtered,m2d1_filtered,100,4,amino_acid_5group2)
#get_PCA(f1d1_filtered,f1d1_filtered,100,4,amino_acid_5group2)
#get_PCA(f1d2_filtered,f1d2_filtered,100,4,amino_acid_5group2)




#patient_a_pbmc <- get_table_immunoseq("Patient_A_Blood.tsv","patient_a_pbmc")
#patient_b_pbmc <- get_table_immunoseq("Patient_B_Blood.tsv","patient_b_pbmc")
#patient_c_pbmc <- get_table_immunoseq("Patient_C_Blood.tsv","patient_c_pbmc")
#patient_d_pbmc <- get_table_immunoseq("Patient_D_Blood.tsv","patient_d_pbmc")
#patient_e_pbmc <- get_table_immunoseq("Patient_E_Blood.tsv","patient_e_pbmc")
#patient_f_pbmc <- get_table_immunoseq("Patient_F_Blood.tsv","patient_f_pbmc")

#patient_a_cpl <- get_table_immunoseq("Patient_A_CPL.tsv","patient_a_cpl")
#patient_b_cpl <- get_table_immunoseq("Patient_B_CPL.tsv","patient_b_cpl")
#patient_c_cpl <- get_table_immunoseq("Patient_C_CPL.tsv","patient_c_cpl")
#patient_d_cpl <- get_table_immunoseq("Patient_D_CPL.tsv","patient_d_cpl")
#patient_e_cpl <- get_table_immunoseq("Patient_E_CPL.tsv","patient_e_cpl")
#patient_f_cpl <- get_table_immunoseq("Patient_F_CPL.tsv","patient_f_cpl")

#patient_a_synovium <- get_table_immunoseq("Patient_A_Synovium.tsv","patient_a_synovium")
#patient_b_synovium <- get_table_immunoseq("Patient_B_Synovium.tsv","patient_b_synovium")
#patient_c_synovium <- get_table_immunoseq("Patient_C_Synovium.tsv","patient_c_synovium")
#patient_d_synovium <- get_table_immunoseq("Patient_D_Synovium.tsv","patient_d_synovium")
#patient_e_synovium <- get_table_immunoseq("Patient_E_Synovium.tsv","patient_e_synovium")
#patient_f_synovium <- get_table_immunoseq("Patient_F_Synovium.tsv","patient_f_synovium")

#patient_a_pbmc_filter <- get_filter_immunoseq(patient_a_pbmc)
#patient_b_pbmc_filter <- get_filter_immunoseq(patient_b_pbmc)
#patient_c_pbmc_filter <- get_filter_immunoseq(patient_c_pbmc)
#patient_d_pbmc_filter <- get_filter_immunoseq(patient_d_pbmc)
#patient_e_pbmc_filter <- get_filter_immunoseq(patient_e_pbmc)
#patient_f_pbmc_filter <- get_filter_immunoseq(patient_f_pbmc)




########################################




get_analysis <- function(data1,data2){ #data3
  
  data1_unique_clones <- unique(data1$Amino.acid.sequence)
  data2_unique_clones <- unique(data2$Amino.acid.sequence)
  # data3_unique_clones <- unique(data3$Amino.acid.sequence)
  df <- subset(as.data.frame(table(c(data1_unique_clones,data2_unique_clones))),Freq==2) #data3_unique_clones
  print(length(df[,1]))
  
  
}


#################################################

get_relative_abundance_frequency_column <- function(data){
  data$Relative.frequency.percentage <- data$Number.of.reads/sum(data$Number.of.reads)*100
  return(data)
}

#################################################

get_andecs <- function(data,abundance,diversity,v_usage){ #pipeline
  data <- get_relative_abundance_frequency_column(data)
  abs <- tapply(data$Relative.frequency.percentage,data$Amino.acid.sequence,sum)
  abs <- as.data.frame(subset(abs,abs>=abundance))
  ab_clones <-rownames(abs)
  seqs <- c()
  if(length(data)>22){ #pipeline=="immunoseq"
    for(clone in ab_clones){    
      check <- subset(data,Amino.acid.sequence==clone)
      if("V.gene.start.position" %in% colnames(check)){colnames(check)[colnames(check)=="V.gene.start.position"] <- "vIndex"}
      check$Junction.nucleotide.sequence2 <- substr(check$Junction.nucleotide.sequence,check$vIndex,nchar(check$Junction.nucleotide.sequence))
      if(length(unique(check$Junction.nucleotide.sequence2))>=diversity){
        if(length(unique(check$V.gene))>=v_usage){
          seqs<-c(seqs,clone)
        }
      }
    } 
  }
  
  if(length(data)<22){ #pipeline=="rtcr"
    for(clone in ab_clones){    
      check <- subset(data,Amino.acid.sequence==clone)
      if(length(unique(check$Junction.nucleotide.sequence))>=diversity){
        if(length(unique(check$V.gene))>=v_usage){
          seqs<-c(seqs,clone)
        }
      }
      if(diversity=="leeg"){
        if(length(unique(check$V.gene))>=v_usage){
          seqs<-c(seqs,clone)
        }
      }
    } 
  }
  
  df <- data.frame(matrix(ncol=1,nrow=length(seqs)))
  df$Amino.acid.sequence <- seqs
  df[,1] <- NULL
  cat("[1] ANDECs :",length(seqs),"\n")
  return(df)
  
}


get_del <- function(x){
  
  for(i in 1:10){
    print(i)
    get_andecs(pemc_filter,0.01,i,2,"rtcr")
  }
  
  
  
}


#Table 1. Definitions of clonotype groups classified according to frequency. gebruik van paper Characteristics of Tumor Infiltrating Lymphocyte and Circulating Lymphocyte Repertoires in Pancreatic Cancer by the Sequencing of T Cell Receptors   

##################################################################################################################

##### USE get_andecs AS DATA TO SELECT RESPONDERS IN DATA SET.

get_atchley_or_kidera_pca_random_background <- function(data,method){
  x <- data
  plots <- list()
  clone_plots <- list()
  circle_plots <- list()
  unique_clones <- as.data.frame(unique(x$Amino.acid.sequence))
  colnames(unique_clones)<-"Amino.acid.sequence"
  nclones <- length(unique_clones[,1])
  
  control_datasets = list(mothera_filter,motherb_filter,motherc_filter,childa1_filter,childa2_filter,childb1_filter,childb2_filter,childc1_filter,childc2_filter,male1_total,male2_total,female1_total,pbmc_20ab_clones)
  main_titles <- c("Mother A","Mother B","Mother C","Child A1","Child A2","Child B1","Child B2","Child C1","Child C2","Male 1","Male 2","Female 1","PBMC TB")
  count_for_main = 0
  for(control_data in 1:length(control_datasets)){
    control_clones <- data.frame(get_random_subset(control_datasets[[control_data]],length(unique_clones[,1])))$Amino.acid.sequence  
    control_clones <- as.data.frame(control_clones)
    colnames(control_clones)<-"Amino.acid.sequence"
    together <- rbind(unique_clones,control_clones)
    together <- as.data.frame(together)
    colnames(together)[colnames(together)=="together"] <- "Amino.acid.sequence"
    clone_groups <- c(rep("responder",nclones),rep("non-responder",nclones))
    
    if(method=="atchley"){forpca <- get_atchley_sequence(data=together)
                          forpca <- prcomp(forpca[,2:6],scale.=F)}
    if(method=="kidera"){forpca <- get_kidera_sequence(data=together)
                         forpca <- prcomp(forpca[,2:11],scale.=F)}
    
    #print(forpca)
    
    theta <- seq(0,2*pi,length.out = 100)
    circle <- data.frame(x = cos(theta), y = sin(theta))
    
    count_for_main=count_for_main+1
    
    if(control_data==1){
      clone_plots[[1]] <- qplot(data=data.frame(forpca$x),x=PC1,y=PC2,colour=clone_groups)
      legend_clones <- get_legend(clone_plots[[1]])
      clone_plots[[1]] <- clone_plots[[1]] + theme(legend.position="none")  + labs(x=" ",y=" ",title=main_titles[count_for_main])
      
      loadings <- data.frame(forpca$rotation, .names = row.names(forpca$rotation))
      circle_plots[[1]] <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) + coord_fixed(ratio=1) 
      legend_circles <- get_legend(circle_plots[[1]])
      circle_plots[[1]] <- circle_plots[[1]] + theme(legend.position="none") + labs(x = "", y = "",title=main_titles[count_for_main])  
      
      pc1 <- forpca$rotation[,1]
      pc2 <- forpca$rotation[,2]
      pc3 <- forpca$rotation[,3]
    }
    
    if(control_data>1){
      clone_plots[[control_data]] <- qplot(data=data.frame(forpca$x),x=PC1,y=PC2,colour=clone_groups)  + labs(x=" ",y=" ",title=main_titles[count_for_main]) + theme(legend.position="none") 
      loadings <- data.frame(forpca$rotation, .names = row.names(forpca$rotation))
      circle_plots[[control_data]] <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) + coord_fixed(ratio=1) + theme(legend.position="none") + labs(x = "", y = "",title=main_titles[count_for_main])
      
      pc1 <- cbind(pc1,forpca$rotation[,1])
      pc2 <- cbind(pc2,forpca$rotation[,2])
      pc3 <- cbind(pc3,forpca$rotation[,3])
    }
    
    if(control_data==length(control_datasets)){
      clone_plots[[control_data]] <- qplot(data=data.frame(forpca$x),x=PC1,y=PC2,colour=clone_groups) + theme(legend.position="none") + labs(title=main_titles[count_for_main])
      loadings <- data.frame(forpca$rotation, .names = row.names(forpca$rotation))
      circle_plots[[control_data]] <- ggplot(circle,aes(x,y)) + geom_path() + geom_text(data=loadings, mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) + coord_fixed(ratio=1) + labs(x = "PC1", y = "PC2",title=main_titles[count_for_main]) + theme(legend.position="none")    
    }
    
    
  }
  
  do.call("grid.arrange", c(clone_plots, ncol=3))
  #do.call("grid.arrange", c(circle_plots, ncol=3))
  
  pclist <- list(pc1,pc2,pc3)
  
  return(pclist)
}


#########################################################################

get_atchley_sequence <- function(data){
  cat("Calculating Atchley factors...\n")
  kidera_column <- c()
  factors <- c("pah", "pss","ms","cc","ec")
  count=0  
  for(seq in data$Amino.acid.sequence){
    count=count+1
    atchley_sequence <- c()
    f1 <- c()
    f2 <- c()
    f3 <- c()
    f4 <- c()
    f5 <- c()
    for(aa in 1:nchar(seq)){
      aa <- substr(seq,aa,aa)      
      atchley_aa <- c()      
      for(factor in factors){
        x <- AAMetric.Atchley[rownames(AAMetric.Atchley)==aa,factor]
        atchley_aa <- c(atchley_aa,x)}      
      atchley_sequence <- c(atchley_sequence,atchley_aa)
      f1 <- c(f1,atchley_aa[1])
      f2 <- c(f2,atchley_aa[2])
      f3 <- c(f3,atchley_aa[3])
      f4 <- c(f4,atchley_aa[4])
      f5 <- c(f5,atchley_aa[5])}
    atchley_sequence <- c(mean(f1),mean(f2),mean(f3),mean(f4),mean(f5))    
    data[count,"AF1"] <- atchley_sequence[1]
    data[count,"AF2"] <- atchley_sequence[2]
    data[count,"AF3"] <- atchley_sequence[3]
    data[count,"AF4"] <- atchley_sequence[4]
    data[count,"AF5"] <- atchley_sequence[5]}
  cat("Calculating Atchley factors DONE\n")
  return(data)
}

get_amk <- function(ab){
  
  a<-get_andecs(patient1_tumor,ab,1,1,"immunoseq")
  b<-get_andecs(patient2_tumor,ab,1,1,"immunoseq")
  c<-get_andecs(patient3_tumor,ab,1,1,"immunoseq")
  d<-get_andecs(patient4_tumor,ab,1,1,"immunoseq")
  e<-get_andecs(patient5_tumor,ab,1,1,"immunoseq")
  f<-get_andecs(patient6_tumor,ab,1,1,"immunoseq")
  g<-get_andecs(patient7_tumor,ab,1,1,"immunoseq")
  h<-get_andecs(patient8_tumor,ab,1,1,"immunoseq")
  i<-get_andecs(patient9_tumor,ab,1,1,"immunoseq")
  j<-get_andecs(patient10_tumor,ab,1,1,"immunoseq")
  k<-get_andecs(patient11_tumor,ab,1,1,"immunoseq")
  l<-get_andecs(patient12_tumor,ab,1,1,"immunoseq")
  m<-get_andecs(patient13_tumor,ab,1,1,"immunoseq")
  n<-get_andecs(patient14_tumor,ab,1,1,"immunoseq")
  
  total <- rbind(a,b,c,d,e,f,g,h,i,j,k,l,m,n)
  clones <- length(total[,1])
  unique_clones <- length(unique(total[,1]))
  
  print(clones)
  print(unique_clones)
  #print(total)
  #return(total)
}


get_amk2 <- function(ab){
  
  a<-get_andecs(lesional_8,ab,1,1,"immunoseq")
  b<-get_andecs(lesional_9,ab,1,1,"immunoseq")
  c<-get_andecs(lesional_10,ab,1,1,"immunoseq")
  d<-get_andecs(lesional_11,ab,1,1,"immunoseq")
  e<-get_andecs(lesional_12,ab,1,1,"immunoseq")
  f<-get_andecs(lesional_13,ab,1,1,"immunoseq")
  g<-get_andecs(lesional_14,ab,1,1,"immunoseq")
  h<-get_andecs(lesional_15,ab,1,1,"immunoseq")
  
  
  total <- rbind(a,b,c,d,e,f,g,h)
  clones <- length(total[,1])
  unique_clones <- length(unique(total[,1]))
  
  print(clones)
  print(unique_clones)
  #print(total)
  return(total)
}

